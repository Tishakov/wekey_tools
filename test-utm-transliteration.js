// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ UTM –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞

const transliterateText = (text) => {
    return text
        .trim() // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        .toLowerCase() // –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        .replace(/[''""¬´¬ª‚Äû"]/g, '') // —É–¥–∞–ª—è–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –∫–∞–≤—ã—á–∫–∏ (–≤–∫–ª—é—á–∞—è —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–≤—ã—á–µ–∫)
        .replace(/[^\w\s\-\/\.]/g, '') // —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤, —Å–ª–µ—à–µ–π –∏ —Ç–æ—á–µ–∫
        .replace(/\s+/g, '-') // –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ) –Ω–∞ –¥–µ—Ñ–∏—Å
        .replace(/-+/g, '-') // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/\/+/g, '/') // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –æ–¥–∏–Ω
        .replace(/^-+|-+$/g, ''); // —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
    {
        input: '  My Campaign Name  ',
        expected: 'my-campaign-name',
        description: '–ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏'
    },
    {
        input: 'Campaign with "quotes" and \'apostrophes\'',
        expected: 'campaign-with-quotes-and-apostrophes',
        description: '–ö–∞–≤—ã—á–∫–∏ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã'
    },
    {
        input: 'Special @#$% symbols!',
        expected: 'special-symbols',
        description: '–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã'
    },
    {
        input: 'Multiple   spaces    between words',
        expected: 'multiple-spaces-between-words',
        description: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã'
    },
    {
        input: 'URL//path///page',
        expected: 'url/path/page',
        description: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–µ—à–∏'
    },
    {
        input: '---start-middle---end---',
        expected: 'start-middle-end',
        description: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã'
    },
    {
        input: 'example.com/path',
        expected: 'example.com/path',
        description: '–û–±—ã—á–Ω—ã–π URL'
    }
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ UTM –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞\n');

testCases.forEach((testCase, index) => {
    const result = transliterateText(testCase.input);
    const passed = result === testCase.expected;
    
    console.log(`–¢–µ—Å—Ç ${index + 1}: ${testCase.description}`);
    console.log(`–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "${testCase.input}"`);
    console.log(`–û–∂–∏–¥–∞–µ—Ç—Å—è: "${testCase.expected}"`);
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ: "${result}"`);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed ? '‚úÖ –ü–†–û–®–Å–õ' : '‚ùå –ù–ï –ü–†–û–®–Å–õ'}\n`);
});