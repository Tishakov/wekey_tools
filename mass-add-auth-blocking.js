#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã, —Ö—É–∫ –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
 */

const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const toolsToUpdate = [
    'CaseChangerTool.tsx',
    'TextSortingTool.tsx', 
    'TextOptimizerTool.tsx',
    'FindReplaceTool.tsx',
    'NumberGeneratorTool.tsx',
    'TextGeneratorTool.tsx',
    'SynonymGeneratorTool.tsx',
    'RemoveLineBreaksTool.tsx',
    'EmptyLinesRemovalTool.tsx',
    'SpacesToParagraphsTool.tsx',
    'EmojiTool.tsx',
    'TransliterationTool.tsx',
    'TextToHtmlTool.tsx',
    'WordGluingTool.tsx',
    'WordMixerTool.tsx',
    'WordInflectionTool.tsx',
    'UtmGeneratorTool.tsx',
    'TextByColumnsTool.tsx',
    'AddSymbolTool.tsx',
    'MatchTypesTool.tsx',
    'MinusWordsTool.tsx'
];

const pagesDir = path.join(__dirname, 'frontend', 'src', 'pages');

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const importsToAdd = `
import { useAuthRequired } from '../hooks/useAuthRequired';
import AuthRequiredModal from '../components/AuthRequiredModal';
import AuthModal from '../components/AuthModal';`.trim();

// –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const hookToAdd = `
    // Auth Required Hook
    const {
        isAuthRequiredModalOpen,
        isAuthModalOpen,
        requireAuth,
        closeAuthRequiredModal,
        closeAuthModal,
        openAuthModal
    } = useAuthRequired();
`.trim();

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
const modalsToAdd = `
            {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            <AuthRequiredModal
                isOpen={isAuthRequiredModalOpen}
                onClose={closeAuthRequiredModal}
                onLoginClick={openAuthModal}
            />

            <AuthModal
                isOpen={isAuthModalOpen}
                onClose={closeAuthModal}
                initialMode="login"
            />`.trim();

function updateToolFile(filePath) {
    console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${path.basename(filePath)}`);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if (!content.includes('useAuthRequired')) {
        const importIndex = content.lastIndexOf("import './");
        if (importIndex !== -1) {
            const beforeImport = content.substring(0, importIndex);
            const afterImport = content.substring(importIndex);
            content = beforeImport + importsToAdd + '\n' + afterImport;
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã');
        }
    } else {
        console.log('‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å');
    }
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫
    if (!content.includes('useAuthRequired()')) {
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π useState –∏–ª–∏ –Ω–∞—á–∞–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const componentMatch = content.match(/const \w+Tool: React\.FC = \(\) => \{[\s\S]*?const \{ [^}]+ \} = [^;]+;/);
        if (componentMatch) {
            const hookPosition = componentMatch.index + componentMatch[0].length;
            content = content.substring(0, hookPosition) + '\n\n' + hookToAdd + content.substring(hookPosition);
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö—É–∫');
        }
    } else {
        console.log('‚ö†Ô∏è –•—É–∫ —É–∂–µ –µ—Å—Ç—å');
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –≤ –∫–æ–Ω–µ—Ü
    if (!content.includes('AuthRequiredModal')) {
        const lastDiv = content.lastIndexOf('        </div>\n    );');
        if (lastDiv !== -1) {
            content = content.substring(0, lastDiv) + modalsToAdd + '\n        </div>\n    );' + content.substring(lastDiv + 15);
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
        }
    } else {
        console.log('‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —É–∂–µ –µ—Å—Ç—å');
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –§–∞–π–ª ${path.basename(filePath)} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');
    
    let successCount = 0;
    let totalCount = toolsToUpdate.length;
    
    toolsToUpdate.forEach(toolFile => {
        const filePath = path.join(pagesDir, toolFile);
        if (updateToolFile(filePath)) {
            successCount++;
        }
    });
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞–∂–¥–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ.');
}

if (require.main === module) {
    main();
}

module.exports = { updateToolFile };