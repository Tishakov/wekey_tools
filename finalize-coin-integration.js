const fs = require('fs');
const path = require('path');

const FRONTEND_PATH = path.resolve(__dirname, 'frontend');
const PAGES_PATH = path.join(FRONTEND_PATH, 'src', 'pages');

console.log('üîÑ Finalizing coin integration in all tools...');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const toolFiles = fs.readdirSync(PAGES_PATH)
    .filter(file => file.endsWith('Tool.tsx') && file !== 'PasswordGeneratorTool.tsx')
    .map(file => path.join(PAGES_PATH, file));

console.log(`üìÅ Found ${toolFiles.length} tools to finalize`);

let updatedCount = 0;

toolFiles.forEach(filePath => {
    const fileName = path.basename(filePath);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (content.includes('await executeWithCoins(async () => {')) {
        console.log(`‚úÖ ${fileName} - already properly integrated`);
        return;
    }
    
    // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ handleShowResult —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const handleShowResultMatch = content.match(/(const handleShowResult = async \(\) => {[\s\S]*?requireAuth\(\)[\s\S]*?return;[\s\S]*?}[\s\S]*?)(calculateStats\(\)|[^}]*statsService\.incrementAndGetCount[\s\S]*?});/);
    
    if (handleShowResultMatch) {
        const beforeStats = handleShowResultMatch[1];
        const statsCall = handleShowResultMatch[2];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å executeWithCoins
        let newFunction;
        if (statsCall.includes('calculateStats()')) {
            // –î–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π calculateStats
            newFunction = beforeStats + `
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–∞—Ç–æ–π –∫–æ–∏–Ω–æ–≤
        await executeWithCoins(async () => {
            await calculateStats();
        }, {
            inputLength: inputText.length
        });
    };`;
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –∏–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const logicMatch = content.match(/requireAuth\(\)[\s\S]*?return;[\s\S]*?}([\s\S]*?)};/);
            if (logicMatch) {
                const toolLogic = logicMatch[1].trim();
                newFunction = beforeStats + `
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–∞—Ç–æ–π –∫–æ–∏–Ω–æ–≤
        await executeWithCoins(async () => {
            ${toolLogic}
        }, {
            inputLength: inputText ? inputText.length : 0
        });
    };`;
            }
        }
        
        if (newFunction) {
            const newContent = content.replace(handleShowResultMatch[0], newFunction);
            
            // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            fs.writeFileSync(filePath + '.backup2', content);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fs.writeFileSync(filePath, newContent);
            
            console.log(`üîß Updated ${fileName}`);
            updatedCount++;
        } else {
            console.log(`‚ö†Ô∏è  ${fileName} - could not extract logic`);
        }
    } else {
        console.log(`‚ö†Ô∏è  ${fileName} - no handleShowResult function found`);
    }
});

console.log(`\nüéâ Finalization completed!`);
console.log(`   üìÑ Files updated: ${updatedCount}`);
console.log(`   üìã Backups created with .backup2 extension`);