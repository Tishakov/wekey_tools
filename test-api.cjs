const http = require('http');

// –¢–µ—Å—Ç health endpoint
function testHealth() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...');
    
    const options = {
        hostname: '127.0.0.1',
        port: 3001,
        path: '/health',
        method: 'GET'
    };

    const req = http.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('–°—Ç–∞—Ç—É—Å:', res.statusCode);
            console.log('–û—Ç–≤–µ—Ç:', data);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/stats/increment
            testStatsIncrement();
        });
    });

    req.on('error', (err) => {
        console.log('‚ùå Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', err.message);
    });

    req.end();
}

// –¢–µ—Å—Ç POST /api/stats/increment
function testStatsIncrement() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/stats/increment...');
    
    const postData = JSON.stringify({
        toolName: 'password-generator',
        inputLength: 10,
        outputLength: 12,
        processingTime: 5
    });

    const options = {
        hostname: '127.0.0.1',
        port: 3001,
        path: '/api/stats/increment',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    const req = http.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('‚úÖ POST /api/stats/increment —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('–°—Ç–∞—Ç—É—Å:', res.statusCode);
            console.log('–û—Ç–≤–µ—Ç:', data);
        });
    });

    req.on('error', (err) => {
        console.log('‚ùå POST /api/stats/increment –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', err.message);
    });

    req.write(postData);
    req.end();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testHealth();