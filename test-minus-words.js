// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤"

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞
function testWordSplitting() {
    console.log('=== –¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞ ===');
    
    const testTexts = [
        '–ø—Ä–∏–≤–µ—Ç –º–∏—Ä —Ç–µ–∫—Å—Ç',
        '—Å–ª–æ–≤–æ1   —Å–ª–æ–≤–æ2\n—Å–ª–æ–≤–æ3\t—Å–ª–æ–≤–æ4',
        '–ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã –Ω–µ–¥–æ—Ä–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
        '–∫–æ—Ç–µ–Ω–æ–∫, —â–µ–Ω–æ–∫, —Ä—ã–±–∫–∞ –ø—Ç–∏—á–∫–∞'
    ];
    
    testTexts.forEach((text, index) => {
        console.log(`–¢–µ—Å—Ç ${index + 1}:`);
        console.log(`–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: "${text}"`);
        
        const words = text
            .split(/\s+/)
            .filter(word => word.trim().length > 0)
            .map(word => word.trim());
            
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: [${words.join(', ')}]`);
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${words.length}`);
        console.log('---');
    });
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞–º–∏
function testMinusWordsLogic() {
    console.log('=== –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤ ===');
    
    let minusWords = [];
    const words = ['–ø–æ–∫—É–ø–∫–∞', '–º–∞—à–∏–Ω—ã', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å'];
    
    console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:', words);
    console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞:', minusWords);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞
    words.forEach(word => {
        if (!minusWords.includes(word)) {
            minusWords.push(word);
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ: "${word}". –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞: [${minusWords.join(', ')}]`);
        }
    });
    
    // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ
    const wordToRemove = '–º–∞—à–∏–Ω—ã';
    minusWords = minusWords.filter(w => w !== wordToRemove);
    console.log(`–£–±—Ä–∞–Ω–æ: "${wordToRemove}". –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞: [${minusWords.join(', ')}]`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(minusWords.join('\n'));
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function testStatsService() {
    console.log('=== –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockStorage = {};
    const mockStatsService = {
        getLaunchCount: (toolName) => {
            const stats = mockStorage['wekey_tools_stats'] ? 
                JSON.parse(mockStorage['wekey_tools_stats']) : {};
            return stats[toolName]?.launchCount || 0;
        },
        incrementLaunchCount: (toolName) => {
            const stats = mockStorage['wekey_tools_stats'] ? 
                JSON.parse(mockStorage['wekey_tools_stats']) : {};
            if (!stats[toolName]) {
                stats[toolName] = { launchCount: 0 };
            }
            stats[toolName].launchCount++;
            mockStorage['wekey_tools_stats'] = JSON.stringify(stats);
        }
    };
    
    console.log('–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫:', mockStatsService.getLaunchCount('obrabotka_minus_slov'));
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–æ–≤
    for (let i = 1; i <= 3; i++) {
        mockStatsService.incrementLaunchCount('obrabotka_minus_slov');
        console.log(`–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ ${i}:`, mockStatsService.getLaunchCount('obrabotka_minus_slov'));
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤"');
testWordSplitting();
testMinusWordsLogic();
testStatsService();
console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');