const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
const toolFiles = [
  'EmojiTool.tsx',
  'EmptyLinesRemovalTool.tsx',
  'FindReplaceTool.tsx',
  'MatchTypesTool.tsx',
  'MinusWordsTool.tsx',
  'NumberGeneratorTool.tsx',
  'RemoveLineBreaksTool.tsx',
  'SpacesToParagraphsTool.tsx',
  'TextByColumnsTool.tsx',
  'TextGeneratorTool.tsx',
  'TextOptimizerTool.tsx',
  'TextSortingTool.tsx',
  'TextToHtmlTool.tsx',
  'TransliterationTool.tsx',
  'UtmGeneratorTool.tsx',
  'WordGluingTool.tsx',
  'WordMixerTool.tsx'
];

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const modalWindowsCode = `
      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <AuthRequiredModal
        isOpen={isAuthRequiredModalOpen}
        onClose={closeAuthRequiredModal}
        onLoginClick={openAuthModal}
      />

      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={closeAuthModal}
        initialMode="login"
      />`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
function addModalWindows(fileName) {
  const filePath = path.join('frontend/src/pages', fileName);
  
  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileName}`);
    return false;
  }
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π div –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  // –ü–∞—Ç—Ç–µ—Ä–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–π </div> –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º );
  const pattern = /(\s+<\/div>\s*<\/div>\s*)\s*(\)\s*;\s*)\s*$/;
  
  if (pattern.test(content)) {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    content = content.replace(pattern, `$1${modalWindowsCode}
    </div>
$2`);
    
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ${fileName}`);
    return true;
  } else {
    console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ ${fileName}`);
    return false;
  }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...\n');

let successCount = 0;
let failCount = 0;

toolFiles.forEach(fileName => {
  if (addModalWindows(fileName)) {
    successCount++;
  } else {
    failCount++;
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤`);
console.log(`‚ùå –û—à–∏–±–æ–∫: ${failCount} —Ñ–∞–π–ª–æ–≤`);

if (failCount > 0) {
  console.log('\nüîß –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
}