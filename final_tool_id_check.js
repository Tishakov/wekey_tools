#!/usr/bin/env node

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Å–µ—Ö TOOL_ID —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

const fs = require('fs');
const path = require('path');

function checkAllToolIds() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TOOL_ID\n');
  
  // ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–∑ init-tools-table.js)
  const dbIds = [
    'synonym-generator', 'password-generator', 'text-generator', 'number-generator',
    'utm-generator', 'add-symbol', 'case-changer', 'char-counter', 'find-replace',
    'minus-words', 'text-optimizer', 'duplicate-finder', 'spaces-to-paragraphs',
    'cross-analytics', 'word-gluing', 'word-mixer', 'remove-line-breaks',
    'word-declension', 'text-sorting', 'text-to-html', 'transliteration',
    'remove-duplicates', 'remove-empty-lines', 'text-by-columns', 'emoji', 'match-types'
  ];
  
  console.log(`üìã ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${dbIds.length}):`, dbIds.sort().join(', '));
  console.log();
  
  // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const toolsDir = './frontend/src/pages';
  const files = fs.readdirSync(toolsDir)
    .filter(file => file.endsWith('Tool.tsx'))
    .map(file => path.join(toolsDir, file));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n`);
  
  const foundIds = [];
  const problems = [];
  
  files.forEach(filePath => {
    const fileName = path.basename(filePath);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º TOOL_ID
    const match = content.match(/const TOOL_ID = '([^']+)';/);
    
    if (match) {
      const toolId = match[1];
      foundIds.push(toolId);
      
      if (dbIds.includes(toolId)) {
        console.log(`‚úÖ ${fileName}: '${toolId}' - OK`);
      } else {
        console.log(`‚ùå ${fileName}: '${toolId}' - –ù–ï –ù–ê–ô–î–ï–ù –í –ë–î!`);
        problems.push({ file: fileName, id: toolId });
      }
    } else {
      console.log(`‚ö†Ô∏è ${fileName}: TOOL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      problems.push({ file: fileName, id: '–ù–ï –ù–ê–ô–î–ï–ù' });
    }
  });
  
  console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  console.log(`   - –ù–∞–π–¥–µ–Ω–æ ID: ${foundIds.length}`);
  console.log(`   - –ü—Ä–æ–±–ª–µ–º—ã: ${problems.length}`);
  
  if (problems.length > 0) {
    console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–´:`);
    problems.forEach(p => console.log(`   - ${p.file}: ${p.id}`));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–æ–¥–µ ID
  const missingInCode = dbIds.filter(id => !foundIds.includes(id));
  if (missingInCode.length > 0) {
    console.log(`\n‚ö†Ô∏è ID –ò–ó –ë–î, –ù–û –ù–ï–¢ –í –ö–û–î–ï (${missingInCode.length}):`);
    missingInCode.forEach(id => console.log(`   - ${id}`));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –≤ –∫–æ–¥–µ ID
  const extraInCode = foundIds.filter(id => !dbIds.includes(id));
  if (extraInCode.length > 0) {
    console.log(`\n‚ö†Ô∏è ID –í –ö–û–î–ï, –ù–û –ù–ï–¢ –í –ë–î (${extraInCode.length}):`);
    extraInCode.forEach(id => console.log(`   - ${id}`));
  }
  
  if (problems.length === 0 && missingInCode.length === 0 && extraInCode.length === 0) {
    console.log(`\nüéâ –í–°–ï PERFECT! –í—Å–µ TOOL_ID —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!`);
  }
}

if (require.main === module) {
  checkAllToolIds();
}