import { apiService, ApiError } from '../services/apiService';
import analyticsService from '../services/analyticsService';

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
interface ToolStats {
  [toolName: string]: {
    launchCount: number;
  };
}

class StatsService {
  private static readonly STORAGE_KEY = 'wekey_tools_stats';
  private isOnline: boolean = true;

  constructor() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.checkApiAvailability();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   */
  private async checkApiAvailability(): Promise<void> {
    try {
      this.isOnline = await apiService.healthCheck();
    } catch {
      this.isOnline = false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage (fallback)
   */
  private getLocalStats(): ToolStats {
    try {
      const data = localStorage.getItem(StatsService.STORAGE_KEY);
      return data ? JSON.parse(data) : {};
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {};
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage (fallback)
   */
  private saveLocalStats(stats: ToolStats): void {
    try {
      localStorage.setItem(StatsService.STORAGE_KEY, JSON.stringify(stats));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   */
  async getLaunchCount(toolName: string): Promise<number> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (this.isOnline) {
      try {
        console.log(`üîç [STATS] Getting launch count for: ${toolName}`);
        const response = await apiService.getToolStats(toolName);
        
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ data.totalUsage
        if (response.success && response.data && typeof response.data.totalUsage === 'number') {
          console.log(`üìä [STATS] Server count for ${toolName}: ${response.data.totalUsage}`);
          return response.data.totalUsage;
        }
        
        console.warn('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:', response);
        return 0;
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        this.isOnline = false;
      }
    }

    // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    console.log(`üíæ [STATS] Using local count for: ${toolName}`);
    const localStats = this.getLocalStats();
    return localStats[toolName]?.launchCount || 0;
  }

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ 1 –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async incrementAndGetCount(toolName: string, metadata?: {
    inputLength?: number;
    outputLength?: number;
    processingTime?: number;
  }): Promise<number> {
    console.log('üìä [STATS] Incrementing and getting count for:', toolName);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    analyticsService.trackToolUsage(toolName);
    
    const startTime = Date.now();

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
    this.incrementLocalCount(toolName);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    if (this.isOnline) {
      try {
        const processingTime = metadata?.processingTime || (Date.now() - startTime);
        
        console.log('üåê [STATS] Calling API to increment usage...');
        const response = await apiService.incrementToolUsage(toolName, {
          inputLength: metadata?.inputLength,
          outputLength: metadata?.outputLength,
          processingTime,
          language: this.getUserLanguage()
        });
        
        console.log('‚úÖ [STATS] API call successful');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º totalUsage –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        if (response.data && typeof response.data.totalUsage === 'number') {
          console.log(`üéØ [STATS] Returning server count: ${response.data.totalUsage}`);
          return response.data.totalUsage;
        }
        
        // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç totalUsage, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
        return await this.getLaunchCount(toolName);
        
      } catch (error) {
        console.error('‚ùå [STATS] Error sending stats to server:', error);
        if (error instanceof ApiError) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
          if (error.isUnauthorized() || error.isNetworkError()) {
            console.log('üîÑ [STATS] Switching to offline mode');
            this.isOnline = false;
          }
        }
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        return this.getLocalStats()[toolName]?.launchCount || 1;
      }
    } else {
      console.log('üì¥ [STATS] Offline mode - returning local count');
      return this.getLocalStats()[toolName]?.launchCount || 1;
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ 1
   */
  async incrementLaunchCount(toolName: string, metadata?: {
    inputLength?: number;
    outputLength?: number;
    processingTime?: number;
  }): Promise<void> {
    console.log('üìä [STATS] Incrementing launch count for:', toolName);
    const startTime = Date.now();

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
    this.incrementLocalCount(toolName);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (this.isOnline) {
      try {
        const processingTime = metadata?.processingTime || (Date.now() - startTime);
        
        console.log('üåê [STATS] Calling API to increment usage...');
        await apiService.incrementToolUsage(toolName, {
          inputLength: metadata?.inputLength,
          outputLength: metadata?.outputLength,
          processingTime,
          language: this.getUserLanguage()
        });
        console.log('‚úÖ [STATS] API call successful');
      } catch (error) {
        console.error('‚ùå [STATS] Error sending stats to server:', error);
        if (error instanceof ApiError) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
          if (error.isUnauthorized() || error.isNetworkError()) {
            console.log('üîÑ [STATS] Switching to offline mode');
            this.isOnline = false;
          }
        }
      }
    } else {
      console.log('üì¥ [STATS] Offline mode - only local stats updated');
    }
  }

  /**
   * –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
   */
  private incrementLocalCount(toolName: string): void {
    const stats = this.getLocalStats();
    
    if (!stats[toolName]) {
      stats[toolName] = { launchCount: 0 };
    }
    
    stats[toolName].launchCount++;
    this.saveLocalStats(stats);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getUserLanguage(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const savedLanguage = localStorage.getItem('userLanguage');
    if (savedLanguage && ['ru', 'ua', 'en'].includes(savedLanguage)) {
      return savedLanguage;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±—Ä–∞—É–∑–µ—Ä—É
    const browserLanguage = navigator.language.toLowerCase();
    if (browserLanguage.startsWith('ru')) return 'ru';
    if (browserLanguage.startsWith('uk')) return 'ua';
    return 'en';
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)
   */
  resetLaunchCount(toolName: string): void {
    const stats = this.getLocalStats();
    
    if (stats[toolName]) {
      stats[toolName].launchCount = 0;
      this.saveLocalStats(stats);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ backup)
   */
  getAllLocalStats(): ToolStats {
    return this.getLocalStats();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getUserStats(): Promise<any> {
    if (!this.isOnline) {
      return {
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ',
        isOffline: true
      };
    }

    try {
      const response = await apiService.getUserStats();
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getOverviewStats(): Promise<any> {
    if (!this.isOnline) {
      return {
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ',
        isOffline: true
      };
    }

    try {
      const response = await apiService.getOverviewStats();
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
   */
  isApiOnline(): boolean {
    return this.isOnline;
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
   */
  async reconnect(): Promise<boolean> {
    this.isOnline = await apiService.healthCheck();
    return this.isOnline;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async syncWithServer(): Promise<void> {
    if (!this.isOnline) {
      console.warn('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ñ–ª–∞–π–Ω
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const statsService = new StatsService();