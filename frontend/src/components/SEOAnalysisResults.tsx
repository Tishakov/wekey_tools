import React, { useEffect } from 'react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  Area,
  AreaChart
} from 'recharts';
import './SEOAnalysisResults.css';

interface Query {
  query: string;
  clicks: number;
  impressions: number;
  ctr: number;
  position: number;
}

interface Page {
  page: string;
  clicks: number;
  impressions: number;
  ctr: number;
  position: number;
}

interface Device {
  device: string;
  clicks: number;
  impressions: number;
  ctr: number;
  position: number;
}

interface Recommendation {
  priority: 'high' | 'medium' | 'low';
  category: string;
  title: string;
  description: string;
  impact: string;
  actionSteps: string[];
}

interface DeviceMetrics {
  mobile: {
    clicks: number;
    impressions: number;
    ctr: number;
  };
  desktop: {
    clicks: number;
    impressions: number;
    ctr: number;
  };
  tablet: {
    clicks: number;
    impressions: number;
    ctr: number;
  };
}

interface Changes {
  clicksChange: number;
  impressionsChange: number;
  ctrChange: number;
  positionChange: number;
}

interface AdvancedMetrics {
  top10Positions: number;
  featuredSnippets: number;
  estimatedBacklinks: number;
}

interface AnalysisData {
  url: string;
  period?: {
    startDate: string;
    endDate: string;
  };
  periodDays?: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–Ω—è—Ö
  gscData: {
    searchPerformance?: {
      totalClicks: number;
      totalImpressions: number;
      averageCTR: number;
      averagePosition: number;
      changes?: Changes;
      deviceMetrics?: DeviceMetrics;
      uniqueQueries?: number;
      advancedMetrics?: AdvancedMetrics;
      queries: Query[];
      pages: Page[];
      devices?: Device[];
    };
    indexCoverage?: {
      validPages: number;
      errorPages: number;
      excludedPages: number;
      warnings: number;
      status?: string;
    };
  };
  overallScore: number;
  healthStatus: string;
  recommendations: Recommendation[];
}

interface SEOAnalysisResultsProps {
  data: AnalysisData;
  selectedPeriod?: 7 | 14 | 28 | 90;
  onPeriodChange?: (period: 7 | 14 | 28 | 90) => void;
}

const SEOAnalysisResults: React.FC<SEOAnalysisResultsProps> = ({ 
  data, 
  selectedPeriod = 28, 
  onPeriodChange 
}) => {
  const { gscData, overallScore, healthStatus, recommendations } = data;
  const { searchPerformance, indexCoverage } = gscData;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (–æ–±—ä—è–≤–ª—è–µ–º —Ä–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ useEffect)
  const formatNumber = (num: number) => {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const isDataMatching = !data.periodDays || data.periodDays === selectedPeriod;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('üîÑ SEOAnalysisResults: –ü—Ä–æ–ø—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å', {
      selectedPeriod,
      dataPeriod: data.periodDays,
      isMatching: isDataMatching,
      totalClicks: searchPerformance?.totalClicks,
      totalImpressions: searchPerformance?.totalImpressions,
      averageCTR: searchPerformance?.averageCTR,
      dataTimestamp: data.url
    });
    
    if (!isDataMatching) {
      console.warn(`‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${data.periodDays} –¥–Ω–µ–π, –∞ –ø–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω ${selectedPeriod} –¥–Ω–µ–π!`);
    }
    
    console.log(`üé® –†–µ–Ω–¥–µ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${selectedPeriod}:`, {
      totalClicks: searchPerformance?.totalClicks,
      totalImpressions: searchPerformance?.totalImpressions,
      averageCTR: searchPerformance?.averageCTR,
      formatNumberClicks: searchPerformance?.totalClicks ? formatNumber(searchPerformance.totalClicks) : 'N/A'
    });
  }, [data, selectedPeriod, searchPerformance?.totalClicks, searchPerformance?.totalImpressions, isDataMatching]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (!searchPerformance) {
    return (
      <div className="seo-analysis-results">
        <div className="error-state">
          <h3>‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
  if (!isDataMatching) {
    return (
      <div className="seo-analysis-results">
        <div className="seopro-loading-state">
          <div className="seopro-loading-spinner large"></div>
          <h3>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {selectedPeriod} –¥–Ω–µ–π</h3>
          <p>–û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...</p>
        </div>
      </div>
    );
  }

  // –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const COLORS = {
    primary: '#4285f4',
    secondary: '#34a853',
    warning: '#fbbc05',
    danger: '#ea4335',
    info: '#9c27b0'
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const deviceData = searchPerformance.devices?.map(device => ({
    name: device.device === 'MOBILE' ? '–ú–æ–±–∏–ª—å–Ω—ã–µ' : 
          device.device === 'DESKTOP' ? '–î–µ—Å–∫—Ç–æ–ø' : '–ü–ª–∞–Ω—à–µ—Ç—ã',
    clicks: device.clicks,
    impressions: device.impressions,
    ctr: device.ctr
  })) || [];

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  const indexData = indexCoverage ? [
    { name: '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã', value: indexCoverage.validPages, color: COLORS.secondary },
    { name: '–û—à–∏–±–∫–∏', value: indexCoverage.errorPages, color: COLORS.danger },
    { name: '–ò—Å–∫–ª—é—á–µ–Ω—ã', value: indexCoverage.excludedPages, color: COLORS.warning },
    { name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', value: indexCoverage.warnings, color: COLORS.info }
  ] : [];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ health score
  const getHealthScoreColor = (score: number) => {
    if (score >= 80) return COLORS.secondary;
    if (score >= 60) return COLORS.primary;
    if (score >= 40) return COLORS.warning;
    return COLORS.danger;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö —Å–∫–æ—Ä–æ–≤
  const getTrafficScore = (performance: any) => {
    const clicks = performance.totalClicks || 0;
    const impressions = performance.totalImpressions || 0;
    const ctr = performance.averageCTR || 0;
    
    // –°–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞—Ñ–∏–∫–∞ (0-100)
    let score = 0;
    if (clicks > 10000) score += 40;
    else if (clicks > 5000) score += 30;
    else if (clicks > 1000) score += 20;
    else if (clicks > 100) score += 10;
    
    if (impressions > 100000) score += 30;
    else if (impressions > 50000) score += 20;
    else if (impressions > 10000) score += 15;
    else if (impressions > 1000) score += 10;
    
    if (ctr > 5) score += 30;
    else if (ctr > 3) score += 20;
    else if (ctr > 1) score += 10;
    
    return Math.min(100, score);
  };

  const getPositionScore = (performance: any) => {
    const avgPosition = performance.averagePosition || 100;
    const top10 = performance.advancedMetrics?.top10Positions || 0;
    const totalQueries = performance.uniqueQueries || 1;
    
    // –°–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π (0-100)
    let score = 0;
    if (avgPosition <= 3) score += 40;
    else if (avgPosition <= 5) score += 30;
    else if (avgPosition <= 10) score += 20;
    else if (avgPosition <= 20) score += 10;
    
    const top10Ratio = top10 / totalQueries;
    if (top10Ratio > 0.5) score += 60;
    else if (top10Ratio > 0.3) score += 40;
    else if (top10Ratio > 0.1) score += 20;
    else if (top10Ratio > 0.05) score += 10;
    
    return Math.min(100, score);
  };

  const getTechnicalScore = (coverage: any) => {
    if (!coverage) return 0;
    
    const validPages = coverage.validPages || 0;
    const errorPages = coverage.errorPages || 0;
    const totalPages = validPages + errorPages;
    
    if (totalPages === 0) return 0;
    
    // –°–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (0-100)
    const healthRatio = validPages / totalPages;
    let score = healthRatio * 80;
    
    if (validPages > 1000) score += 20;
    else if (validPages > 500) score += 15;
    else if (validPages > 100) score += 10;
    else if (validPages > 10) score += 5;
    
    return Math.min(100, Math.round(score));
  };

  const getProScore = (performance: any) => {
    const featuredSnippets = performance.advancedMetrics?.featuredSnippets || 0;
    const backlinks = performance.advancedMetrics?.estimatedBacklinks || 0;
    
    // –°–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ PRO –º–µ—Ç—Ä–∏–∫ (0-100)
    let score = 0;
    
    if (featuredSnippets > 20) score += 50;
    else if (featuredSnippets > 10) score += 35;
    else if (featuredSnippets > 5) score += 25;
    else if (featuredSnippets > 0) score += 15;
    
    if (backlinks > 1000) score += 50;
    else if (backlinks > 500) score += 35;
    else if (backlinks > 100) score += 25;
    else if (backlinks > 10) score += 15;
    
    return Math.min(100, score);
  };

  const getComponentScoreColor = (score: number) => {
    if (score >= 75) return '#10B981'; // –ó–µ–ª–µ–Ω—ã–π
    if (score >= 50) return '#F59E0B'; // –ñ–µ–ª—Ç—ã–π
    return '#EF4444'; // –ö—Ä–∞—Å–Ω—ã–π
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const handlePeriodChange = (period: 7 | 14 | 28 | 90) => {
    console.log(`üìÖ SEOAnalysisResults: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Å ${selectedPeriod} –Ω–∞ ${period}`);
    console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, {
      totalClicks: searchPerformance?.totalClicks,
      totalImpressions: searchPerformance?.totalImpressions,
      averageCTR: searchPerformance?.averageCTR
    });
    
    if (onPeriodChange) {
      onPeriodChange(period);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getPeriodText = (days: number) => {
    switch (days) {
      case 7: return '–ù–µ–¥–µ–ª—è';
      case 14: return '2 –Ω–µ–¥–µ–ª–∏';
      case 28: return '–ú–µ—Å—è—Ü';
      case 90: return '3 –º–µ—Å—è—Ü–∞';
      default: return '–ú–µ—Å—è—Ü';
    }
  };

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üîç SEOAnalysisResults render:`, {
    selectedPeriod,
    totalClicks: searchPerformance.totalClicks,
    totalImpressions: searchPerformance.totalImpressions,
    dataTimestamp: new Date().toISOString()
  });

  return (
    <div className="seo-analysis-results">
      {/* –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ */}
      <div className="seopro-metrics-dashboard">
        {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ */}
        <div className="seopro-period-selector">
          <div className="seopro-period-label">üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:</div>
          <div className="seopro-period-buttons">
            {[7, 14, 28, 90].map((days) => (
              <button
                key={days}
                className={`seopro-period-btn ${selectedPeriod === days ? 'active' : ''}`}
                onClick={() => handlePeriodChange(days as 7 | 14 | 28 | 90)}
              >
                {getPeriodText(days)}
              </button>
            ))}
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ */}
        <div className="seopro-metric-card primary-metric">
          <div className="seopro-metric-icon">üëÜ</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.totalClicks)}</div>
          <div className="seopro-metric-label">–ö–ª–∏–∫–∏</div>
          {searchPerformance.changes?.clicksChange !== undefined && (
            <div className={`seopro-metric-change ${searchPerformance.changes.clicksChange >= 0 ? 'positive' : 'negative'}`}>
              {searchPerformance.changes.clicksChange >= 0 ? '‚Üó' : '‚Üò'} {Math.abs(searchPerformance.changes.clicksChange).toFixed(1)}%
            </div>
          )}
        </div>
        
        <div className="seopro-metric-card primary-metric">
          <div className="seopro-metric-icon">üëÅÔ∏è</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.totalImpressions)}</div>
          <div className="seopro-metric-label">–ü–æ–∫–∞–∑—ã</div>
          {searchPerformance.changes?.impressionsChange !== undefined && (
            <div className={`seopro-metric-change ${searchPerformance.changes.impressionsChange >= 0 ? 'positive' : 'negative'}`}>
              {searchPerformance.changes.impressionsChange >= 0 ? '‚Üó' : '‚Üò'} {Math.abs(searchPerformance.changes.impressionsChange).toFixed(1)}%
            </div>
          )}
        </div>
        
        <div className="seopro-metric-card primary-metric">
          <div className="seopro-metric-icon">üìä</div>
          <div className="seopro-metric-value">{searchPerformance.averageCTR.toFixed(1)}%</div>
          <div className="seopro-metric-label">–°—Ä–µ–¥–Ω–∏–π CTR</div>
          {searchPerformance.changes?.ctrChange !== undefined && (
            <div className={`seopro-metric-change ${searchPerformance.changes.ctrChange >= 0 ? 'positive' : 'negative'}`}>
              {searchPerformance.changes.ctrChange >= 0 ? '‚Üó' : '‚Üò'} {Math.abs(searchPerformance.changes.ctrChange).toFixed(1)}%
            </div>
          )}
        </div>
        
        <div className="seopro-metric-card primary-metric">
          <div className="seopro-metric-icon">üéØ</div>
          <div className="seopro-metric-value">{searchPerformance.averagePosition.toFixed(1)}</div>
          <div className="seopro-metric-label">–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è</div>
          {searchPerformance.changes?.positionChange !== undefined && (
            <div className={`seopro-metric-change ${searchPerformance.changes.positionChange <= 0 ? 'positive' : 'negative'}`}>
              {searchPerformance.changes.positionChange <= 0 ? '‚Üó' : '‚Üò'} {Math.abs(searchPerformance.changes.positionChange).toFixed(1)}%
            </div>
          )}
        </div>

        {/* –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º */}
        <div className="seopro-metric-card device-metric">
          <div className="seopro-metric-icon">üì±</div>
          <div className="seopro-metric-value">
            {searchPerformance.deviceMetrics?.mobile?.ctr?.toFixed(1) || '0.0'}%
          </div>
          <div className="seopro-metric-label">Mobile CTR</div>
          <div className="seopro-metric-detail">
            {formatNumber(searchPerformance.deviceMetrics?.mobile?.clicks || 0)} –∫–ª–∏–∫–æ–≤
          </div>
        </div>

        <div className="seopro-metric-card device-metric">
          <div className="seopro-metric-icon">üñ•Ô∏è</div>
          <div className="seopro-metric-value">
            {searchPerformance.deviceMetrics?.desktop?.ctr?.toFixed(1) || '0.0'}%
          </div>
          <div className="seopro-metric-label">Desktop CTR</div>
          <div className="seopro-metric-detail">
            {formatNumber(searchPerformance.deviceMetrics?.desktop?.clicks || 0)} –∫–ª–∏–∫–æ–≤
          </div>
        </div>

        <div className="seopro-metric-card standard-metric">
          <div className="seopro-metric-icon">üîç</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.uniqueQueries || 0)}</div>
          <div className="seopro-metric-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>
          <div className="seopro-metric-detail">
            –ó–∞ 28 –¥–Ω–µ–π
          </div>
        </div>

        <div className="seopro-metric-card standard-metric">
          <div className="seopro-metric-icon">üìÑ</div>
          <div className="seopro-metric-value">{formatNumber(data.gscData?.indexCoverage?.validPages || 0)}</div>
          <div className="seopro-metric-label">–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä.</div>
          <div className="seopro-metric-detail">—Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
        </div>

        <div className="seopro-metric-card warning-metric">
          <div className="seopro-metric-icon">‚ö†Ô∏è</div>
          <div className="seopro-metric-value">{formatNumber(data.gscData?.indexCoverage?.errorPages || 0)}</div>
          <div className="seopro-metric-label">–°—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏</div>
          <div className="seopro-metric-detail">
            {data.gscData?.indexCoverage?.validPages && data.gscData.indexCoverage.validPages > 0 && 
             `${(((data.gscData.indexCoverage.errorPages || 0) / data.gscData.indexCoverage.validPages) * 100).toFixed(1)}%`
            }
          </div>
        </div>

        {/* –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="seopro-metric-card pro-metric">
          <div className="seopro-metric-icon">üèÜ</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.advancedMetrics?.top10Positions || 0)}</div>
          <div className="seopro-metric-label">TOP-10 –ø–æ–∑–∏—Ü–∏–π</div>
          <div className="seopro-metric-detail">
            –∏–∑ {formatNumber(searchPerformance.uniqueQueries || 0)} –∑–∞–ø—Ä–æ—Å–æ–≤
          </div>
        </div>

        <div className="seopro-metric-card pro-metric">
          <div className="seopro-metric-icon">üíé</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.advancedMetrics?.featuredSnippets || 0)}</div>
          <div className="seopro-metric-label">Featured Snippets</div>
          <div className="seopro-metric-detail">
            –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
          </div>
        </div>

        <div className="seopro-metric-card pro-metric">
          <div className="seopro-metric-icon">üîó</div>
          <div className="seopro-metric-value">{formatNumber(searchPerformance.advancedMetrics?.estimatedBacklinks || 0)}</div>
          <div className="seopro-metric-label">–í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏</div>
          <div className="seopro-metric-detail">
            –æ—Ü–µ–Ω–∫–∞ –¥–æ–º–µ–Ω–æ–≤
          </div>
        </div>
      </div>

      {/* Health Score Dashboard */}
      <div className="health-score-section">
        <h3>üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ SEO</h3>
        
        {/* –ì–ª–∞–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - –±–æ–ª—å—à–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ */}
        <div className="health-score-main">
          <div className="health-score-circle-main">
            <svg width="140" height="140">
              <circle cx="70" cy="70" r="55" fill="none" stroke="#374151" strokeWidth="10"></circle>
              <circle 
                cx="70" cy="70" r="55" 
                fill="none"
                stroke={getHealthScoreColor(overallScore)}
                strokeWidth="10"
                strokeLinecap="round"
                style={{
                  strokeDasharray: `${2 * Math.PI * 55}`,
                  strokeDashoffset: `${2 * Math.PI * 55 * (1 - overallScore / 100)}`,
                  transform: 'rotate(-90deg)',
                  transformOrigin: 'center'
                }}
              ></circle>
            </svg>
            <div className="health-score-text">
              <span className="health-score-number">{overallScore}</span>
              <span className="health-score-label">SEO Score</span>
            </div>
          </div>
          <div className="health-score-status">
            <h4>
              {healthStatus === 'excellent' && 'üü¢ –û—Ç–ª–∏—á–Ω–æ–µ SEO'}
              {healthStatus === 'good' && 'üü° –•–æ—Ä–æ—à–µ–µ SEO'}
              {healthStatus === 'average' && 'üü† –°—Ä–µ–¥–Ω–µ–µ SEO'}
              {healthStatus === 'poor' && 'üî¥ –°–ª–∞–±–æ–µ SEO'}
            </h4>
            <p>
              {healthStatus === 'excellent' && '–í–∞—à —Å–∞–π—Ç –æ—Ç–ª–∏—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º!'}
              {healthStatus === 'good' && '–•–æ—Ä–æ—à–∞—è SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.'}
              {healthStatus === 'average' && 'SEO —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.'}
              {healthStatus === 'poor' && 'SEO –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö!'}
            </p>
            <div className={`health-summary ${healthStatus}`}>
              <span className="health-summary-label">‚ö° –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
              <span className="health-summary-value">
                {healthStatus === 'excellent' && '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ'}
                {healthStatus === 'good' && '–•–æ—Ä–æ—à–æ'}
                {healthStatus === 'average' && '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'}
                {healthStatus === 'poor' && '–¢—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã'}
              </span>
            </div>
          </div>
        </div>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ - –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã */}
        <div className="health-components-section">
          <h4>üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º</h4>
          <div className="health-components-grid">
            
            {/* –¢—Ä–∞—Ñ–∏–∫ */}
            <div className="health-component-item">
              <div className="health-component-icon">üìà</div>
              <div className="health-component-info">
                <div className="health-component-name">–¢—Ä–∞—Ñ–∏–∫</div>
                <div className="health-component-description">–ö–ª–∏–∫–∏ –∏ –ø–æ–∫–∞–∑—ã</div>
              </div>
              <div className="health-component-value">
                <span className="health-component-number">{formatNumber(searchPerformance.totalClicks)}</span>
                <div className="health-component-score-circle">
                  <svg width="50" height="50">
                    <circle cx="25" cy="25" r="22" fill="none" stroke="#374151" strokeWidth="3"></circle>
                    <circle 
                      cx="25" cy="25" r="22" 
                      fill="none"
                      stroke={getComponentScoreColor(getTrafficScore(searchPerformance))}
                      strokeWidth="3"
                      strokeLinecap="round"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 22}`,
                        strokeDashoffset: `${2 * Math.PI * 22 * (1 - getTrafficScore(searchPerformance) / 100)}`,
                        transform: 'rotate(-90deg)',
                        transformOrigin: 'center'
                      }}
                    ></circle>
                  </svg>
                  <span className="health-component-score-text">{getTrafficScore(searchPerformance)}</span>
                </div>
              </div>
            </div>

            {/* –ü–æ–∑–∏—Ü–∏–∏ */}
            <div className="health-component-item">
              <div className="health-component-icon">üéØ</div>
              <div className="health-component-info">
                <div className="health-component-name">–ü–æ–∑–∏—Ü–∏–∏</div>
                <div className="health-component-description">–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
              </div>
              <div className="health-component-value">
                <span className="health-component-number">{searchPerformance.averagePosition.toFixed(1)}</span>
                <div className="health-component-score-circle">
                  <svg width="50" height="50">
                    <circle cx="25" cy="25" r="22" fill="none" stroke="#374151" strokeWidth="3"></circle>
                    <circle 
                      cx="25" cy="25" r="22" 
                      fill="none"
                      stroke={getComponentScoreColor(getPositionScore(searchPerformance))}
                      strokeWidth="3"
                      strokeLinecap="round"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 22}`,
                        strokeDashoffset: `${2 * Math.PI * 22 * (1 - getPositionScore(searchPerformance) / 100)}`,
                        transform: 'rotate(-90deg)',
                        transformOrigin: 'center'
                      }}
                    ></circle>
                  </svg>
                  <span className="health-component-score-text">{getPositionScore(searchPerformance)}</span>
                </div>
              </div>
            </div>

            {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ */}
            <div className="health-component-item">
              <div className="health-component-icon">‚öôÔ∏è</div>
              <div className="health-component-info">
                <div className="health-component-name">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ</div>
                <div className="health-component-description">–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è</div>
              </div>
              <div className="health-component-value">
                <span className="health-component-number">{formatNumber(indexCoverage?.validPages || 0)}</span>
                <div className="health-component-score-circle">
                  <svg width="50" height="50">
                    <circle cx="25" cy="25" r="22" fill="none" stroke="#374151" strokeWidth="3"></circle>
                    <circle 
                      cx="25" cy="25" r="22" 
                      fill="none"
                      stroke={getComponentScoreColor(getTechnicalScore(indexCoverage))}
                      strokeWidth="3"
                      strokeLinecap="round"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 22}`,
                        strokeDashoffset: `${2 * Math.PI * 22 * (1 - getTechnicalScore(indexCoverage) / 100)}`,
                        transform: 'rotate(-90deg)',
                        transformOrigin: 'center'
                      }}
                    ></circle>
                  </svg>
                  <span className="health-component-score-text">{getTechnicalScore(indexCoverage)}</span>
                </div>
              </div>
            </div>

            {/* PRO –º–µ—Ç—Ä–∏–∫–∏ */}
            <div className="health-component-item">
              <div className="health-component-icon">üíé</div>
              <div className="health-component-info">
                <div className="health-component-name">PRO –º–µ—Ç—Ä–∏–∫–∏</div>
                <div className="health-component-description">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ</div>
              </div>
              <div className="health-component-value">
                <span className="health-component-number">{formatNumber(searchPerformance.advancedMetrics?.top10Positions || 0)}</span>
                <div className="health-component-score-circle">
                  <svg width="50" height="50">
                    <circle cx="25" cy="25" r="22" fill="none" stroke="#374151" strokeWidth="3"></circle>
                    <circle 
                      cx="25" cy="25" r="22" 
                      fill="none"
                      stroke={getComponentScoreColor(getProScore(searchPerformance))}
                      strokeWidth="3"
                      strokeLinecap="round"
                      style={{
                        strokeDasharray: `${2 * Math.PI * 22}`,
                        strokeDashoffset: `${2 * Math.PI * 22 * (1 - getProScore(searchPerformance) / 100)}`,
                        transform: 'rotate(-90deg)',
                        transformOrigin: 'center'
                      }}
                    ></circle>
                  </svg>
                  <span className="health-component-score-text">{getProScore(searchPerformance)}</span>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      {/* –¢–æ–ø –∑–∞–ø—Ä–æ—Å—ã */}
      <div className="analysis-section">
        <h3>üìà –¢–æ–ø –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
        <div className="queries-chart">
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={searchPerformance.queries.slice(0, 10)}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="query" 
                angle={-45}
                textAnchor="end"
                height={80}
                fontSize={12}
              />
              <YAxis />
              <Tooltip 
                formatter={(value, name) => [
                  name === 'clicks' ? `${value} –∫–ª–∏–∫–æ–≤` : 
                  name === 'impressions' ? `${value} –ø–æ–∫–∞–∑–æ–≤` :
                  name === 'ctr' ? `${value}% CTR` :
                  `${value} –ø–æ–∑–∏—Ü–∏—è`, 
                  name === 'clicks' ? '–ö–ª–∏–∫–∏' : 
                  name === 'impressions' ? '–ü–æ–∫–∞–∑—ã' :
                  name === 'ctr' ? 'CTR' : '–ü–æ–∑–∏—Ü–∏—è'
                ]}
              />
              <Bar dataKey="clicks" name="clicks" fill={COLORS.primary} />
              <Bar dataKey="impressions" name="impressions" fill={COLORS.secondary} opacity={0.7} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º */}
      {deviceData.length > 0 && (
        <div className="analysis-section">
          <h3>üì± –¢—Ä–∞—Ñ–∏–∫ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</h3>
          <div className="devices-charts">
            <div className="device-pie-chart">
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie
                    data={deviceData}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    dataKey="clicks"
                    label={({name, percent}) => `${name}: ${((percent as number) * 100).toFixed(0)}%`}
                  >
                    {deviceData.map((_entry, index) => (
                      <Cell key={`cell-${index}`} fill={Object.values(COLORS)[index]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
            
            <div className="device-metrics">
              {deviceData.map((device, index) => (
                <div key={device.name} className="device-metric">
                  <div 
                    className="device-color" 
                    style={{ backgroundColor: Object.values(COLORS)[index] }}
                  ></div>
                  <div className="device-info">
                    <div className="device-name">{device.name}</div>
                    <div className="device-stats">
                      {device.clicks} –∫–ª–∏–∫–æ–≤ ‚Ä¢ CTR {device.ctr.toFixed(1)}%
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* –¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="analysis-section">
        <h3>üìÑ –¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É</h3>
        <div className="pages-table">
          <div className="table-header">
            <div className="table-cell">–°—Ç—Ä–∞–Ω–∏—Ü–∞</div>
            <div className="table-cell">–ö–ª–∏–∫–∏</div>
            <div className="table-cell">–ü–æ–∫–∞–∑—ã</div>
            <div className="table-cell">CTR</div>
            <div className="table-cell">–ü–æ–∑–∏—Ü–∏—è</div>
          </div>
          {searchPerformance.pages.slice(0, 10).map((page, index) => (
            <div key={index} className="table-row">
              <div className="table-cell page-url" title={page.page}>
                {page.page.replace(/^https?:\/\//, '').substring(0, 40)}...
              </div>
              <div className="table-cell">{page.clicks}</div>
              <div className="table-cell">{formatNumber(page.impressions)}</div>
              <div className="table-cell">{page.ctr.toFixed(1)}%</div>
              <div className="table-cell">{page.position.toFixed(1)}</div>
            </div>
          ))}
        </div>
      </div>

      {/* –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã) */}
      {indexCoverage && (
        <div className="analysis-section">
          <h3>üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏</h3>
          <div className="index-coverage">
            <div className="index-pie">
              <ResponsiveContainer width="100%" height={200}>
                <PieChart>
                  <Pie
                    data={indexData}
                    cx="50%"
                    cy="50%"
                    outerRadius={70}
                    dataKey="value"
                    label={({name, value}) => `${name}: ${value}`}
                  >
                    {indexData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
            <div className="index-summary">
              <div className="index-stat">
                <span className="index-value">{indexCoverage.validPages}</span>
                <span className="index-label">–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</span>
              </div>
              {indexCoverage.errorPages > 0 && (
                <div className="index-stat error">
                  <span className="index-value">{indexCoverage.errorPages}</span>
                  <span className="index-label">–û—à–∏–±–æ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏</span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ */}
      <div className="analysis-section">
        <h3>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        <div className="recommendations-grid">
          {recommendations.map((rec, index) => (
            <div key={index} className={`recommendation-card priority-${rec.priority}`}>
              <div className="recommendation-header">
                <div className="recommendation-priority">
                  <span className={`priority-badge ${rec.priority}`}>
                    {rec.priority === 'high' && 'üî• –í—ã—Å–æ–∫–∏–π'}
                    {rec.priority === 'medium' && '‚ö° –°—Ä–µ–¥–Ω–∏–π'}
                    {rec.priority === 'low' && 'üí° –ù–∏–∑–∫–∏–π'}
                  </span>
                  <span className="recommendation-category">{rec.category}</span>
                </div>
              </div>
              
              <h4 className="recommendation-title">{rec.title}</h4>
              <p className="recommendation-description">{rec.description}</p>
              
              <div className="recommendation-impact">
                <strong>–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> {rec.impact}
              </div>
              
              <div className="recommendation-steps">
                <strong>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</strong>
                <ol>
                  {rec.actionSteps.map((step, stepIndex) => (
                    <li key={stepIndex}>{step}</li>
                  ))}
                </ol>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default SEOAnalysisResults;