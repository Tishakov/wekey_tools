import React, { useState, useEffect } from 'react';
import './CoinTransactionsRight.css';

interface CoinTransaction {
  id: number;
  type: string;
  amount: number;
  description: string;
  balanceAfter: number;
  createdAt: string;
}

interface TransactionsData {
  transactions: CoinTransaction[];
  currentBalance: number;
  pagination: {
    total: number;
    page: number;
    pages: number;
    limit: number;
  };
}

const CoinTransactionsRight: React.FC = () => {
  const [data, setData] = useState<TransactionsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({
    type: '',
    dateFrom: '',
    dateTo: ''
  });

  const fetchTransactions = async (page: number = 1) => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: page.toString(),
        limit: '10'
      });

      if (filters.type) params.append('type', filters.type);
      if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) params.append('dateTo', filters.dateTo);

      const response = await fetch(`/api/user/coin-transactions?${params}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('wekey_token')}`
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      }

      const result = await response.json();
      setData(result.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTransactions(currentPage);
  }, [currentPage, filters]);

  const getOperationIcon = (type: string) => {
    switch (type) {
      case 'registration': return 'üéâ';
      case 'admin_add': return 'üí∞';
      case 'admin_subtract': return 'üìâ';
      case 'tool_usage': return 'üîß';
      case 'bonus': return 'üéÅ';
      default: return 'üí∞';
    }
  };

  const getOperationTitle = (type: string) => {
    switch (type) {
      case 'registration': return '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
      case 'admin_add': return '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
      case 'admin_subtract': return '–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
      case 'tool_usage': return '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞';
      case 'bonus': return '–ë–æ–Ω—É—Å';
      default: return '–û–ø–µ—Ä–∞—Ü–∏—è';
    }
  };

  const formatOperationReason = (reason: string, type: string) => {
    // –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (type === 'tool_usage' && reason.startsWith('Tool usage: ')) {
      const toolName = reason.replace('Tool usage: ', '');
      const toolNameRu = getToolNameInRussian(toolName);
      return `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${toolNameRu}`;
    }
    return reason;
  };

  const getToolNameInRussian = (toolName: string) => {
    const toolNames: { [key: string]: string } = {
      'transliteration': '–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è',
      'utm-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-–º–µ—Ç–æ–∫',
      'char-counter': '–°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤',
      'text-optimizer': '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞',
      'duplicate-finder': '–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
      'duplicate-removal': '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
      'text-to-html': '–¢–µ–∫—Å—Ç –≤ HTML',
      'synonym-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤',
      'word-declension': '–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤',
      'password-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π',
      'text-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞',
      'number-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª',
      'add-symbol': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤',
      'case-changer': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
      'word-mixer': '–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤',
      'find-replace': '–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å',
      'minus-words': '–ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞',
      'spaces-to-paragraphs': '–ü—Ä–æ–±–µ–ª—ã –≤ –∞–±–∑–∞—Ü—ã',
      'text-sorting': '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞',
      'remove-empty-lines': '–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫',
      'emoji': '–≠–º–æ–¥–∑–∏',
      'cross-analytics': '–ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      'word-gluing': '–°–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤',
      'remove-line-breaks': '–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫',
      'text-by-columns': '–¢–µ–∫—Å—Ç –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º',
      'match-types': '–¢–∏–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π',
      'site-audit': '–ê—É–¥–∏—Ç —Å–∞–π—Ç–∞',
      'seo-audit': 'SEO –∞—É–¥–∏—Ç',
      'seo-audit-pro': 'SEO –∞—É–¥–∏—Ç Pro',
      'privacy-policy-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
      'qr-generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤'
    };
    
    return toolNames[toolName] || toolName;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const formatAmount = (amount: number) => {
    return amount > 0 ? `+${amount}` : amount.toString();
  };

  return (
    <div className="coin-transactions-right">
      {/* transactions-filters */}
      <div className="transactions-filters">
        <div className="filter-row">
          <div className="filter-top-row">
            <select
              value={filters.type}
              onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}
              className="filter-select"
            >
              <option value="">–í—Å–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π</option>
              <option value="registration">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</option>
              <option value="admin_add">–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º</option>
              <option value="admin_subtract">–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º</option>
              <option value="tool_usage">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</option>
              <option value="bonus">–ë–æ–Ω—É—Å—ã</option>
            </select>
          </div>

          <div className="filter-bottom-row">
            <input
              type="date"
              value={filters.dateFrom}
              onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
              className="filter-date"
              placeholder="–û—Ç –¥–∞—Ç—ã"
            />

            <input
              type="date"
              value={filters.dateTo}
              onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}
              className="filter-date"
              placeholder="–î–æ –¥–∞—Ç—ã"
            />

            <button
              onClick={() => setFilters({ type: '', dateFrom: '', dateTo: '' })}
              className="filter-clear"
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>
      </div>

      {/* transactions-list */}
      <div className="transactions-list">
        {loading ? (
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...</div>
        ) : !data || data.transactions.length === 0 ? (
          <div className="no-transactions">
            <div className="no-transactions-icon">üí∞</div>
            <h3>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–∏–Ω–∞–º–∏</p>
          </div>
        ) : (
          <div className="transaction-items">
            {data.transactions.map((transaction) => (
              <div key={transaction.id} className="transaction-item">
                <div className="transaction-icon">
                  {getOperationIcon(transaction.type)}
                </div>
                
                <div className="transaction-details">
                  <div className="transaction-title">
                    {getOperationTitle(transaction.type)}
                  </div>
                  <div className="transaction-reason">
                    {formatOperationReason(transaction.description, transaction.type)}
                  </div>
                  <div className="transaction-date">
                    {formatDate(transaction.createdAt)}
                  </div>
                </div>
                
                <div className="transaction-amount">
                  <div className={`amount ${transaction.amount > 0 ? 'positive' : 'negative'}`}>
                    {formatAmount(transaction.amount)}
                    <img src="/icons/coin_rocket_v1.svg" alt="–ö–æ–∏–Ω" className="amount-coin-icon" />
                  </div>
                  <div className="balance-after">
                    –ë–∞–ª–∞–Ω—Å: {transaction.balanceAfter}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* transactions-pagination */}
      {data && data.pagination.pages > 1 && (
        <div className="transactions-pagination">
          <button
            onClick={() => setCurrentPage(1)}
            disabled={currentPage === 1}
            className="pagination-btn"
          >
            ¬´¬´
          </button>
          <button
            onClick={() => setCurrentPage(currentPage - 1)}
            disabled={currentPage === 1}
            className="pagination-btn"
          >
            ¬´
          </button>
          
          <span className="pagination-info">
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {data.pagination.pages}
          </span>
          
          <button
            onClick={() => setCurrentPage(currentPage + 1)}
            disabled={currentPage === data.pagination.pages}
            className="pagination-btn"
          >
            ¬ª
          </button>
          <button
            onClick={() => setCurrentPage(data.pagination.pages)}
            disabled={currentPage === data.pagination.pages}
            className="pagination-btn"
          >
            ¬ª¬ª
          </button>
        </div>
      )}
    </div>
  );
};

export default CoinTransactionsRight;