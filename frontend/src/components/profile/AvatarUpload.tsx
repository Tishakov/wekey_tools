import React, { useState, useRef, useCallback } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { apiService } from '../../services/apiService';
import './AvatarUpload.css';

interface AvatarUploadProps {
  onAvatarUpdate?: (avatarUrl: string | null) => void;
  className?: string;
}

const AvatarUpload: React.FC<AvatarUploadProps> = ({ onAvatarUpdate, className }) => {
  const { user, updateUser } = useAuth();
  const [isUploading, setIsUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [preview, setPreview] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞
  const getAvatarUrl = (avatarPath: string | null) => {
    if (!avatarPath) return null;
    if (avatarPath.startsWith('http')) return avatarPath;
    return `http://localhost:8880${avatarPath}`;
  };

  const currentAvatarUrl = getAvatarUrl(user?.avatar || null);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
  const validateFile = (file: File): string | null => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (!allowedTypes.includes(file.type)) {
      return '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WebP)';
    }

    if (file.size > maxSize) {
      return '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB';
    }

    return null;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const createPreview = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      setPreview(e.target?.result as string);
      setSelectedFile(file);
    };
    reader.readAsDataURL(file);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  const uploadAvatar = async (file: File) => {
    setIsUploading(true);
    
    try {
      const formData = new FormData();
      formData.append('avatar', file);

      const response = await apiService.uploadAvatar(formData);
      
      if (response.success) {
        console.log('‚úÖ Avatar upload successful:', response.data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (updateUser && response.data.user) {
          console.log('üîÑ Updating user context with:', response.data.user);
          updateUser(response.data.user);
        } else {
          console.warn('‚ö†Ô∏è No user data returned or updateUser not available');
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          if (updateUser && user) {
            updateUser({ ...user, avatar: response.data.avatar });
          }
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (onAvatarUpdate) {
          onAvatarUpdate(response.data.avatar);
        }

        setPreview(null);
        setSelectedFile(null);
        alert('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      }
    } catch (error: any) {
      console.error('Upload error:', error);
      alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞');
      setPreview(null);
      setSelectedFile(null);
    } finally {
      setIsUploading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
  const deleteAvatar = async () => {
    if (!user?.avatar) return;
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä?')) return;

    setIsUploading(true);
    
    try {
      const response = await apiService.deleteAvatar();
      
      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (updateUser && response.data.user) {
          updateUser(response.data.user);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (onAvatarUpdate) {
          onAvatarUpdate(null);
        }

        alert('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      }
    } catch (error: any) {
      console.error('Delete error:', error);
      alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞');
    } finally {
      setIsUploading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = useCallback((file: File) => {
    const error = validateFile(file);
    if (error) {
      alert(error);
      return;
    }

    createPreview(file);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ input
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const handleUpload = () => {
    if (selectedFile) {
      uploadAvatar(selectedFile);
    }
  };

  // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–≤—å—é
  const handleCancelPreview = () => {
    setPreview(null);
    setSelectedFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className={`avatar-upload ${className || ''}`}>
      <div className="avatar-upload__container">
        {/* –¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä */}
        <div className="avatar-upload__current">
          {currentAvatarUrl ? (
            <img 
              src={currentAvatarUrl} 
              alt="Current avatar" 
              className="avatar-upload__current-image"
            />
          ) : (
            <div className="avatar-upload__placeholder">
              <span className="avatar-upload__placeholder-icon">üë§</span>
            </div>
          )}
          
          {user?.avatar && (
            <button 
              onClick={deleteAvatar}
              disabled={isUploading}
              className="avatar-upload__delete-btn"
              title="–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"
            >
              ‚úï
            </button>
          )}
        </div>

        {/* –ü—Ä–µ–≤—å—é –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        {preview && (
          <div className="avatar-upload__preview">
            <img 
              src={preview} 
              alt="Preview" 
              className="avatar-upload__preview-image"
            />
            <div className="avatar-upload__preview-actions">
              <button 
                onClick={handleUpload}
                disabled={isUploading}
                className="avatar-upload__btn avatar-upload__btn--primary"
              >
                {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
              <button 
                onClick={handleCancelPreview}
                disabled={isUploading}
                className="avatar-upload__btn avatar-upload__btn--secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        )}

        {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–≤—å—é */}
        {!preview && (
          <div 
            className={`avatar-upload__dropzone ${dragActive ? 'avatar-upload__dropzone--active' : ''}`}
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            onClick={() => fileInputRef.current?.click()}
          >
            <span className="avatar-upload__dropzone-icon">üìÅ</span>
            <span className="avatar-upload__dropzone-text">
              {user?.avatar ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ' : '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'}
            </span>
          </div>
        )}

        <input
          ref={fileInputRef}
          type="file"
          accept="image/jpeg,image/jpg,image/png,image/gif,image/webp"
          onChange={handleInputChange}
          className="avatar-upload__input"
          style={{ display: 'none' }}
        />
      </div>

      {isUploading && (
        <div className="avatar-upload__loading">
          <div className="avatar-upload__spinner"></div>
        </div>
      )}
    </div>
  );
};

export default AvatarUpload;