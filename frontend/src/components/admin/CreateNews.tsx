import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNews } from '../../hooks/useNewslettersAndNews';
import './CreateNews.css';

const CreateNews: React.FC = () => {
  const navigate = useNavigate();
  const { createNews } = useNews();
  
  const [formData, setFormData] = useState({
    title: '',
    summary: '',
    content: '',
    tags: '',
    imageUrl: '',
    priority: 'normal',
    isPublished: false,
    publishedAt: '',
    sendNotification: false,
    notificationText: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showPreview, setShowPreview] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const newsData = {
        ...formData,
        tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
        publishedAt: formData.isPublished ? (formData.publishedAt || new Date().toISOString()) : null,
        authorId: 1 // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      };

      await createNews(newsData);
      navigate('/admin/news');
    } catch (error) {
      console.error('Error creating news:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSaveDraft = async () => {
    setIsSubmitting(true);
    
    try {
      const newsData = {
        ...formData,
        tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
        isPublished: false,
        authorId: 1
      };

      await createNews(newsData);
      navigate('/admin/news');
    } catch (error) {
      console.error('Error saving draft:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="create-news-container">
      {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="create-header">
        <div className="breadcrumbs">
          <button 
            className="breadcrumb-link"
            onClick={() => navigate('/admin/news')}
          >
            üì∞ –ù–æ–≤–æ—Å—Ç–∏
          </button>
          <span className="breadcrumb-separator">‚Üí</span>
          <span className="breadcrumb-current">–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</span>
        </div>
        
        <div className="header-actions">
          <button 
            className="preview-btn"
            onClick={() => setShowPreview(!showPreview)}
            type="button"
          >
            üëÅÔ∏è {showPreview ? '–°–∫—Ä—ã—Ç—å' : '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä'}
          </button>
        </div>
      </div>

      <div className="create-content">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
        <div className={`form-container ${showPreview ? 'with-preview' : ''}`}>
          <form onSubmit={handleSubmit} className="news-form">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="form-section">
              <h2>üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ *</label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    placeholder="–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏"
                    required
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="summary">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                  <textarea
                    id="summary"
                    name="summary"
                    value={formData.summary}
                    onChange={handleInputChange}
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–≤—å—é..."
                    rows={3}
                  />
                  <div className="form-hint">
                    üí° –≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π
                  </div>
                </div>
              </div>
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
            <div className="form-section">
              <h2>üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</h2>
              
              <div className="form-group">
                <label htmlFor="content">–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ *</label>
                <textarea
                  id="content"
                  name="content"
                  value={formData.content}
                  onChange={handleInputChange}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–π –Ω–æ–≤–æ—Å—Ç–∏..."
                  rows={15}
                  required
                />
                <div className="form-hint">
                  üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –∏ Markdown
                </div>
              </div>
            </div>

            {/* –ú–µ–¥–∏–∞ –∏ —Ç–µ–≥–∏ */}
            <div className="form-section">
              <h2>üñºÔ∏è –ú–µ–¥–∏–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
              
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="imageUrl">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)</label>
                  <input
                    type="url"
                    id="imageUrl"
                    name="imageUrl"
                    value={formData.imageUrl}
                    onChange={handleInputChange}
                    placeholder="https://example.com/image.jpg"
                  />
                  <div className="form-hint">
                    üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x630px –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  </div>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="tags">–¢–µ–≥–∏</label>
                  <input
                    type="text"
                    id="tags"
                    name="tags"
                    value={formData.tags}
                    onChange={handleInputChange}
                    placeholder="SEO, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
                  />
                  <div className="form-hint">
                    üí° –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Ç–µ–≥–∏ –∑–∞–ø—è—Ç—ã–º–∏
                  </div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                  <select
                    id="priority"
                    name="priority"
                    value={formData.priority}
                    onChange={handleInputChange}
                  >
                    <option value="low">üîµ –ù–∏–∑–∫–∏–π</option>
                    <option value="normal">‚ö™ –û–±—ã—á–Ω—ã–π</option>
                    <option value="high">üü° –í—ã—Å–æ–∫–∏–π</option>
                    <option value="urgent">üî¥ –°—Ä–æ—á–Ω—ã–π</option>
                  </select>
                </div>
              </div>
            </div>

            {/* –ü—É–±–ª–∏–∫–∞—Ü–∏—è */}
            <div className="form-section">
              <h2>üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h2>
              
              <div className="form-row">
                <div className="form-group checkbox-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      name="isPublished"
                      checked={formData.isPublished}
                      onChange={handleInputChange}
                    />
                    <span className="checkmark">üì¢</span>
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å—Ä–∞–∑—É
                  </label>
                </div>
              </div>

              {formData.isPublished && (
                <div className="form-row">
                  <div className="form-group">
                    <label htmlFor="publishedAt">–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</label>
                    <input
                      type="datetime-local"
                      id="publishedAt"
                      name="publishedAt"
                      value={formData.publishedAt}
                      onChange={handleInputChange}
                      min={new Date().toISOString().slice(0, 16)}
                    />
                    <div className="form-hint">
                      üí° –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            <div className="form-section">
              <h2>üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
              
              <div className="form-row">
                <div className="form-group checkbox-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      name="sendNotification"
                      checked={formData.sendNotification}
                      onChange={handleInputChange}
                    />
                    <span className="checkmark">üîî</span>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                  </label>
                </div>
              </div>

              {formData.sendNotification && (
                <div className="form-row">
                  <div className="form-group">
                    <label htmlFor="notificationText">–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                    <textarea
                      id="notificationText"
                      name="notificationText"
                      value={formData.notificationText}
                      onChange={handleInputChange}
                      placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è..."
                      rows={2}
                    />
                    <div className="form-hint">
                      üí° –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="form-actions">
              <button 
                type="button"
                className="cancel-btn"
                onClick={() => navigate('/admin/news')}
                disabled={isSubmitting}
              >
                ‚Üê –û—Ç–º–µ–Ω–∞
              </button>
              
              <div className="action-buttons">
                <button 
                  type="button"
                  className="draft-btn"
                  onClick={handleSaveDraft}
                  disabled={isSubmitting || !formData.title}
                >
                  {isSubmitting ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫'}
                </button>
                
                <button 
                  type="submit"
                  className="create-btn"
                  disabled={isSubmitting || !formData.title || !formData.content}
                >
                  {isSubmitting ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : formData.isPublished ? 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' : '‚úÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'}
                </button>
              </div>
            </div>
          </form>
        </div>

        {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
        {showPreview && (
          <div className="preview-container">
            <div className="preview-header">
              <h3>üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
            </div>
            
            <div className="news-preview">
              {formData.imageUrl && (
                <div className="news-image">
                  <img src={formData.imageUrl} alt="Preview" />
                </div>
              )}
              
              <div className="news-header">
                <div className="news-meta">
                  <span className={`priority-badge priority-${formData.priority}`}>
                    {formData.priority === 'low' && 'üîµ'}
                    {formData.priority === 'normal' && '‚ö™'}
                    {formData.priority === 'high' && 'üü°'}
                    {formData.priority === 'urgent' && 'üî¥'}
                    {formData.priority}
                  </span>
                  <span className="publish-status">
                    {formData.isPublished ? 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}
                  </span>
                </div>
                
                <h1 className="news-title">{formData.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏'}</h1>
                
                {formData.summary && (
                  <p className="news-summary">{formData.summary}</p>
                )}
                
                {formData.tags && (
                  <div className="news-tags">
                    {formData.tags.split(',').map((tag, index) => (
                      <span key={index} className="tag">#{tag.trim()}</span>
                    ))}
                  </div>
                )}
              </div>
              
              <div className="news-content">
                <div dangerouslySetInnerHTML={{ 
                  __html: formData.content || '<p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>' 
                }} />
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CreateNews;