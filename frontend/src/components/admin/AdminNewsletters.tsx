import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNewsletters } from '../../hooks/useNewslettersAndNews';
import './AdminNewsletters.css';

const AdminNewsletters: React.FC = () => {
  const navigate = useNavigate();
  const { 
    newsletters, 
    loading, 
    fetchNewsletters
  } = useNewsletters();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchNewsletters();
  }, []); // –£–±–∏—Ä–∞–µ–º fetchNewsletters –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
  const filteredNewsletters = newsletters.filter((newsletter: any) => {
    const matchesSearch = newsletter.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         newsletter.subject.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || newsletter.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', class: 'status-draft' },
      scheduled: { text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', class: 'status-scheduled' },
      sending: { text: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è', class: 'status-sending' },
      sent: { text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', class: 'status-sent' },
      failed: { text: '–û—à–∏–±–∫–∞', class: 'status-failed' }
    };
    
    const config = statusConfig[status as keyof typeof statusConfig] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${config.class}`}>{config.text}</span>;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="admin-newsletters-container">
      <div className="admin-newsletters-header">
        <div className="admin-section-title">
          <h1>üìß –†–∞—Å—Å—ã–ª–∫–∏</h1>
          <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ email-—Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
        </div>
        <button 
          className="create-newsletter-btn"
          onClick={() => navigate('/admin/newsletters/create')}
        >
          üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="newsletters-filters">
        <div className="search-box">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–º–µ..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <div className="status-filter">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="status-select"
          >
            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</option>
            <option value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
            <option value="sending">–û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è</option>
            <option value="sent">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ</option>
            <option value="failed">–° –æ—à–∏–±–∫–∞–º–∏</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ */}
      <div className="newsletters-content">
        {loading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫...</p>
          </div>
        ) : filteredNewsletters.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì™</div>
            <h3>–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {searchTerm || statusFilter !== 'all' 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
              }
            </p>
            {!searchTerm && statusFilter === 'all' && (
              <button 
                className="create-first-newsletter-btn"
                onClick={() => navigate('/admin/newsletters/create')}
              >
                üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
              </button>
            )}
          </div>
        ) : (
          <div className="newsletters-list">
            {filteredNewsletters.map((newsletter: any) => (
              <div key={newsletter.id} className="newsletter-card">
                <div className="newsletter-header">
                  <div className="newsletter-title">
                    <h3>{newsletter.title}</h3>
                    <p className="newsletter-subject">{newsletter.subject}</p>
                  </div>
                  <div className="newsletter-status">
                    {getStatusBadge(newsletter.status)}
                  </div>
                </div>

                <div className="newsletter-content-preview">
                  <p>{newsletter.content.substring(0, 150)}...</p>
                </div>

                <div className="newsletter-stats">
                  <div className="stat-item">
                    <span className="stat-label">–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</span>
                    <span className="stat-value">{newsletter.totalRecipients}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</span>
                    <span className="stat-value">{newsletter.sentCount}</span>
                  </div>
                  {newsletter.failedCount > 0 && (
                    <div className="stat-item error">
                      <span className="stat-label">–û—à–∏–±–∫–∏:</span>
                      <span className="stat-value">{newsletter.failedCount}</span>
                    </div>
                  )}
                </div>

                <div className="newsletter-meta">
                  <div className="newsletter-dates">
                    <span>–°–æ–∑–¥–∞–Ω–æ: {formatDate(newsletter.createdAt)}</span>
                    {newsletter.sentAt && (
                      <span>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {formatDate(newsletter.sentAt)}</span>
                    )}
                  </div>
                  <div className="newsletter-actions">
                    <button className="action-btn view-btn" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                      üëÅÔ∏è
                    </button>
                    <button 
                      className="action-btn edit-btn" 
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      onClick={() => navigate(`/admin/newsletters/edit/${newsletter.id}`)}
                    >
                      ‚úèÔ∏è
                    </button>
                    <button className="action-btn duplicate-btn" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                      üìã
                    </button>
                    <button className="action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminNewsletters;