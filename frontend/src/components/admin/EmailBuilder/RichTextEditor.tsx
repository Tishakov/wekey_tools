import React, { useState, useRef, useEffect } from 'react';
import VariableInserter from '../newsletters/VariableInserter';
import './RichTextEditor.css';

interface RichTextEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

const RichTextEditor: React.FC<RichTextEditorProps> = ({
  value,
  onChange,
  placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...'
}) => {
  const editorRef = useRef<HTMLDivElement>(null);
  const [activeFormats, setActiveFormats] = useState({
    bold: false,
    italic: false,
    underline: false
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞
  const handleContentChange = () => {
    if (editorRef.current) {
      const content = editorRef.current.innerHTML;
      onChange(content);
    }
  };


  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  const createLink = () => {
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL:');
    if (url) {
      document.execCommand('createLink', false, url);
      handleContentChange();
      editorRef.current?.focus();
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
  const changeTextColor = () => {
    const color = prompt('–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, #ff0000 –∏–ª–∏ red):');
    if (color) {
      document.execCommand('foreColor', false, color);
      handleContentChange();
      editorRef.current?.focus();
    }
  };

  // –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  const handleInsertVariable = (variableKey: string) => {
    const variableText = `{{${variableKey}}}`;
    
    if (editorRef.current) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      const selection = window.getSelection();
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        if (editorRef.current.contains(range.commonAncestorContainer)) {
          // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
          const textNode = document.createTextNode(variableText);
          
          // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
          range.deleteContents();
          range.insertNode(textNode);
          
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
          range.setStartAfter(textNode);
          range.setEndAfter(textNode);
          selection.removeAllRanges();
          selection.addRange(range);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          handleContentChange();
          
          // –§–æ–∫—É—Å–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
          editorRef.current.focus();
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        const textNode = document.createTextNode(variableText);
        editorRef.current.appendChild(textNode);
        handleContentChange();
        editorRef.current.focus();
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.ctrlKey || e.metaKey) {
      switch (e.key) {
        case 'b':
          e.preventDefault();
          document.execCommand('bold');
          handleContentChange();
          break;
        case 'i':
          e.preventDefault();
          document.execCommand('italic');
          handleContentChange();
          break;
        case 'u':
          e.preventDefault();
          document.execCommand('underline');
          handleContentChange();
          break;
        case 'k':
          e.preventDefault();
          createLink();
          break;
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
  const updateActiveFormats = () => {
    setActiveFormats({
      bold: document.queryCommandState('bold'),
      italic: document.queryCommandState('italic'),
      underline: document.queryCommandState('underline')
    });
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (editorRef.current && editorRef.current.innerHTML !== value) {
      editorRef.current.innerHTML = value;
    }
  }, [value]);

  return (
    <div className="rich-text-editor">
      {/* –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="rich-text-main-toolbar">
        <VariableInserter 
          onInsert={handleInsertVariable}
          buttonText="–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
          buttonIcon="{{}}"
        />
        
        <div className="toolbar-separator"></div>
        
        {/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */}
        <button
          type="button"
          className={`rich-text-btn ${activeFormats.bold ? 'active' : ''}`}
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('bold');
            handleContentChange();
            updateActiveFormats();
            editorRef.current?.focus();
          }}
          title="–ñ–∏—Ä–Ω—ã–π (Ctrl+B)"
        >
          <strong>B</strong>
        </button>
        <button
          type="button" 
          className={`rich-text-btn ${activeFormats.italic ? 'active' : ''}`}
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('italic');
            handleContentChange();
            updateActiveFormats();
            editorRef.current?.focus();
          }}
          title="–ö—É—Ä—Å–∏–≤ (Ctrl+I)"
        >
          <em>I</em>
        </button>
        <button
          type="button"
          className={`rich-text-btn ${activeFormats.underline ? 'active' : ''}`}
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('underline');
            handleContentChange();
            updateActiveFormats();
            editorRef.current?.focus();
          }}
          title="–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (Ctrl+U)"
        >
          <u>U</u>
        </button>
        
        <div className="toolbar-separator"></div>
        
        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
        <button
          type="button"
          className="rich-text-btn"
          onMouseDown={(e) => e.preventDefault()}
          onClick={createLink}
          title="–°—Å—ã–ª–∫–∞ (Ctrl+K)"
        >
          üîó
        </button>
        <button
          type="button"
          className="rich-text-btn"
          onMouseDown={(e) => e.preventDefault()}
          onClick={changeTextColor}
          title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        >
          üé®
        </button>
        
        <div className="toolbar-separator"></div>
        
        {/* –°–ø–∏—Å–∫–∏ */}
        <button
          type="button"
          className="rich-text-btn"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('insertUnorderedList');
            handleContentChange();
            editorRef.current?.focus();
          }}
          title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          ‚Ä¢ 
        </button>
        <button
          type="button"
          className="rich-text-btn"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('insertOrderedList');
            handleContentChange();
            editorRef.current?.focus();
          }}
          title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          1.
        </button>
        
        <div className="toolbar-separator"></div>
        
        {/* –û—á–∏—Å—Ç–∫–∞ */}
        <button
          type="button"
          className="rich-text-btn"
          onMouseDown={(e) => e.preventDefault()}
          onClick={() => {
            document.execCommand('removeFormat');
            handleContentChange();
            editorRef.current?.focus();
          }}
          title="–£–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        >
          ‚úÇÔ∏è
        </button>
      </div>
      
      <div
        ref={editorRef}
        className="rich-text-content"
        contentEditable
        suppressContentEditableWarning={true}
        onInput={handleContentChange}
        onBlur={handleContentChange}
        onKeyDown={handleKeyDown}
        onKeyUp={updateActiveFormats}
        onMouseUp={updateActiveFormats}
        data-placeholder={placeholder}
      />
    </div>
  );
};

export default RichTextEditor;