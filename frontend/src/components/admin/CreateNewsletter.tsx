import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNewsletters } from '../../hooks/useNewslettersAndNews';
import './CreateNewsletter.css';

const CreateNewsletter: React.FC = () => {
  const navigate = useNavigate();
  const { createNewsletter } = useNewsletters();
  const contentTextareaRef = useRef<HTMLTextAreaElement>(null);
  
  const [formData, setFormData] = useState({
    title: '',
    subject: '',
    content: '',
    targetAudience: 'all',
    segmentCriteria: {},
    scheduledAt: '',
    sendImmediately: false
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  // –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const insertFormatting = (tag: string, hasClosingTag: boolean = true) => {
    const textarea = contentTextareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = formData.content.substring(start, end);
    
    let newText: string;
    let closingTag: string;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
    if (tag.startsWith('a href')) {
      newText = `<a href="">${selectedText}</a>`;
    } else if (hasClosingTag) {
      closingTag = tag.split(' ')[0]; // –î–ª—è —Å–ª—É—á–∞–µ–≤ –≤—Ä–æ–¥–µ "a href" –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ "a"
      newText = `<${tag}>${selectedText}</${closingTag}>`;
    } else {
      newText = `<${tag}>`;
    }
    
    const newContent = 
      formData.content.substring(0, start) + 
      newText + 
      formData.content.substring(end);
    
    setFormData({ ...formData, content: newContent });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    setTimeout(() => {
      textarea.focus();
      const newPosition = start + newText.length;
      textarea.setSelectionRange(newPosition, newPosition);
    }, 0);
  };

  const insertText = (text: string) => {
    const textarea = contentTextareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    
    const newContent = 
      formData.content.substring(0, start) + 
      text + 
      formData.content.substring(end);
    
    setFormData({ ...formData, content: newContent });
    
    setTimeout(() => {
      textarea.focus();
      const newPosition = start + text.length;
      textarea.setSelectionRange(newPosition, newPosition);
    }, 0);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      await createNewsletter({
        ...formData,
        status: 'draft',
        createdBy: 1 // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      });
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
      navigate('/admin/newsletters');
    } catch (error) {
      console.error('Error creating newsletter:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSaveDraft = async () => {
    setIsSubmitting(true);
    
    try {
      await createNewsletter({
        ...formData,
        status: 'draft',
        createdBy: 1
      });
      
      navigate('/admin/newsletters');
    } catch (error) {
      console.error('Error saving draft:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="create-newsletter-container">
      {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="create-header">
        <div className="breadcrumbs">
          <button 
            className="breadcrumb-link"
            onClick={() => navigate('/admin/newsletters')}
          >
            üìß –†–∞—Å—Å—ã–ª–∫–∏
          </button>
          <span className="breadcrumb-separator">‚Üí</span>
          <span className="breadcrumb-current">–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</span>
        </div>
        

      </div>

      <div className="create-content">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
        <form onSubmit={handleSubmit} className="newsletter-form with-preview">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="newsletter-form-section">
              <div className="newsletter-form-row">
                <div className="newsletter-form-group">
                  <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ *</label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                    required
                  />
                </div>
              </div>

              <div className="newsletter-form-row">
                <div className="newsletter-form-group">
                  <label htmlFor="subject">–¢–µ–º–∞ –ø–∏—Å—å–º–∞ *</label>
                  <input
                    type="text"
                    id="subject"
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    placeholder="–¢–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥—è—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–∏"
                    required
                  />
                  <div className="newsletter-form-hint">
                    üí° –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º-—Å–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
                  </div>
                </div>
              </div>
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
            <div className="newsletter-form-section">
              <div className="newsletter-form-group">
                <label htmlFor="content">–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ *</label>
                
                {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <div className="formatting-toolbar">
                  <div className="toolbar-group">
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('b')}
                      title="–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"
                    >
                      <strong>B</strong>
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('i')}
                      title="–ö—É—Ä—Å–∏–≤"
                    >
                      <em>I</em>
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('u')}
                      title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π"
                    >
                      <u>U</u>
                    </button>
                  </div>
                  
                  <div className="toolbar-separator"></div>
                  
                  <div className="toolbar-group">
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('h1')}
                      title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1"
                    >
                      H1
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('h2')}
                      title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2"
                    >
                      H2
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('p')}
                      title="–ê–±–∑–∞—Ü"
                    >
                      P
                    </button>
                  </div>
                  
                  <div className="toolbar-separator"></div>
                  
                  <div className="toolbar-group">
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertText('<br>')}
                      title="–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏"
                    >
                      ‚Üµ
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertText('<hr>')}
                      title="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è"
                    >
                      ‚Äï
                    </button>
                  </div>
                  
                  <div className="toolbar-separator"></div>
                  
                  <div className="toolbar-group">
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertFormatting('a href=""')}
                      title="–°—Å—ã–ª–∫–∞"
                    >
                      üîó
                    </button>
                    <button
                      type="button"
                      className="toolbar-btn"
                      onClick={() => insertText('<img src="" alt="">')}
                      title="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    >
                      üñºÔ∏è
                    </button>
                  </div>
                </div>
                
                <textarea
                  ref={contentTextareaRef}
                  id="content"
                  name="content"
                  value={formData.content}
                  onChange={handleInputChange}
                  placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏..."
                  rows={12}
                  required
                />
                <div className="newsletter-form-hint">
                  üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                </div>
              </div>
            </div>

            {/* –ê—É–¥–∏—Ç–æ—Ä–∏—è */}
            <div className="newsletter-form-section">
              <div className="newsletter-form-row">
                <div className="newsletter-form-group">
                  <label htmlFor="targetAudience">–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</label>
                  <select
                    id="targetAudience"
                    name="targetAudience"
                    value={formData.targetAudience}
                    onChange={handleInputChange}
                  >
                    <option value="all">üåê –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                    <option value="active">‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                    <option value="premium">‚≠ê Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                    <option value="recent">üÜï –ù–µ–¥–∞–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                    <option value="inactive">üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                  </select>
                </div>
              </div>
            </div>

            {/* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
            <div className="newsletter-form-section">
              <h2>üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</h2>
              
              <div className="newsletter-form-row">
                <div className="newsletter-form-group newsletter-checkbox-group">
                  <label className="newsletter-checkbox-label">
                    <input
                      type="checkbox"
                      name="sendImmediately"
                      checked={formData.sendImmediately}
                      onChange={handleInputChange}
                    />
                    <span className="checkmark">‚ö°</span>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                  </label>
                </div>
              </div>

              {!formData.sendImmediately && (
                <div className="newsletter-form-row">
                  <div className="newsletter-form-group">
                    <label htmlFor="scheduledAt">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É</label>
                    <input
                      type="datetime-local"
                      id="scheduledAt"
                      name="scheduledAt"
                      value={formData.scheduledAt}
                      onChange={handleInputChange}
                      min={new Date().toISOString().slice(0, 16)}
                    />
                    <div className="newsletter-form-hint">
                      üí° –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä—É—á–Ω—É—é
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="form-actions">
              <div>
                <button 
                  type="button"
                  className="cancel-btn"
                  onClick={() => navigate('/admin/newsletters')}
                  disabled={isSubmitting}
                >
                  ‚Üê –û—Ç–º–µ–Ω–∞
                </button>
                
                <div className="action-buttons">
                  <button 
                    type="button"
                    className="draft-btn"
                    onClick={handleSaveDraft}
                    disabled={isSubmitting || !formData.title}
                  >
                    {isSubmitting ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫'}
                  </button>
                  
                  <button 
                    type="submit"
                    className="create-btn"
                    disabled={isSubmitting || !formData.title || !formData.subject || !formData.content}
                  >
                    {isSubmitting ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : formData.sendImmediately ? 'üöÄ –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' : '‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'}
                  </button>
                </div>
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è */}
              <div className="form-progress">
                <div className="progress-label">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã:</div>
                <div className="progress-bar">
                  <div 
                    className="progress-fill" 
                    style={{ 
                      width: `${Math.round(
                        ((formData.title ? 1 : 0) + 
                         (formData.subject ? 1 : 0) + 
                         (formData.content ? 1 : 0)) / 3 * 100
                      )}%` 
                    }}
                  ></div>
                </div>
                <div className="progress-text">
                  {Math.round(
                    ((formData.title ? 1 : 0) + 
                     (formData.subject ? 1 : 0) + 
                     (formData.content ? 1 : 0)) / 3 * 100
                  )}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                </div>
              </div>
            </div>
          </form>

        {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
        <div className="newsletter-preview-container">
          <div className="newsletter-preview-header">
            <h3>üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
          </div>
            
            <div className="newsletter-email-preview">
              <div className="newsletter-email-header">
                <div className="newsletter-email-subject">{formData.subject || '–¢–µ–º–∞ –ø–∏—Å—å–º–∞'}</div>
                <div className="newsletter-email-from">–û—Ç: WeKey Tools</div>
              </div>
              
              <div className="newsletter-email-body">
                <div dangerouslySetInnerHTML={{ 
                  __html: formData.content || '<p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>' 
                }} />
              </div>
            </div>
        </div>
      </div>
    </div>
  );
};

export default CreateNewsletter;