import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './NewslettersList.css';

interface Newsletter {
  id: number;
  title: string;
  subject: string;
  status: 'draft' | 'scheduled' | 'sent' | 'sending' | 'failed' | 'active';
  type?: string;
  isSystem?: boolean;
  targetAudience: string;
  createdAt: string;
  scheduledAt?: string;
  sentAt?: string;
  stats?: {
    sent: number;
    opened: number;
    clicked: number;
  };
}

interface NewslettersListProps {
  newsletters: Newsletter[];
  onDelete: (id: number) => void;
  onDuplicate: (id: number) => void;
  onRefresh: () => void;
}

export const NewslettersList: React.FC<NewslettersListProps> = ({
  newsletters,
  onDelete,
  onDuplicate,
  onRefresh,
}) => {
  const navigate = useNavigate();
  const [deleteModalId, setDeleteModalId] = useState<number | null>(null);
  const [previewId, setPreviewId] = useState<number | null>(null);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft':
        return '#fbbf24';
      case 'scheduled':
        return '#3b82f6';
      case 'sent':
        return '#10b981';
      case 'sending':
        return '#8b5cf6';
      case 'failed':
        return '#ef4444';
      case 'active':
        return '#10b981';
      default:
        return '#6b7280';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'draft':
        return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'scheduled':
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      case 'sent':
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
      case 'sending':
        return '–û—Ç–ø—Ä–∞–≤–∫–∞...';
      case 'failed':
        return '–û—à–∏–±–∫–∞';
      case 'active':
        return '–ê–∫—Ç–∏–≤–Ω–æ';
      default:
        return status;
    }
  };

  const getSystemEmailLabel = (type?: string) => {
    switch (type) {
      case 'system_welcome':
        return '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ';
      case 'system_password_reset':
        return '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è';
      case 'system_verification':
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Email';
      case 'system_balance_refill':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞';
      default:
        return '–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–∏—Å—å–º–æ';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleEdit = (id: number) => {
    navigate(`/admin/newsletters/edit/${id}`);
  };

  const handleDelete = (id: number) => {
    onDelete(id);
    setDeleteModalId(null);
  };

  const handleDuplicate = (id: number) => {
    onDuplicate(id);
  };

  const handlePreview = (id: number) => {
    setPreviewId(id);
  };

  if (newsletters.length === 0) {
    return (
      <div className="newsletters-empty">
        <div className="empty-icon">üìß</div>
        <h3>–ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫</h3>
        <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</p>
        <button
          className="btn-primary"
          onClick={() => navigate('/admin/newsletters/create')}
        >
          –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        </button>
      </div>
    );
  }

  return (
    <div className="newsletters-list">
      <div className="newsletters-grid">
        {newsletters.map((newsletter) => (
          <div key={newsletter.id} className="newsletter-card">
            {/* –°–∏—Å—Ç–µ–º–Ω—ã–π badge */}
            {newsletter.isSystem && (
              <div className="system-badge">
                <span className="badge-icon">‚öôÔ∏è</span>
                <span className="badge-text">–°–∏—Å—Ç–µ–º–Ω–æ–µ</span>
              </div>
            )}
            
            {/* –°—Ç–∞—Ç—É—Å badge */}
            <div className="newsletter-status">
              <span
                className="status-badge"
                style={{ backgroundColor: getStatusColor(newsletter.status) }}
              >
                {getStatusText(newsletter.status)}
              </span>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="newsletter-header">
              <h3 className="newsletter-title">
                {newsletter.title}
                {newsletter.isSystem && (
                  <span className="system-label" title={getSystemEmailLabel(newsletter.type)}>
                    {getSystemEmailLabel(newsletter.type)}
                  </span>
                )}
              </h3>
              <p className="newsletter-subject">
                <span className="subject-label">–¢–µ–º–∞:</span> {newsletter.subject || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
              </p>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="newsletter-stats">
              <div className="stat-item">
                <span className="stat-label">–ü–æ–ª—É—á–∞—Ç–µ–ª–∏</span>
                <span className="stat-value">{newsletter.targetAudience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}</span>
              </div>
              {newsletter.stats && newsletter.status === 'sent' && (
                <>
                  <div className="stat-item">
                    <span className="stat-label">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
                    <span className="stat-value">{newsletter.stats.sent}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">–û—Ç–∫—Ä—ã—Ç–æ</span>
                    <span className="stat-value">
                      {newsletter.stats.opened} ({Math.round((newsletter.stats.opened / newsletter.stats.sent) * 100)}%)
                    </span>
                  </div>
                </>
              )}
            </div>

            {/* –î–∞—Ç–∞ */}
            <div className="newsletter-date">
              <span className="date-label">
                {newsletter.status === 'sent' && newsletter.sentAt
                  ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:'
                  : newsletter.status === 'scheduled' && newsletter.scheduledAt
                  ? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:'
                  : '–°–æ–∑–¥–∞–Ω–æ:'}
              </span>
              <span className="date-value">
                {newsletter.status === 'sent' && newsletter.sentAt
                  ? formatDate(newsletter.sentAt)
                  : newsletter.status === 'scheduled' && newsletter.scheduledAt
                  ? formatDate(newsletter.scheduledAt)
                  : formatDate(newsletter.createdAt)}
              </span>
            </div>

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className="newsletter-actions">
              <button
                className="action-btn preview"
                onClick={() => handlePreview(newsletter.id)}
                title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
              >
                <span className="icon">üëÅÔ∏è</span>
                –ü—Ä–æ—Å–º–æ—Ç—Ä
              </button>
              <button
                className="action-btn edit"
                onClick={() => handleEdit(newsletter.id)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
              >
                <span className="icon">‚úèÔ∏è</span>
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              {!newsletter.isSystem && (
                <>
                  <button
                    className="action-btn duplicate"
                    onClick={() => handleDuplicate(newsletter.id)}
                    title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <span className="icon">üìã</span>
                    –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button
                    className="action-btn delete"
                    onClick={() => setDeleteModalId(newsletter.id)}
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    <span className="icon">üóëÔ∏è</span>
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è */}
      {deleteModalId && (
        <div className="modal-overlay" onClick={() => setDeleteModalId(null)}>
          <div className="modal-content delete-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-icon">‚ö†Ô∏è</div>
            <h3>–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</h3>
            <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</p>
            <div className="modal-actions">
              <button
                className="btn-secondary"
                onClick={() => setDeleteModalId(null)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="btn-danger"
                onClick={() => handleDelete(deleteModalId)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞) */}
      {previewId && (
        <div className="modal-overlay" onClick={() => setPreviewId(null)}>
          <div className="modal-content preview-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</h3>
              <button className="close-btn" onClick={() => setPreviewId(null)}>√ó</button>
            </div>
            <div className="modal-body">
              <p>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞ #{previewId}</p>
              {/* TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä */}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
