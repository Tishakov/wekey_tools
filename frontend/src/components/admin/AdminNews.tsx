import React, { useState, useEffect } from 'react';
import { useNews } from '../../hooks/useNewslettersAndNews';
import './AdminNews.css';

interface NewsItem {
  id: number;
  title: string;
  slug: string;
  excerpt?: string;
  content: string;
  featuredImage?: string;
  tags: string[];
  status: 'draft' | 'published' | 'archived';
  publishedAt?: string;
  sendEmailNotification: boolean;
  emailSentAt?: string;
  emailRecipientCount: number;
  viewCount: number;
  priority: number;
  createdAt: string;
}

const AdminNews: React.FC = () => {
  const { 
    news, 
    loading, 
    error, 
    fetchNews,
    createNews,
    deleteNews,
    publishNews,
    archiveNews,
    uploadImage
  } = useNews();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [priorityFilter, setPriorityFilter] = useState<string>('all');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchNews();
  }, []); // –£–±–∏—Ä–∞–µ–º fetchNews –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleCreateNews = async (formData: any) => {
    try {
      await createNews(formData);
      setShowCreateForm(false);
    } catch (error) {
      console.error('Error creating news:', error);
    }
  };

  const handleDeleteNews = async (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
      try {
        await deleteNews(id);
      } catch (error) {
        console.error('Error deleting news:', error);
      }
    }
  };

  const handlePublishNews = async (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
      try {
        await publishNews(id);
      } catch (error) {
        console.error('Error publishing news:', error);
      }
    }
  };

  const handleArchiveNews = async (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
      try {
        await archiveNews(id);
      } catch (error) {
        console.error('Error archiving news:', error);
      }
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  const filteredNews = news.filter((newsItem: any) => {
    const matchesSearch = newsItem.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (newsItem.excerpt && newsItem.excerpt.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === 'all' || newsItem.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { text: '–ß–µ—Ä–Ω–æ–≤–∏–∫', class: 'status-draft' },
      published: { text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', class: 'status-published' },
      archived: { text: '–í –∞—Ä—Ö–∏–≤–µ', class: 'status-archived' }
    };
    
    const config = statusConfig[status as keyof typeof statusConfig] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${config.class}`}>{config.text}</span>;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getPriorityIcon = (priority: number) => {
    if (priority > 5) return 'üî•'; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (priority > 0) return '‚≠ê'; // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    return 'üìÑ'; // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  };

  if (loading) {
    return (
      <div className="admin-news-container">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</h3>
          <p>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="admin-news-container">
        <div className="empty-state">
          <span className="empty-icon">‚ö†Ô∏è</span>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p>{error}</p>
          <button className="create-first-news-btn" onClick={() => fetchNews()}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-news-container">
      <div className="admin-news-header">
        <div className="admin-section-title">
          <h1>üì∞ –ù–æ–≤–æ—Å—Ç–∏</h1>
          <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
        </div>
        <button 
          className="create-news-btn"
          onClick={() => setShowCreateForm(true)}
        >
          üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="news-filters">
        <div className="search-box">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <div className="status-filter">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="status-select"
          >
            <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</option>
            <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ</option>
            <option value="archived">–í –∞—Ä—Ö–∏–≤–µ</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π */}
      <div className="news-content">
        {loading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</p>
          </div>
        ) : filteredNews.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì∞</div>
            <h3>–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {searchTerm || statusFilter !== 'all' 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
              }
            </p>
            {!searchTerm && statusFilter === 'all' && (
              <button 
                className="create-first-news-btn"
                onClick={() => setShowCreateForm(true)}
              >
                üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
              </button>
            )}
          </div>
        ) : (
          <div className="news-list">
            {filteredNews.map((newsItem: any) => (
              <div key={newsItem.id} className="news-card">
                <div className="news-header">
                  <div className="news-title">
                    <div className="title-with-priority">
                      <span className="priority-icon">{getPriorityIcon(newsItem.priority)}</span>
                      <h3>{newsItem.title}</h3>
                    </div>
                    {newsItem.excerpt && (
                      <p className="news-excerpt">{newsItem.excerpt}</p>
                    )}
                  </div>
                  <div className="news-status">
                    {getStatusBadge(newsItem.status)}
                  </div>
                </div>

                {newsItem.featuredImage && (
                  <div className="news-image">
                    <img src={newsItem.featuredImage} alt={newsItem.title} />
                  </div>
                )}

                <div className="news-content-preview">
                  <p>{newsItem.content.substring(0, 200)}...</p>
                </div>

                {newsItem.tags.length > 0 && (
                  <div className="news-tags">
                    {newsItem.tags.map((tag: string, index: number) => (
                      <span key={index} className="news-tag">#{tag}</span>
                    ))}
                  </div>
                )}

                <div className="news-stats">
                  <div className="stat-item">
                    <span className="stat-label">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</span>
                    <span className="stat-value">{newsItem.viewCount}</span>
                  </div>
                  {newsItem.sendEmailNotification && (
                    <div className="stat-item">
                      <span className="stat-label">üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:</span>
                      <span className="stat-value">
                        {newsItem.emailSentAt ? '–î–∞' : '–ù–µ—Ç'} 
                        {newsItem.emailRecipientCount > 0 && ` (${newsItem.emailRecipientCount})`}
                      </span>
                    </div>
                  )}
                </div>

                <div className="news-meta">
                  <div className="news-dates">
                    <span>–°–æ–∑–¥–∞–Ω–æ: {formatDate(newsItem.createdAt)}</span>
                    {newsItem.publishedAt && (
                      <span>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {formatDate(newsItem.publishedAt)}</span>
                    )}
                  </div>
                  <div className="news-actions">
                    <button className="action-btn view-btn" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                      üëÅÔ∏è
                    </button>
                    <button className="action-btn edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                      ‚úèÔ∏è
                    </button>
                    <button className="action-btn publish-btn" title="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å">
                      üöÄ
                    </button>
                    <button className="action-btn duplicate-btn" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                      üìã
                    </button>
                    <button className="action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* TODO: –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showCreateForm && (
        <div className="modal-overlay">
          <div className="create-news-modal">
            <div className="modal-header">
              <h2>üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏</h2>
              <button 
                className="close-modal-btn"
                onClick={() => setShowCreateForm(false)}
              >
                ‚úï
              </button>
            </div>
            <div className="modal-content">
              <p>üöß –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
              <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç:</p>
              <ul>
                <li>üìã –ü–æ–ª–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏</li>
                <li>üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                <li>üìù Rich-text —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è</li>
                <li>üè∑Ô∏è –ü–æ–ª—è –¥–ª—è —Ç–µ–≥–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è</li>
                <li>üìß –û–ø—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</li>
                <li>‚≠ê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞</li>
                <li>üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</li>
              </ul>
            </div>
            <div className="modal-actions">
              <button 
                className="cancel-btn"
                onClick={() => setShowCreateForm(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button className="save-btn" disabled>
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminNews;