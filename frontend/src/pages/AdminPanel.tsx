import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import AdminSidebar from '../components/AdminSidebar';
import AdminDashboard from '../components/admin/AdminDashboard';
import AdminTools from '../components/admin/AdminTools';
import AdminUsers from '../components/admin/AdminUsers';
import AdminFinance from '../components/admin/AdminFinance';
import AdminAdmins from '../components/admin/AdminAdmins';
import AdminLogs from '../components/admin/AdminLogs';
import AdminIntegrations from '../components/admin/AdminIntegrations';
import AnalyticsChart from '../components/AnalyticsChart';
import historicalAnalyticsService from '../services/historicalAnalyticsService';
import type { HistoricalDataPoint } from '../services/historicalAnalyticsService';
import './AdminPanel.css';

interface AdminData {
  success: boolean;
  stats: {
    [displayName: string]: { 
      count: number; 
      lastUsed: string;
      originalKey?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
    };
  };
  totalUsage: number;
}

interface AnalyticsData {
  success: boolean;
  analytics: {
    total: {
      visitors: number;
      toolUsers: number;
      conversionRate: string;
    };
    today: {
      visitors: number;
      toolUsers: number;
      conversionRate: string;
    };
    events: number;
  };
}

const AdminPanel: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [adminData, setAdminData] = useState<AdminData | null>(null);
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);
  const [historicalData, setHistoricalData] = useState<HistoricalDataPoint[]>([]);
  const [selectedPeriod, setSelectedPeriod] = useState<'today' | 'week' | 'month' | 'quarter' | 'year'>('month');
  const [loading, setLoading] = useState(false);
  const [loadingHistorical, setLoadingHistorical] = useState(false);
  const [error, setError] = useState('');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –∏–∑ URL
  const getActiveSectionFromUrl = () => {
    const path = location.pathname;
    if (path === '/admin' || path === '/admin/dashboard') return 'dashboard';
    if (path === '/admin/tools') return 'tools';
    if (path === '/admin/users') return 'users';
    if (path === '/admin/finance') return 'finance';
    if (path === '/admin/admins') return 'admins';
    if (path === '/admin/logs') return 'logs';
    if (path === '/admin/integrations') return 'integrations';
    return 'dashboard';
  };

  const [activeSection, setActiveSection] = useState(getActiveSectionFromUrl());

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL
  useEffect(() => {
    setActiveSection(getActiveSectionFromUrl());
  }, [location.pathname]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å–µ–∫—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º URL
  const handleSectionChange = (section: string) => {
    setActiveSection(section);
    navigate(`/admin/${section}`);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
  useEffect(() => {
    const token = localStorage.getItem('adminToken');
    if (token) {
      setIsLoggedIn(true);
      fetchAdminData();
      fetchAnalyticsData();
      fetchHistoricalData();
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const fetchHistoricalData = async (period: typeof selectedPeriod = selectedPeriod) => {
    try {
      setLoadingHistorical(true);
      console.log('üìä [ADMIN] Fetching historical data for period:', period);
      const data = await historicalAnalyticsService.getDataByPeriod(period);
      setHistoricalData(data);
      console.log('‚úÖ [ADMIN] Historical data loaded:', data.length, 'days');
    } catch (error) {
      console.error('‚ùå [ADMIN] Error fetching historical data:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoadingHistorical(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const handlePeriodChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const newPeriod = event.target.value as typeof selectedPeriod;
    setSelectedPeriod(newPeriod);
    fetchHistoricalData(newPeriod);
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8080';
      const response = await fetch(`${API_BASE}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok && data.token) {
        localStorage.setItem('adminToken', data.token);
        setIsLoggedIn(true);
        fetchAdminData();
        fetchAnalyticsData();
        fetchHistoricalData();
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error('Login error:', err);
    } finally {
      setLoading(false);
    }
  };

  const fetchAdminData = async () => {
    try {
      const token = localStorage.getItem('adminToken');
      const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8080';
      
      const response = await fetch(`${API_BASE}/api/admin/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setAdminData(data);
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error('Fetch error:', err);
    }
  };

  const fetchAnalyticsData = async () => {
    try {
      const token = localStorage.getItem('adminToken');
      const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8080';
      
      console.log('üìä [ADMIN] Fetching analytics data...');
      
      const response = await fetch(`${API_BASE}/api/admin/analytics`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log('üìä [ADMIN] Analytics data received:', data);
        setAnalyticsData(data);
      } else {
        console.warn('‚ùå [ADMIN] Error fetching analytics:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('‚ùå [ADMIN] Error fetching analytics:', error);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('adminToken');
    setIsLoggedIn(false);
    setAdminData(null);
    setEmail('');
    setPassword('');
  };

  const handleResetStats = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    setLoading(true);
    try {
      const token = localStorage.getItem('adminToken');
      const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8080';
      
      const response = await fetch(`${API_BASE}/api/admin/reset-stats`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
      }

      const result = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
      fetchAdminData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.message === 'stats already empty') {
        alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –ø—É—Å—Ç–∞!');
      } else {
        alert('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setLoading(false);
    }
  };

  if (!isLoggedIn) {
    return (
      <div className="admin-login">
        <div className="admin-login-container">
          <h1>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
          <form onSubmit={handleLogin} className="admin-login-form">
            <div className="form-group">
              <label htmlFor="email">Email:</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                placeholder="admin@wekey.tools"
              />
            </div>
            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              />
            </div>
            {error && <div className="error-message">{error}</div>}
            <button type="submit" disabled={loading} className="login-button">
              {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          </form>
          <div className="demo-credentials">
            <p><strong>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
            <p>Email: admin@wekey.tools</p>
            <p>–ü–∞—Ä–æ–ª—å: admin123</p>
          </div>
        </div>
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
  const renderContent = () => {
    switch (activeSection) {
      case 'dashboard':
        return (
          <div className="dashboard-content">
            <div className="dashboard-header">
              <h1 className="dashboard-title">–î–∞—à–±–æ—Ä–¥</h1>
              <div className="date-range-picker">
                <label>–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç</label>
                <select value={selectedPeriod} onChange={handlePeriodChange}>
                  <option value="today">–°–µ–≥–æ–¥–Ω—è</option>
                  <option value="week">–ù–µ–¥–µ–ª—è</option>
                  <option value="month">–ú–µ—Å—è—Ü</option>
                  <option value="quarter">–ö–≤–∞—Ä—Ç–∞–ª</option>
                  <option value="year">–ì–æ–¥</option>
                </select>
              </div>
            </div>

            <div className="stats-grid">
              <div className="stat-card">
                <h3>–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π</h3>
                <div className="stat-number">{analyticsData?.analytics?.total?.visitors || 0}</div>
              </div>

              <div className="stat-card">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <div className="stat-number">{analyticsData?.analytics?.total?.toolUsers || 0}</div>
              </div>

              <div className="stat-card">
                <h3>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</h3>
                <div className="stat-number">{adminData?.totalUsage || 0}</div>
              </div>

              <div className="stat-card">
                <h3>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</h3>
                <div className="stat-number">{adminData?.stats ? Object.values(adminData.stats).filter(stat => stat.count > 0).length : 0}</div>
              </div>

              <div className="stat-card">
                <h3>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
                <div className="stat-conversion">{analyticsData?.analytics?.total?.conversionRate || '0'}%</div>
              </div>

              <div className="stat-card">
                <h3>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤</h3>
                <div className="stat-number">250</div>
                <div className="stat-sub">OpenAI GPT-4</div>
              </div>
            </div>

            <div className="charts-grid">
              <div className="chart-card">
                <h3>–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏</h3>
                {loadingHistorical ? (
                  <div className="chart-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                ) : (
                  <AnalyticsChart 
                    data={historicalData.map(item => ({
                      date: item.date,
                      value: item.visitors
                    }))} 
                    color="#3b82f6"
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π"
                  />
                )}
              </div>
              
              <div className="chart-card">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                {loadingHistorical ? (
                  <div className="chart-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                ) : (
                  <AnalyticsChart 
                    data={historicalData.map(item => ({
                      date: item.date,
                      value: item.toolUsers
                    }))} 
                    color="#10b981"
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                  />
                )}
              </div>
              
              <div className="chart-card">
                <h3>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                {loadingHistorical ? (
                  <div className="chart-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                ) : (
                  <AnalyticsChart 
                    data={historicalData.map(item => ({
                      date: item.date,
                      value: item.usageCount
                    }))} 
                    color="#8b5cf6"
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
                  />
                )}
              </div>
              
              <div className="chart-card">
                <h3>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
                {loadingHistorical ? (
                  <div className="chart-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                ) : (
                  <AnalyticsChart 
                    data={historicalData.map(item => ({
                      date: item.date,
                      value: parseFloat(item.conversionRate)
                    }))} 
                    color="#f59e0b"
                    title="–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (%)"
                  />
                )}
              </div>
            </div>

            <div className="tools-usage">
              <h3>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</h3>
              <div className="tools-table">
                <table>
                  <thead>
                    <tr>
                      <th>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</th>
                      <th>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</th>
                      <th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</th>
                    </tr>
                  </thead>
                  <tbody>
                    {adminData?.stats && Object.keys(adminData.stats).length > 0 ? (
                      Object.entries(adminData.stats)
                        .filter(([, data]) => data.count > 0)
                        .map(([displayName, data], index) => (
                        <tr key={index}>
                          <td>{displayName}</td>
                          <td>{data.count}</td>
                          <td>{new Date(data.lastUsed).toLocaleString('ru-RU')}</td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan={3}>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏</td>
                      </tr>
                    )}
                    {adminData?.stats && Object.entries(adminData.stats).every(([, data]) => data.count === 0) && (
                      <tr>
                        <td colSpan={3}>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="admin-actions">
              <button onClick={handleResetStats} className="reset-button" disabled={loading}>
                {loading ? '–°–±—Ä–æ—Å...' : '–°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'}
              </button>
              <button onClick={() => { 
                fetchAdminData(); 
                fetchAnalyticsData(); 
                fetchHistoricalData(); 
              }} className="refresh-button">
                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
            </div>
          </div>
        );
      case 'tools':
        return <AdminTools />;
      case 'users':
        return <AdminUsers />;
      case 'finance':
        return <AdminFinance />;
      case 'admins':
        return <AdminAdmins />;
      case 'logs':
        return <AdminLogs />;
      case 'integrations':
        return <AdminIntegrations />;
      default:
        return (
          <div className="dashboard-content">
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
          </div>
        );
    }
  };

  return (
    <div className="admin-panel">
      <AdminSidebar activeSection={activeSection} onSectionChange={handleSectionChange} />
      
      <div className="admin-main">
        <header className="admin-header">
          <h1>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Wekey Tools</h1>
          <div className="header-buttons">
            <button onClick={handleLogout} className="logout-button">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </header>

        {error && <div className="error-message">{error}</div>}

        <div className="admin-content-wrapper">
          {renderContent()}
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;