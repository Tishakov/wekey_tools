import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useLocalizedLink } from '../hooks/useLanguageFromUrl';
import { statsService } from '../utils/statsService';
import { useAuthRequired } from '../hooks/useAuthRequired';
import AuthRequiredModal from '../components/AuthRequiredModal';
import AuthModal from '../components/AuthModal';
import SEOAnalysisResults from '../components/SEOAnalysisResults';
import './SEOAuditProTool.css';
import '../styles/tool-pages.css';

const TOOL_ID = 'seoauditpro';
console.log('SEO Audit Pro: Using tool ID:', TOOL_ID);
const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8880';

// –¢–∏–ø—ã –¥–ª—è GSC –¥–∞–Ω–Ω—ã—Ö
interface GSCData {
  searchPerformance?: {
    totalClicks: number;
    totalImpressions: number;
    averageCTR: number;
    averagePosition: number;
    queries: Array<{
      query: string;
      clicks: number;
      impressions: number;
      ctr: number;
      position: number;
    }>;
    pages: Array<{
      page: string;
      clicks: number;
      impressions: number;
      ctr: number;
      position: number;
    }>;
    devices?: Array<{
      device: string;
      clicks: number;
      impressions: number;
      ctr: number;
      position: number;
    }>;
  };
  indexCoverage?: {
    validPages: number;
    errorPages: number;
    excludedPages: number;
    warnings: number;
    status?: string;
    issues?: Array<{
      type: string;
      count: number;
      urls: string[];
    }>;
  };
  coreWebVitals?: {
    goodUrls: number;
    needsImprovementUrls: number;
    poorUrls: number;
    issues: Array<{
      metric: string;
      category: string;
      urls: string[];
    }>;
  };
}

interface AuditResult {
  loading: boolean;
  error?: string;
  data?: {
    url: string;
    gscData: GSCData;
    overallScore: number;
    healthStatus: 'excellent' | 'good' | 'average' | 'poor' | 'critical';
    recommendations: Array<{
      priority: 'high' | 'medium' | 'low';
      category: string;
      title: string;
      description: string;
      impact: string;
      actionSteps: string[];
    }>;
  };
}

const SEOAuditProTool: React.FC = () => {
  const { t } = useTranslation();
  const createLink = useLocalizedLink();

  // Auth Required Hook
  const {
    isAuthRequiredModalOpen,
    isAuthModalOpen,
    requireAuth,
    closeAuthRequiredModal,
    closeAuthModal,
    openAuthModal
  } = useAuthRequired();

  const [launchCount, setLaunchCount] = useState(0);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [result, setResult] = useState<AuditResult | null>(null);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–π—Ç–æ–≤ –∏–∑ GSC
  const [availableSites, setAvailableSites] = useState<Array<{siteUrl: string, permissionLevel: string}>>([]);
  const [selectedSite, setSelectedSite] = useState('');
  const [loadingSites, setLoadingSites] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
  const [selectedPeriod, setSelectedPeriod] = useState<7 | 14 | 28 | 90>(28);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadLaunchCount = async () => {
      try {
        console.log(`SEO Audit Pro: Loading launch count for tool ID: ${TOOL_ID}`);
        console.log(`SEO Audit Pro: API Base URL: ${API_BASE}`);
        
        const count = await statsService.getLaunchCount(TOOL_ID);
        console.log(`SEO Audit Pro: Successfully loaded launch count: ${count}`);
        setLaunchCount(count);
      } catch (error) {
        console.error('SEO Audit Pro: Error loading launch count:', error);
        console.log('SEO Audit Pro: Falling back to 0 count');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –∫–∞–∫ fallback
        setLaunchCount(0);
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(loadLaunchCount, 100);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ GSC (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
  const loadAvailableSites = async () => {
    setLoadingSites(true);
    try {
      const response = await fetch(`${API_BASE}/api/tools/seo-audit-pro/sites`);
      const data = await response.json();
      
      if (data.success) {
        setAvailableSites(data.sites);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–æ–≤:', error);
    } finally {
      setLoadingSites(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ GSC —Å —Ç–æ–∫–µ–Ω–∞–º–∏
  const loadAvailableSitesWithTokens = async (tokens: any) => {
    setLoadingSites(true);
    try {
      const response = await fetch(`${API_BASE}/api/tools/seo-audit-pro/sites`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ tokens })
      });
      const data = await response.json();
      
      if (data.success) {
        setAvailableSites(data.sites);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        localStorage.setItem('gsc-tokens', JSON.stringify(tokens));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (data.message && data.apiActivationUrl) {
          console.warn('üîß API Activation needed:', data.message);
          console.warn('üîó Activation URL:', data.apiActivationUrl);
          
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          if (data.isDemo) {
            alert(`${data.message}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ API:\n${data.apiActivationUrl}`);
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏:', error);
      // Fallback –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
      await loadAvailableSites();
    } finally {
      setLoadingSites(false);
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Search Console
  const handleConnectGSC = async () => {
    const authResult = await requireAuth();
    if (!authResult) return;

    setIsConnecting(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google OAuth
      const response = await fetch(`${API_BASE}/api/tools/seo-audit-pro/auth`);
      const data = await response.json();
      
      if (data.success) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
        const authWindow = window.open(
          data.authUrl, 
          'gsc-auth', 
          'width=600,height=700,scrollbars=yes,resizable=yes'
        );

        // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const handleAuthMessage = (event: MessageEvent) => {
          if (event.origin !== window.location.origin) return;
          
          if (event.data.type === 'GSC_AUTH_SUCCESS') {
            authWindow?.close();
            setIsConnected(true);
            setIsConnecting(false);
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏–∑ GSC
            loadAvailableSitesWithTokens(event.data.tokens);
            window.removeEventListener('message', handleAuthMessage);
          } else if (event.data.type === 'GSC_AUTH_ERROR') {
            authWindow?.close();
            setIsConnecting(false);
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GSC:', event.data.error);
            window.removeEventListener('message', handleAuthMessage);
          }
        };

        window.addEventListener('message', handleAuthMessage);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const checkClosed = setInterval(() => {
          if (authWindow?.closed) {
            setIsConnecting(false);
            clearInterval(checkClosed);
            window.removeEventListener('message', handleAuthMessage);
          }
        }, 1000);
      }
    } catch (error) {
      setIsConnecting(false);
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GSC:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const handlePeriodChange = async (newPeriod: 7 | 14 | 28 | 90) => {
    console.log(`üîÑ SEOAuditProTool: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Å ${selectedPeriod} –Ω–∞ ${newPeriod} –¥–Ω–µ–π`);
    console.log(`üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result?.data ? '–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    
    setSelectedPeriod(newPeriod);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–±—Ä–∞–Ω —Å–∞–π—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    if (result?.data && selectedSite) {
      console.log(`üìä –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${newPeriod} –¥–Ω–µ–π (–±—ã–ª–æ ${selectedPeriod})...`);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading
      setResult({
        loading: true
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ feedback
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ (—ç—Ç–æ –Ω–µ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫, –∞ —Å–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞)
      await handleAnalyzeSiteInternal(false, newPeriod);
    }
  };

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º —Å—á–µ—Ç—á–∏–∫–∞
  const handleAnalyzeSiteInternal = async (shouldIncrementCounter = true, customPeriod?: number) => {
    if (!selectedSite) return;

    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞
    if (shouldIncrementCounter) {
      try {
        const newCount = await statsService.incrementAndGetCount(TOOL_ID);
        console.log(`SEO Audit Pro: Launch count updated from ${launchCount} to ${newCount}`);
        setLaunchCount(newCount);
      } catch (error) {
        console.error('Error updating launch count:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
      }
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setResult({
      loading: true
    });

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã GSC
      const savedTokens = localStorage.getItem('gsc-tokens');
      const tokens = savedTokens ? JSON.parse(savedTokens) : null;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const cacheBuster = Date.now();
      const actualPeriod = customPeriod || selectedPeriod;
      
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${selectedSite}, –ø–µ—Ä–∏–æ–¥: ${actualPeriod} –¥–Ω–µ–π, cacheBuster: ${cacheBuster}`);
      
      const requestBody = {
        website: selectedSite,
        tokens: tokens,
        useMockData: false,
        period: actualPeriod,
        cacheBuster
      };
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–ª–æ–º:`, {
        website: selectedSite,
        period: actualPeriod,
        tokensPresent: !!tokens,
        cacheBuster
      });
      
      // API –∑–∞–ø—Ä–æ—Å –∫ endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö GSC –¥–∞–Ω–Ω—ã—Ö
      const response = await fetch(`${API_BASE}/api/tools/seo-audit-pro/analyze?_t=${cacheBuster}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GSC');
      }

      const data = await response.json();
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞:', data);

      if (data.success && data.analysis) {
        console.log(`‚úÖ SEOAuditProTool: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${selectedPeriod}:`, {
          totalClicks: data.analysis.gscData?.searchPerformance?.totalClicks,
          totalImpressions: data.analysis.gscData?.searchPerformance?.totalImpressions,
          averageCTR: data.analysis.gscData?.searchPerformance?.averageCTR
        });
        
        setResult({
          loading: false,
          data: data.analysis
        });
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞:', error);
      setResult({
        loading: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'
      });
    }
  };

  // –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º —Å—á–µ—Ç—á–∏–∫–∞)
  const handleAnalyzeSite = async () => {
    await handleAnalyzeSiteInternal(true);
  };

  return (
    <div className="seo-audit-pro-tool">
      {/* Header Island */}
      <div className="tool-header-island">
        <Link to={createLink.createLink('')} className="back-button">
          <img src="/icons/arrow_left.svg" alt="" />
          –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </Link>
        <h1 className="tool-title">{t('tools.names.seo-audit-pro')}</h1>
        <div className="tool-header-buttons">
          <button className="tool-header-btn counter-btn" title="–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤">
            <img src="/icons/rocket.svg" alt="" />
            <span className="counter">{launchCount}</span>
          </button>
          <button className="tool-header-btn icon-only" title="–ü–æ–¥—Å–∫–∞–∑–∫–∏">
            <img src="/icons/lamp.svg" alt="" />
          </button>
          <button className="tool-header-btn icon-only" title="–°–∫—Ä–∏–Ω—à–æ—Ç">
            <img src="/icons/camera.svg" alt="" />
          </button>
        </div>
      </div>

      <div className="seopro-main-workspace">
        {/* GSC Connection Section */}
        {!isConnected ? (
          <div className="seopro-gsc-connection-section">
            <div className="seopro-gsc-intro">
              <div className="seopro-gsc-icon">
                <img src="/icons/google-search-console.svg" alt="Google Search Console" />
              </div>
              <h2>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Search Console</h2>
              <p className="seopro-gsc-description">
                –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π SEO-–∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –æ –≤–∞—à–µ–º —Å–∞–π—Ç–µ
              </p>
              
              <div className="seopro-gsc-benefits">
                <div className="seopro-benefit-item">
                  <span className="seopro-benefit-icon">üìä</span>
                  <span>–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞</span>
                </div>
                <div className="seopro-benefit-item">
                  <span className="seopro-benefit-icon">üîç</span>
                  <span>–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</span>
                </div>
                <div className="seopro-benefit-item">
                  <span className="seopro-benefit-icon">‚ö°</span>
                  <span>–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>
                </div>
                <div className="seopro-benefit-item">
                  <span className="seopro-benefit-icon">üéØ</span>
                  <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
                </div>
              </div>

              <button 
                className={`seopro-gsc-connect-btn ${isConnecting ? 'connecting' : ''}`}
                onClick={handleConnectGSC}
                disabled={isConnecting}
              >
                {isConnecting ? (
                  <>
                    <div className="seopro-loading-spinner"></div>
                    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...
                  </>
                ) : (
                  <>
                    <img src="/icons/google.svg" alt="" />
                    –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Search Console
                  </>
                )}
              </button>
            </div>
          </div>
        ) : (
          <>
            {/* Website Selection Section */}
            <div className="seopro-website-input-section">
              <div className="seopro-site-selector-container">
                <select
                  value={selectedSite}
                  onChange={(e) => setSelectedSite(e.target.value)}
                  className="seopro-site-selector"
                  disabled={loadingSites}
                >
                  <option value="">
                    {loadingSites ? '–ó–∞–≥—Ä—É–∂–∞—é —Å–∞–π—Ç—ã...' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
                  </option>
                  {availableSites.map((site, index) => (
                    <option key={index} value={site.siteUrl}>
                      {site.siteUrl} {site.permissionLevel === 'siteOwner' ? 'üëë' : 'üë§'}
                    </option>
                  ))}
                </select>
              </div>
              
              <button 
                className="seopro-analyze-btn"
                onClick={handleAnalyzeSite}
                disabled={!selectedSite || (result?.loading || false)}
              >
                {result?.loading ? (
                  <>
                    <div className="seopro-loading-spinner"></div>
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                  </>
                ) : (
                  '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'
                )}
              </button>
            </div>

            {/* Results Section */}
            {result && (
              <div className="seo-audit-pro-results">
                {result.loading && (
                  <div className="seopro-loading-state">
                    <div className="seopro-loading-spinner large"></div>
                    <h3>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Google Search Console</h3>
                    <p>–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–∞–π—Ç–µ...</p>
                    <div className="seopro-loading-steps">
                      <div className="seopro-step active">üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞</div>
                      <div className="seopro-step">üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é</div>
                      <div className="seopro-step">‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º Core Web Vitals</div>
                      <div className="seopro-step">üéØ –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                    </div>
                  </div>
                )}

                {result.error && (
                  <div className="seopro-error-state">
                    <h3>‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
                    <p>{result.error}</p>
                    <button className="seopro-retry-btn" onClick={handleAnalyzeSite}>
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                  </div>
                )}

                {result.data && (
                  <SEOAnalysisResults 
                    data={result.data} 
                    selectedPeriod={selectedPeriod}
                    onPeriodChange={handlePeriodChange}
                  />
                )}
              </div>
            )}
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      <AuthRequiredModal 
        isOpen={isAuthRequiredModalOpen}
        onClose={closeAuthRequiredModal}
        onLoginClick={openAuthModal}
      />
      
      <AuthModal 
        isOpen={isAuthModalOpen}
        onClose={closeAuthModal}
      />
    </div>
  );
};

export default SEOAuditProTool;