import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { statsService } from '../utils/statsService';
import { openaiService, type TextGenerationResponse } from '../services/openaiService';
import { useToolTranslation } from '../i18n/useToolTranslation';
import { useLocalizedLink } from '../hooks/useLanguageFromUrl';
import '../styles/tool-pages.css';
import { useAuthRequired } from '../hooks/useAuthRequired';
import AuthRequiredModal from '../components/AuthRequiredModal';
import AuthModal from '../components/AuthModal';
import './TextGeneratorTool.css';


const TOOL_ID = 'text-generator';
const TextGeneratorTool: React.FC = () => {
  const { t } = useTranslation();

// Auth Required Hook
    const {
        isAuthRequiredModalOpen,
        isAuthModalOpen,
        requireAuth,
        closeAuthRequiredModal,
        closeAuthModal,
        openAuthModal
    } = useAuthRequired();
  const { textGenerator } = useToolTranslation();
  const { createLink } = useLocalizedLink();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [language, setLanguage] = useState('english');
  const [countMode, setCountMode] = useState('characters'); // 'characters' –∏–ª–∏ 'words'
  const [characterCount, setCharacterCount] = useState(800);
  const [wordCount, setWordCount] = useState(100);
  const [paragraphCount, setParagraphCount] = useState(3);
  const [result, setResult] = useState('');
  const [copied, setCopied] = useState(false);
  const [launchCount, setLaunchCount] = useState(0);
  const [languageDropdownOpen, setLanguageDropdownOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiError, setAiError] = useState('');

  // –û–ø—Ü–∏–∏ —è–∑—ã–∫–æ–≤
  const languageOptions = {
    english: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    russian: '–†—É—Å—Å–∫–∏–π', 
    ukrainian: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
    lorem: 'Lorem Ipsum'
  };

  // –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const getMaxParagraphs = () => {
    const currentCount = countMode === 'characters' ? characterCount : wordCount;
    
    if (countMode === 'characters') {
      // –î–ª—è —Å–∏–º–≤–æ–ª–æ–≤: –º–∏–Ω–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∞–±–∑–∞—Ü
      const minPerParagraph = 40;
      return Math.max(1, Math.floor(currentCount / minPerParagraph));
    } else {
      // –î–ª—è —Å–ª–æ–≤: –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
      if (currentCount >= 250) {
        return 10; // 250+ —Å–ª–æ–≤ = –º–∞–∫—Å–∏–º—É–º 10 –∞–±–∑–∞—Ü–µ–≤
      } else {
        // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç 250 —Å–ª–æ–≤
        // 250 —Å–ª–æ–≤ = 10 –∞–±–∑–∞—Ü–µ–≤, 125 —Å–ª–æ–≤ = 5-6 –∞–±–∑–∞—Ü–µ–≤, 50 —Å–ª–æ–≤ = 2-3 –∞–±–∑–∞—Ü–∞
        const minWordsPerParagraph = 20; // –ú–∏–Ω–∏–º—É–º 20 —Å–ª–æ–≤ –Ω–∞ –∞–±–∑–∞—Ü
        return Math.max(1, Math.floor(currentCount / minWordsPerParagraph));
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å —Å–±—Ä–æ—Å–æ–º –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
  const handleCountModeChange = (newMode: 'characters' | 'words') => {
    setCountMode(newMode);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (newMode === 'characters') {
      setCharacterCount(800);
    } else {
      setWordCount(100);
    }
    setParagraphCount(3);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const loadStats = async () => {
      const count = await statsService.getLaunchCount(TOOL_ID);
      setLaunchCount(count);
    };
    loadStats();
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    setResult('');
    setCopied(false);
    setAiError('');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–π
    setTimeout(() => {
      // –ü–æ–ª–µ —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤
      const inputField = document.querySelector('.slider-value-input') as HTMLInputElement;
      if (inputField) {
        inputField.value = (countMode === 'characters' ? characterCount : wordCount).toString();
      }

      // –ü–æ–ª–µ –∞–±–∑–∞—Ü–µ–≤
      const paragraphInputs = document.querySelectorAll('.slider-value-input');
      const paragraphInput = paragraphInputs[1] as HTMLInputElement; // –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ - –∞–±–∑–∞—Ü—ã
      if (paragraphInput) {
        paragraphInput.value = paragraphCount.toString();
      }
    }, 0);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤ –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º
    const maxParagraphs = Math.min(getMaxParagraphs(), 10);
    if (paragraphCount > maxParagraphs) {
      setParagraphCount(maxParagraphs);
    }
  }, [language, countMode, characterCount, wordCount, paragraphCount]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (languageDropdownOpen) {
        const dropdown = document.querySelector('.text-generator-language-selector');
        if (dropdown && !dropdown.contains(event.target as Node)) {
          setLanguageDropdownOpen(false);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [languageDropdownOpen]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Lorem Ipsum
  const generateLoremIpsum = (length: number, mode: string): string => {
    const loremWords = [
      'lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit', 'sed', 'do',
      'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua',
      'enim', 'ad', 'minim', 'veniam', 'quis', 'nostrud', 'exercitation', 'ullamco', 'laboris',
      'nisi', 'aliquip', 'ex', 'ea', 'commodo', 'consequat', 'duis', 'aute', 'irure', 'in',
      'reprehenderit', 'voluptate', 'velit', 'esse', 'cillum', 'fugiat', 'nulla', 'pariatur',
      'excepteur', 'sint', 'occaecat', 'cupidatat', 'non', 'proident', 'sunt', 'culpa', 'qui',
      'officia', 'deserunt', 'mollit', 'anim', 'id', 'est', 'laborum'
    ];

    if (mode === 'words') {
      const words = [];
      for (let i = 0; i < length; i++) {
        words.push(loremWords[Math.floor(Math.random() * loremWords.length)]);
      }
      return words.join(' ');
    } else {
      // –ü–æ —Å–∏–º–≤–æ–ª–∞–º
      let text = '';
      while (text.length < length) {
        const word = loremWords[Math.floor(Math.random() * loremWords.length)];
        if (text.length + word.length + 1 <= length) {
          text += (text ? ' ' : '') + word;
        } else {
          break;
        }
      }
      return text;
    }
  };

  // –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã
  const splitIntoParagraphs = (text: string, paragraphs: number): string => {
    if (paragraphs <= 1) {
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–±–∑–∞—Ü, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
      return text.charAt(0).toUpperCase() + text.slice(1);
    }
    
    const words = text.split(' ');
    const wordsPerParagraph = Math.ceil(words.length / paragraphs);
    const result = [];
    
    for (let i = 0; i < paragraphs; i++) {
      const start = i * wordsPerParagraph;
      const end = Math.min(start + wordsPerParagraph, words.length);
      const paragraphWords = words.slice(start, end);
      if (paragraphWords.length > 0) {
        let paragraph = paragraphWords.join(' ');
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∞–±–∑–∞—Ü–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
        paragraph = paragraph.charAt(0).toUpperCase() + paragraph.slice(1);
        result.push(paragraph);
      }
    }
    
    return result.join('\n\n');
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å AI
  const handleGenerateText = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if (!requireAuth()) {
        return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    }

    setAiError('');
    setIsGenerating(true);
    
    try {
      console.log('ü§ñ Generating text with AI...');
      console.log('Parameters:', { language, countMode, characterCount, wordCount, paragraphCount });
      
      // –î–ª—è Lorem Ipsum –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
      if (language === 'lorem') {
        let generatedText = '';
        const currentLength = countMode === 'characters' ? characterCount : wordCount;
        generatedText = generateLoremIpsum(currentLength, countMode);
        const finalText = splitIntoParagraphs(generatedText, paragraphCount);
        setResult(finalText);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
        const response: TextGenerationResponse = await openaiService.generateText(
          language,
          characterCount,
          wordCount,
          paragraphCount,
          countMode as 'characters' | 'words'
        );
        
        if (response.success && response.text) {
          setResult(response.text);
          console.log('‚úÖ AI text generated successfully');
        } else {
          setAiError(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
          console.error('‚ùå AI generation failed:', response.error);
      }
      
    } catch (error) {
      console.error('üí• Error during text generation:', error);
      setAiError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞');
    } finally {
      setIsGenerating(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      try {
        const inputLength = countMode === 'characters' ? characterCount : wordCount;
        const newCount = await statsService.incrementAndGetCount(TOOL_ID, {
          inputLength: inputLength,
          outputLength: result.length
        });
        setLaunchCount(newCount);
      } catch (error) {
        console.error('Failed to update stats:', error);
        setLaunchCount(prev => prev + 1);
      }
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleCopy = async () => {
    if (result) {
      try {
        await navigator.clipboard.writeText(result);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', err);
      }
    }
  };

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
  const countLines = (text: string): number => {
    if (text === '') return 0;
    return text.split('\n').length;
  };

  return (
    <div className="text-generator-tool">
      {/* –®–∞–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ */}
      <div className="tool-header-island">
        <Link to={createLink('')} className="back-button">
          <img src="/icons/arrow_left.svg" alt="" />
          –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </Link>
        <h1 className="tool-title">{textGenerator.title()}</h1>
        <div className="tool-header-buttons">
          <button className="tool-header-btn counter-btn" title="–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤">
            <img src="/icons/rocket.svg" alt="" />
            <span className="counter">{launchCount}</span>
          </button>
          <button className="tool-header-btn" title="–ü–æ–¥—Å–∫–∞–∑–∫–∞">
            <img src="/icons/lamp.svg" alt="" />
          </button>
          <button className="tool-header-btn" title="–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç">
            <img src="/icons/camera.svg" alt="" />
          </button>
        </div>
      </div>

      {/* –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å —Å –æ—Å–æ–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π */}
      <div className="main-workspace">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
        <div className="settings-section">
          {/* –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ */}
          <div className="settings-group">
            <div className="text-generator-language-selector">
              <label className="language-label">–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:</label>
              <div className="dropdown-container">
                <button 
                  className="dropdown-toggle"
                  onClick={() => setLanguageDropdownOpen(!languageDropdownOpen)}
                  type="button"
                >
                  <span>{languageOptions[language as keyof typeof languageOptions]}</span>
                  <span className="dropdown-arrow">‚ñº</span>
                </button>
                {languageDropdownOpen && (
                  <div className="dropdown-menu">
                    {Object.entries(languageOptions).map(([key, name]) => (
                      <div 
                        key={key}
                        className={`dropdown-option ${language === key ? 'selected' : ''}`}
                        onClick={() => {
                          setLanguage(key);
                          setLanguageDropdownOpen(false);
                        }}
                      >
                        {name}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="settings-group">
            {/* –¢—É–º–±–ª–µ—Ä —Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤ */}
            <div className="count-mode-toggle">
              <div className="count-mode-block">
                <div className="toggle-container">
                  <span className="toggle-label-left">–°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã</span>
                  <label className="toggle-switch">
                    <input
                      type="checkbox"
                      checked={countMode === 'words'}
                      onChange={(e) => handleCountModeChange(e.target.checked ? 'words' : 'characters')}
                    />
                    <span className="toggle-slider"></span>
                  </label>
                  <span className="toggle-label-right">–°—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞</span>
                </div>
              </div>
            </div>

            {/* –°–ª–∞–π–¥–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤ */}
            <div className="count-slider-container">
              <label className="slider-label">
                –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {countMode === 'characters' ? '—Å–∏–º–≤–æ–ª–æ–≤' : '—Å–ª–æ–≤'}:
              </label>
              <div className="slider-group">
                <div className="slider-container">
                  <input
                    type="range"
                    min={countMode === 'characters' ? 10 : 3}
                    max={countMode === 'characters' ? 5000 : 500}
                    value={countMode === 'characters' ? characterCount : wordCount}
                    onChange={(e) => {
                      if (countMode === 'characters') {
                        setCharacterCount(parseInt(e.target.value));
                      } else {
                        setWordCount(parseInt(e.target.value));
                      }
                    }}
                    className="count-slider"
                  />
                </div>
                <input
                  type="number"
                  min={countMode === 'characters' ? 10 : 3}
                  max={countMode === 'characters' ? 5000 : 500}
                  defaultValue={countMode === 'characters' ? characterCount : wordCount}
                  onBlur={(e) => {
                    const value = parseInt(e.target.value) || 0;
                    const min = countMode === 'characters' ? 10 : 3;
                    const max = countMode === 'characters' ? 5000 : 500;
                    const clampedValue = Math.min(Math.max(value, min), max);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    e.target.value = clampedValue.toString();
                    
                    if (countMode === 'characters') {
                      setCharacterCount(clampedValue);
                    } else {
                      setWordCount(clampedValue);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.currentTarget.blur(); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç onBlur
                    }
                  }}
                  className="slider-value-input"
                />
              </div>
            </div>

            {/* –°–ª–∞–π–¥–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–±–∑–∞—Ü–µ–≤ */}
            <div className="count-slider-container">
              <label className="slider-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤:</label>
              <div className="slider-group">
                <div className="slider-container">
                  <input
                    type="range"
                    min="1"
                    max={Math.min(getMaxParagraphs(), 10)}
                    value={paragraphCount}
                    onChange={(e) => setParagraphCount(parseInt(e.target.value))}
                    className="count-slider"
                  />
                </div>
                <input
                  type="number"
                  min="1"
                  max={Math.min(getMaxParagraphs(), 10)}
                  defaultValue={paragraphCount}
                  onBlur={(e) => {
                    const value = parseInt(e.target.value) || 1;
                    const max = Math.min(getMaxParagraphs(), 10);
                    const clampedValue = Math.min(Math.max(value, 1), max);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    e.target.value = clampedValue.toString();
                    setParagraphCount(clampedValue);
                  }}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.currentTarget.blur(); // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç onBlur
                    }
                  }}
                  className="slider-value-input"
                />
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –ø–æ–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="result-section">
          <div className="result-textarea-container">
            <textarea
              className="result-textarea"
              value={result}
              readOnly
              placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            />
            {isGenerating && (
              <div className="ai-loading-overlay">
                <div className="loading-spinner"></div>
                <div className="loading-text">
                  <p>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò.</p>
                  <p>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã.</p>
                  <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.</p>
                </div>
              </div>
            )}
          </div>
          <div className="result-controls">
            <span className="result-counter">{countLines(result)} —Å—Ç—Ä.</span>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="control-buttons">
        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ AI */}
        {aiError && (
          <div style={{
            color: '#d73a49',
            fontSize: '14px',
            marginBottom: '12px',
            padding: '8px',
            backgroundColor: '#ffeaea',
            borderRadius: '4px',
            border: '1px solid #f0b4b4',
            width: '445px'
          }}>
            {aiError}
          </div>
        )}
        
        <button 
          className="action-btn primary" 
          style={{ width: '445px' }} 
          onClick={handleGenerateText}
          disabled={isGenerating}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
        </button>
        <button 
          className="action-btn secondary icon-left" 
          style={{ width: '445px' }} 
          onClick={handleCopy}
          disabled={!result}
        >
          <img src="/icons/button_copy.svg" alt="" />
          {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
        </button>
      </div>

      {/* SEO —Å–µ–∫—Ü–∏—è */}
      <div className="seo-section">
        <div className="seo-content">
          <div className="seo-item">
            <p>{t('textGenerator.seo.toolDescription')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.whatIsTextGenerator')}</h2>
            <p>{t('textGenerator.seo.whatIsTextGeneratorContent')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.whyNeeded')}</h2>
            <h3>{t('textGenerator.seo.whyNeededSubtitle')}</h3>
            <p>{t('textGenerator.seo.whyNeededContent')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.howItWorks')}</h2>
            <h3>{t('textGenerator.seo.howItWorksSubtitle')}</h3>
            <p>{t('textGenerator.seo.howItWorksContent')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.whatTexts')}</h2>
            <p>{t('textGenerator.seo.whatTextsContent')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.forSpecialists')}</h2>
            <p>{t('textGenerator.seo.forSpecialistsContent')}</p>
          </div>
          <div className="seo-item">
            <h2>{t('textGenerator.seo.howToUse')}</h2>
            <p>{t('textGenerator.seo.howToUseContent')}</p>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <AuthRequiredModal
        isOpen={isAuthRequiredModalOpen}
        onClose={closeAuthRequiredModal}
        onLoginClick={openAuthModal}
      />

      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={closeAuthModal}
        initialMode="login"
      />
    </div>
  );
};

export default TextGeneratorTool;