import { useAuth } from '../contexts/AuthContext';
import { coinService } from '../services/coinService';
import { statsService } from '../utils/statsService';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–∏–Ω–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–∏–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
 */
export const useToolWithCoins = (toolId: string) => {
  const { user, updateUser } = useAuth();

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–∏–Ω–æ–≤
   * @param action - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param metadata - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @returns –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∑–∞–ø—É—Å–∫–æ–≤
   */
  const executeWithCoins = async (
    action: () => Promise<any> | any,
    metadata?: {
      inputLength?: number;
      outputLength?: number;
      processingTime?: number;
    }
  ): Promise<{
    success: boolean;
    error?: string;
    newLaunchCount?: number;
    result?: any;
  }> => {
    try {
      // 1. –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–∏–Ω —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
      console.log('ü™ô Spending coin for tool:', toolId);
      const coinResult = await coinService.spendCoinsWithValidation(toolId, 1);
      
      if (!coinResult.success) {
        return {
          success: false,
          error: coinResult.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–∏–Ω–æ–≤'
        };
      }

      console.log('ü™ô Coin spent successfully, new balance:', coinResult.newBalance);

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (user && coinResult.newBalance !== undefined) {
        updateUser({ ...user, coinBalance: coinResult.newBalance });
      }

      // 3. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      let newLaunchCount: number;
      try {
        newLaunchCount = await statsService.incrementAndGetCount(toolId, metadata);
      } catch (error) {
        console.error('Failed to update stats:', error);
        newLaunchCount = 0; // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
      }

      // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
      const result = await action();

      return {
        success: true,
        newLaunchCount,
        result
      };

    } catch (error) {
      console.error('Error in executeWithCoins:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  };

  return {
    executeWithCoins
  };
};