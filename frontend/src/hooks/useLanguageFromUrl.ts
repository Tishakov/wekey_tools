import { useEffect, useRef } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
export const SUPPORTED_LANGUAGES = ['ru', 'en', 'uk'] as const;
export type SupportedLanguage = typeof SUPPORTED_LANGUAGES[number];

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º
export const isSupportedLanguage = (lang: string): lang is SupportedLanguage => {
  return SUPPORTED_LANGUAGES.includes(lang as SupportedLanguage);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const getDefaultLanguage = (): SupportedLanguage => 'ru';

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–º –∏–∑ URL
export const useLanguageFromUrl = () => {
  console.log('üîÑ [useLanguageFromUrl] Hook called with pathname:', window.location.pathname);
  
  const { lang } = useParams<{ lang: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const { i18n } = useTranslation();
  const lastRedirectRef = useRef<string>('');

  console.log('üîÑ [useLanguageFromUrl] Extracted lang:', lang, 'from pathname:', location.pathname);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const currentLanguage: SupportedLanguage = (lang && isSupportedLanguage(lang)) 
    ? lang 
    : getDefaultLanguage();

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
  useEffect(() => {
    if (lang && isSupportedLanguage(lang) && i18n.language !== lang) {
      i18n.changeLanguage(lang);
    }
  }, []); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ

  useEffect(() => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    if (lastRedirectRef.current === location.pathname) {
      return;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ—É—Ç—ã –∏–∑ —è–∑—ã–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (location.pathname.startsWith('/auth/') || 
        location.pathname.startsWith('/admin') ||
        location.pathname === '/auth/callback') {
      console.log('üîí [useLanguageFromUrl] Skipping language processing for system route:', location.pathname);
      return;
    }

    // –ï—Å–ª–∏ —è–∑—ã–∫ –≤ URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    if (!lang || !isSupportedLanguage(lang)) {
      // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å —è–∑—ã–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      let pathWithoutLang = location.pathname;
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–≤–∫–ª—é—á–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ /ru/ru/ru/)
      pathWithoutLang = pathWithoutLang.replace(/^(\/[a-z]{2})+/, '');
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
      if (!pathWithoutLang.startsWith('/')) {
        pathWithoutLang = '/' + pathWithoutLang;
      }
      
      const newPath = `/${getDefaultLanguage()}${pathWithoutLang}${location.search}`;
      
      lastRedirectRef.current = newPath;
      navigate(newPath, { replace: true });
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    lastRedirectRef.current = '';

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º i18n —Å —è–∑—ã–∫–æ–º –∏–∑ URL
    if (i18n.language !== currentLanguage) {
      i18n.changeLanguage(currentLanguage);
    }
  }, [lang, navigate, location, i18n, currentLanguage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const changeLanguage = (newLang: SupportedLanguage) => {
    const currentPath = location.pathname;
    
    // –ó–∞–º–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ URL
    const newPath = currentPath.replace(/^\/[a-z]{2}/, `/${newLang}`);
    navigate(newPath + location.search);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Å –¥—Ä—É–≥–∏–º —è–∑—ã–∫–æ–º
  const getUrlForLanguage = (targetLang: SupportedLanguage) => {
    const currentPath = location.pathname;
    return currentPath.replace(/^\/[a-z]{2}/, `/${targetLang}`) + location.search;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
  const getLanguageAlternatives = () => {
    return SUPPORTED_LANGUAGES.map(langCode => ({
      lang: langCode,
      url: getUrlForLanguage(langCode)
    }));
  };

  return {
    currentLanguage,
    changeLanguage,
    getUrlForLanguage,
    getLanguageAlternatives,
    supportedLanguages: SUPPORTED_LANGUAGES
  };
};

// –•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ —Å —è–∑—ã–∫–æ–º
export const useLocalizedLink = () => {
  const { currentLanguage } = useLanguageFromUrl();

  const createLink = (path: string) => {
    // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanPath = path.startsWith('/') ? path.slice(1) : path;
    return `/${currentLanguage}/${cleanPath}`;
  };

  return { createLink, currentLanguage };
};

export default useLanguageFromUrl;