import { useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
export const SUPPORTED_LANGUAGES = ['ru', 'en', 'uk'] as const;
export type SupportedLanguage = typeof SUPPORTED_LANGUAGES[number];

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º
export const isSupportedLanguage = (lang: string): lang is SupportedLanguage => {
  return SUPPORTED_LANGUAGES.includes(lang as SupportedLanguage);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const getDefaultLanguage = (): SupportedLanguage => 'ru';

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–º –∏–∑ URL
export const useLanguageFromUrl = () => {
  const { lang } = useParams<{ lang: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const { i18n } = useTranslation();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const currentLanguage: SupportedLanguage = (lang && isSupportedLanguage(lang)) 
    ? lang 
    : getDefaultLanguage();

  useEffect(() => {
    console.log('üåç [useLanguageFromUrl] Effect triggered:', { 
      lang, 
      currentLanguage, 
      'i18n.language': i18n.language,
      pathname: location.pathname 
    });

    // –ï—Å–ª–∏ —è–∑—ã–∫ –≤ URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    if (!lang || !isSupportedLanguage(lang)) {
      const newPath = `/${getDefaultLanguage()}${location.pathname}${location.search}`;
      console.log('üîÑ [useLanguageFromUrl] Redirecting to:', newPath);
      navigate(newPath, { replace: true });
      return;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º i18n —Å —è–∑—ã–∫–æ–º –∏–∑ URL
    if (i18n.language !== currentLanguage) {
      console.log('üîÑ [useLanguageFromUrl] Changing i18n language from', i18n.language, 'to', currentLanguage);
      i18n.changeLanguage(currentLanguage);
    }
  }, [lang, navigate, location, i18n, currentLanguage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const changeLanguage = (newLang: SupportedLanguage) => {
    const currentPath = location.pathname;
    console.log('üîÑ [changeLanguage] Changing language:', { 
      from: currentLanguage, 
      to: newLang, 
      currentPath 
    });
    
    // –ó–∞–º–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ URL
    const newPath = currentPath.replace(/^\/[a-z]{2}/, `/${newLang}`);
    console.log('üîÑ [changeLanguage] Navigating to:', newPath + location.search);
    navigate(newPath + location.search);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Å –¥—Ä—É–≥–∏–º —è–∑—ã–∫–æ–º
  const getUrlForLanguage = (targetLang: SupportedLanguage) => {
    const currentPath = location.pathname;
    return currentPath.replace(/^\/[a-z]{2}/, `/${targetLang}`) + location.search;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
  const getLanguageAlternatives = () => {
    return SUPPORTED_LANGUAGES.map(langCode => ({
      lang: langCode,
      url: getUrlForLanguage(langCode)
    }));
  };

  return {
    currentLanguage,
    changeLanguage,
    getUrlForLanguage,
    getLanguageAlternatives,
    supportedLanguages: SUPPORTED_LANGUAGES
  };
};

// –•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ —Å —è–∑—ã–∫–æ–º
export const useLocalizedLink = () => {
  const { currentLanguage } = useLanguageFromUrl();

  const createLink = (path: string) => {
    // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanPath = path.startsWith('/') ? path.slice(1) : path;
    return `/${currentLanguage}/${cleanPath}`;
  };

  return { createLink, currentLanguage };
};

export default useLanguageFromUrl;