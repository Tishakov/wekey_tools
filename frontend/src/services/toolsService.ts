import type { Tool } from '../utils/toolsConfig';

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8880';

interface ApiTool {
  id: string;
  title: string;
  description: string;
  icon: string;
  path: string;
  category: string;
}

class ToolsService {
  private cachedTools: Tool[] | null = null;
  private lastFetch: number = 0;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –∫—ç—à–∞

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ API –∏–ª–∏ fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
  async getActiveTools(): Promise<Tool[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const now = Date.now();
    if (this.cachedTools && (now - this.lastFetch) < this.CACHE_DURATION) {
      return this.cachedTools;
    }

    try {
      const response = await fetch(`${API_BASE}/api/tools/active`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      const data = await response.json();
      
      if (data.success && Array.isArray(data.tools)) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API —Ñ–æ—Ä–º–∞—Ç –≤ Tool —Ñ–æ—Ä–º–∞—Ç
        const tools: Tool[] = data.tools.map((apiTool: ApiTool) => ({
          id: apiTool.id,
          title: apiTool.title,
          description: apiTool.description,
          icon: apiTool.icon,
          path: apiTool.path,
          category: apiTool.category
        }));

        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cachedTools = tools;
        this.lastFetch = now;
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ API:', tools.length);
        return tools;
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ API:', error);
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥');
      
      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
      const { toolsConfig } = await import('../utils/toolsConfig');
      return toolsConfig;
    }
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∞–¥–º–∏–Ω–∫–µ)
  clearCache(): void {
    this.cachedTools = null;
    this.lastFetch = 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ ID
  async getToolById(id: string): Promise<Tool | undefined> {
    const tools = await this.getActiveTools();
    return tools.find(tool => tool.id === id);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getToolsByCategory(category?: string): Promise<Tool[]> {
    const tools = await this.getActiveTools();
    if (!category) return tools;
    return tools.filter(tool => tool.category === category);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const toolsService = new ToolsService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–∏–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export type { Tool };