/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */

interface VisitorData {
  userId: string;
  firstVisit: string;
  lastVisit: string;
  sessionsCount: number;
  pagesViewed: string[];
  hasUsedTools: boolean;
  toolsUsed: string[];
  userAgent: string;
  referrer: string;
}

interface AnalyticsEvent {
  userId: string;
  event: 'page_view' | 'tool_usage' | 'session_start';
  data: {
    page?: string;
    tool?: string;
    timestamp: string;
    userAgent: string;
    referrer: string;
  };
}

class AnalyticsService {
  private readonly USER_ID_KEY = 'wekey_user_id';
  private readonly VISITOR_DATA_KEY = 'wekey_visitor_data';
  private readonly API_BASE = 'http://localhost:8080';
  private userId: string;
  private isInitialized = false;

  constructor() {
    this.userId = this.getOrCreateUserId();
    this.initializeVisitorData();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getOrCreateUserId(): string {
    let userId = localStorage.getItem(this.USER_ID_KEY);
    
    if (!userId) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID v4
      userId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
      
      localStorage.setItem(this.USER_ID_KEY, userId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.sendEvent('session_start', {
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        referrer: document.referrer
      });
    }
    
    return userId;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
   */
  private initializeVisitorData(): void {
    const existingData = localStorage.getItem(this.VISITOR_DATA_KEY);
    let visitorData: VisitorData;

    if (existingData) {
      visitorData = JSON.parse(existingData);
      visitorData.lastVisit = new Date().toISOString();
      visitorData.sessionsCount += 1;
    } else {
      visitorData = {
        userId: this.userId,
        firstVisit: new Date().toISOString(),
        lastVisit: new Date().toISOString(),
        sessionsCount: 1,
        pagesViewed: [],
        hasUsedTools: false,
        toolsUsed: [],
        userAgent: navigator.userAgent,
        referrer: document.referrer
      };
    }

    localStorage.setItem(this.VISITOR_DATA_KEY, JSON.stringify(visitorData));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    this.syncVisitorData(visitorData);
    this.isInitialized = true;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  public trackPageView(page: string): void {
    if (!this.isInitialized) return;

    const visitorData = this.getVisitorData();
    if (!visitorData.pagesViewed.includes(page)) {
      visitorData.pagesViewed.push(page);
      this.updateVisitorData(visitorData);
    }

    this.sendEvent('page_view', {
      page,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      referrer: document.referrer
    });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   */
  public trackToolUsage(toolId: string): void {
    if (!this.isInitialized) return;

    const visitorData = this.getVisitorData();
    
    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if (!visitorData.hasUsedTools) {
      visitorData.hasUsedTools = true;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    if (!visitorData.toolsUsed.includes(toolId)) {
      visitorData.toolsUsed.push(toolId);
    }

    this.updateVisitorData(visitorData);

    this.sendEvent('tool_usage', {
      tool: toolId,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      referrer: document.referrer
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –∏–∑ localStorage
   */
  private getVisitorData(): VisitorData {
    const data = localStorage.getItem(this.VISITOR_DATA_KEY);
    if (!data) {
      throw new Error('Visitor data not found');
    }
    return JSON.parse(data);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –≤ localStorage
   */
  private updateVisitorData(data: VisitorData): void {
    localStorage.setItem(this.VISITOR_DATA_KEY, JSON.stringify(data));
    this.syncVisitorData(data);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  private async sendEvent(event: AnalyticsEvent['event'], data: AnalyticsEvent['data']): Promise<void> {
    try {
      const eventData: AnalyticsEvent = {
        userId: this.userId,
        event,
        data
      };

      console.log('üìä [ANALYTICS] Sending event:', eventData);

      const response = await fetch(`${this.API_BASE}/api/analytics/event`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData)
      });

      if (response.ok) {
        console.log('‚úÖ [ANALYTICS] Event sent successfully');
      } else {
        console.warn('‚ùå [ANALYTICS] Failed to send event:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('‚ùå [ANALYTICS] Failed to send event:', error);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
   */
  private async syncVisitorData(data: VisitorData): Promise<void> {
    try {
      console.log('üìä [ANALYTICS] Syncing visitor data:', data);
      
      const response = await fetch(`${this.API_BASE}/api/analytics/visitor`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        console.log('‚úÖ [ANALYTICS] Visitor data synced successfully');
      } else {
        console.warn('‚ùå [ANALYTICS] Failed to sync visitor data:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('‚ùå [ANALYTICS] Failed to sync visitor data:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public getUserId(): string {
    return this.userId;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
   */
  public getCurrentVisitorData(): VisitorData | null {
    return this.getVisitorData();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  public clearData(): void {
    localStorage.removeItem(this.USER_ID_KEY);
    localStorage.removeItem(this.VISITOR_DATA_KEY);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const analyticsService = new AnalyticsService();

export default analyticsService;