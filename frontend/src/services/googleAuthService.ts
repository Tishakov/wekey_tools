// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google OAuth
class GoogleAuthService {
  private static instance: GoogleAuthService;
  private baseURL: string;

  private constructor() {
    this.baseURL = import.meta.env.VITE_API_URL || 'http://localhost:8880';
  }

  public static getInstance(): GoogleAuthService {
    if (!GoogleAuthService.instance) {
      GoogleAuthService.instance = new GoogleAuthService();
    }
    return GoogleAuthService.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç Google OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
   * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Google
   */
  public initiateGoogleAuth(): void {
    const authURL = `${this.baseURL}/auth/google`;
    console.log('üöÄ Initiating Google OAuth to:', authURL);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    try {
      // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
      console.log('üîÑ Attempting direct redirect...');
      window.location.href = authURL;
      
      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ timeout
      setTimeout(() => {
        console.log('üîÑ Backup redirect attempt...');
        window.location.assign(authURL);
      }, 100);
      
    } catch (error) {
      console.error('‚ùå Redirect failed:', error);
      // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
      window.open(authURL, '_self');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ—Å–ª–µ OAuth
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  public handleOAuthCallback(): {
    token: string | null;
    refreshToken: string | null;
    user: any | null;
    error: string | null;
  } {
    console.log('üîç [GoogleAuthService] Handling OAuth callback');
    console.log('üîç [GoogleAuthService] Current URL:', window.location.href);
    console.log('üîç [GoogleAuthService] Search params:', window.location.search);
    console.log('üîç [GoogleAuthService] Pathname:', window.location.pathname);
    
    const urlParams = new URLSearchParams(window.location.search);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log('üîç [GoogleAuthService] All URL params:');
    for (const [key, value] of urlParams.entries()) {
      console.log(`  ${key}: ${value.substring(0, 50)}${value.length > 50 ? '...' : ''}`);
    }
    
    const token = urlParams.get('token');
    const refreshToken = urlParams.get('refresh');
    const userParam = urlParams.get('user');
    const error = urlParams.get('error');

    console.log('üîç [GoogleAuthService] Extracted params:', {
      token: token ? `present (${token.length} chars)` : 'null',
      refreshToken: refreshToken ? `present (${refreshToken.length} chars)` : 'null',
      userParam: userParam ? `present (${userParam.length} chars)` : 'null',
      error: error || 'null'
    });

    let user = null;
    if (userParam) {
      try {
        user = JSON.parse(decodeURIComponent(userParam));
        console.log('‚úÖ [GoogleAuthService] User data parsed successfully:', user);
      } catch (e) {
        console.error('‚ùå [GoogleAuthService] Error parsing user data:', e);
        console.log('üîç [GoogleAuthService] Raw user param:', userParam);
      }
    }

    // –ù–ï –û–ß–ò–©–ê–ï–ú URL - –ø—É—Å—Ç—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const result = { token, refreshToken, user, error };
    console.log('üîç [GoogleAuthService] Final callback result:', result);
    
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  public async checkAuthStatus(token: string): Promise<any> {
    try {
      const response = await fetch(`${this.baseURL}/auth/status`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Auth status check failed');
      }

      return await response.json();
    } catch (error) {
      console.error('Auth status check error:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç
   */
  public async unlinkGoogleAccount(token: string): Promise<any> {
    try {
      const response = await fetch(`${this.baseURL}/auth/google/unlink`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Google account unlink failed');
      }

      return await response.json();
    } catch (error) {
      console.error('Google unlink error:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ OAuth
   */
  public getErrorMessage(error: string): string {
    switch (error) {
      case 'oauth_failed':
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      case 'callback_error':
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google.';
      case 'access_denied':
        return '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.';
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google.';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ Google OAuth –≤ —Ç–µ–∫—É—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
   */
  public isSupported(): boolean {
    return typeof window !== 'undefined' && 
           typeof window.location !== 'undefined' &&
           typeof URLSearchParams !== 'undefined';
  }
}

export default GoogleAuthService;
