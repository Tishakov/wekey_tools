const { CoinOperationReason } = require('./src/models');

async function addTestReasons() {
  try {
    console.log('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–π...');

    // –ü—Ä–∏—á–∏–Ω—ã –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤
    const addReasons = [
      { reason: '–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', type: 'add', sortOrder: 1 },
      { reason: '–ü—Ä–æ–º–æ-–∞–∫—Ü–∏—è', type: 'add', sortOrder: 2 },
      { reason: '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –æ—à–∏–±–∫—É', type: 'add', sortOrder: 3 },
      { reason: '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', type: 'add', sortOrder: 4 },
      { reason: '–£—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', type: 'add', sortOrder: 5 }
    ];

    // –ü—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–∏–Ω–æ–≤
    const subtractReasons = [
      { reason: '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª', type: 'subtract', sortOrder: 1 },
      { reason: '–°–ø–∞–º –∏–ª–∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', type: 'subtract', sortOrder: 2 },
      { reason: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞', type: 'subtract', sortOrder: 3 },
      { reason: '–í–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è', type: 'subtract', sortOrder: 4 }
    ];

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
    const bothReasons = [
      { reason: '–†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞', type: 'both', sortOrder: 1 },
      { reason: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', type: 'both', sortOrder: 2 }
    ];

    const allReasons = [...addReasons, ...subtractReasons, ...bothReasons];

    for (const reasonData of allReasons) {
      const [reason, created] = await CoinOperationReason.findOrCreate({
        where: { reason: reasonData.reason, type: reasonData.type },
        defaults: reasonData
      });
      
      if (created) {
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: "${reasonData.reason}" (${reasonData.type})`);
      } else {
        console.log(`‚ÑπÔ∏è  –ü—Ä–∏—á–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: "${reasonData.reason}" (${reasonData.type})`);
      }
    }

    console.log('üéâ –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏—á–∏–Ω: ${allReasons.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalCount = await CoinOperationReason.count();
    const addCount = await CoinOperationReason.count({ where: { type: 'add' } });
    const subtractCount = await CoinOperationReason.count({ where: { type: 'subtract' } });
    const bothCount = await CoinOperationReason.count({ where: { type: 'both' } });
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –≤ –±–∞–∑–µ:');
    console.log(`   - –í—Å–µ–≥–æ: ${totalCount}`);
    console.log(`   - –î–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${addCount}`);
    console.log(`   - –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è: ${subtractCount}`);
    console.log(`   - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ: ${bothCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω:', error);
  } finally {
    process.exit(0);
  }
}

addTestReasons();