const { Sequelize, DataTypes } = require('sequelize');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: './database.sqlite',
  logging: false // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
});

// –ú–æ–¥–µ–ª—å ToolUsage
const ToolUsage = sequelize.define('ToolUsage', {
  userId: DataTypes.STRING,
  toolName: DataTypes.STRING,
  sessionId: DataTypes.STRING,
  ipAddress: DataTypes.STRING,
  userAgent: DataTypes.TEXT,
  inputLength: DataTypes.INTEGER,
  outputLength: DataTypes.INTEGER,
  processingTime: DataTypes.INTEGER,
  toolVersion: DataTypes.STRING,
  language: DataTypes.STRING,
  wasSuccessful: DataTypes.BOOLEAN,
  errorMessage: DataTypes.TEXT
}, {
  tableName: 'tool_usage'
});

async function checkRemoveDuplicatesStats() {
  try {
    await sequelize.authenticate();
    console.log('üîç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø remove-duplicates:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π ID
    const newStats = await ToolUsage.findAll({
      where: { toolName: 'remove-duplicates' },
      order: [['createdAt', 'DESC']]
    });
    
    console.log(`üìä –ó–∞–ø–∏—Å–∏ —Å ID "remove-duplicates": ${newStats.length}`);
    
    if (newStats.length > 0) {
      console.log('üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:', newStats[0].createdAt);
      console.log('üìù –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏:');
      console.log('   - –î–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', newStats[0].inputLength);
      console.log('   - –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', newStats[0].outputLength);
      console.log('   - –£—Å–ø–µ—à–Ω–æ:', newStats[0].wasSuccessful);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π ID
    const oldStats = await ToolUsage.findAll({
      where: { toolName: 'duplicate_removal_tool' }
    });
    
    console.log(`\nüìä –ó–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ä—ã–º ID "duplicate_removal_tool": ${oldStats.length}`);
    
    if (oldStats.length > 0) {
      console.log('\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –°–¢–ê–†–´–ï –ó–ê–ü–ò–°–ò! –ò—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π ID');
      
      // –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–æ–≤—ã–π ID
      await ToolUsage.update(
        { toolName: 'remove-duplicates' },
        { where: { toolName: 'duplicate_removal_tool' } }
      );
      
      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π ID');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const updatedStats = await ToolUsage.findAll({
        where: { toolName: 'remove-duplicates' }
      });
      
      console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: ${updatedStats.length}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await sequelize.close();
  }
}

checkRemoveDuplicatesStats();