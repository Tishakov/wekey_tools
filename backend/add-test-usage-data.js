const { User, ToolUsage } = require('./src/config/database');

async function addTestToolUsageData() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({
      where: { email: 'bohdan.tishakov@gmail.com' }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email} (ID: ${user.id})`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const testUsageData = [
      { toolName: 'case-changer', count: 15 },
      { toolName: 'remove-duplicates', count: 8 },
      { toolName: 'text-to-html', count: 12 },
      { toolName: 'utm-generator', count: 5 },
      { toolName: 'word-mixer', count: 3 },
      { toolName: 'seo-audit', count: 7 },
      { toolName: 'password-generator', count: 2 }
    ];

    let totalRecords = 0;

    for (const tool of testUsageData) {
      for (let i = 0; i < tool.count; i++) {
        await ToolUsage.create({
          userId: user.id,
          toolName: tool.toolName,
          sessionId: `test-session-${Date.now()}-${i}`,
          ipAddress: '127.0.0.1',
          inputLength: Math.floor(Math.random() * 1000) + 50,
          outputLength: Math.floor(Math.random() * 1200) + 60,
          processingTime: Math.floor(Math.random() * 500) + 10,
          wasSuccessful: true,
          language: 'ru'
        });
        totalRecords++;
      }
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${tool.count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${tool.toolName}`);
    }

    console.log(`\nüéâ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!`);
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${testUsageData.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    process.exit(0);
  }
}

addTestToolUsageData();