// EmailService —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä
const emailService = require('../services/EmailService');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 * @param {string} to - Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
 * @param {string} subject - –¢–µ–º–∞ –ø–∏—Å—å–º–∞
 * @param {string} html - HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
 * @param {string} text - –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–∏—Å—å–º–∞
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendEmail(to, subject, html, text = null, options = {}) {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const mailOptions = {
      from: {
        name: options.fromName || 'Wekey Tools',
        address: options.fromEmail || process.env.EMAIL_FROM || 'noreply@wekeytools.com'
      },
      to: to,
      subject: subject,
      html: html,
      ...options // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (attachments, cc, bcc –∏ —Ç.–¥.)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    if (text) {
      mailOptions.text = text;
    } else {
      // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML –≤ —Ç–µ–∫—Å—Ç (—É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏)
      mailOptions.text = html.replace(/<[^>]*>/g, '').replace(/\s+/g, ' ').trim();
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ EmailService
    const result = await emailService.transporter.sendMail(mailOptions);
    
    console.log('üìß Email sent successfully:', {
      messageId: result.messageId,
      to: to,
      subject: subject
    });
    
    return {
      success: true,
      messageId: result.messageId,
      info: result
    };
    
  } catch (error) {
    console.error('‚ùå Failed to send email:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥)
 * @param {string} email - Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
 * @param {string} verificationCode - –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendVerificationEmail(email, verificationCode, userName) {
  return await emailService.sendVerificationEmail(email, verificationCode, userName);
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
 * @param {Array} recipients - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π {email, name}
 * @param {string} subject - –¢–µ–º–∞ –ø–∏—Å—å–º–∞
 * @param {string} html - HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 * @param {string} text - –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendBulkEmail(recipients, subject, html, text = null, options = {}) {
  const results = {
    success: 0,
    failed: 0,
    errors: []
  };

  console.log(`üìß Starting bulk email send to ${recipients.length} recipients`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å SMTP —Å–µ—Ä–≤–µ—Ä
  for (const recipient of recipients) {
    try {
      const recipientEmail = typeof recipient === 'string' ? recipient : recipient.email;
      const recipientName = typeof recipient === 'object' ? recipient.name : null;

      // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è
      let personalizedHtml = html;
      let personalizedText = text;
      
      if (recipientName) {
        personalizedHtml = html.replace(/\{\{name\}\}/g, recipientName);
        if (personalizedText) {
          personalizedText = personalizedText.replace(/\{\{name\}\}/g, recipientName);
        }
      }

      const result = await sendEmail(
        recipientEmail, 
        subject, 
        personalizedHtml, 
        personalizedText, 
        options
      );

      if (result.success) {
        results.success++;
      } else {
        results.failed++;
        results.errors.push({
          email: recipientEmail,
          error: result.error
        });
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));

    } catch (error) {
      results.failed++;
      results.errors.push({
        email: typeof recipient === 'string' ? recipient : recipient.email,
        error: error.message
      });
    }
  }

  console.log(`üìß Bulk email completed: ${results.success} success, ${results.failed} failed`);
  return results;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
 * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
async function testEmailConnection() {
  return await emailService.testConnection();
}

module.exports = {
  sendEmail,
  sendVerificationEmail,
  sendBulkEmail,
  testEmailConnection,
  emailService
};