const { Sequelize } = require('sequelize');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: path.join(__dirname, '../../database.sqlite'),
  logging: console.log
});

async function cleanAnalytics() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');

    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ analytics_events
    const result1 = await sequelize.query(`
      DELETE FROM analytics_events 
      WHERE page LIKE '%/ru/ru/%' 
         OR page LIKE '%/en/en/%' 
         OR page LIKE '%/uk/uk/%'
    `);
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result1[0].changes || 0} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ analytics_events`);

    // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ visitors
    const visitorsToClean = await sequelize.query(`
      SELECT id, pagesViewed FROM visitors 
      WHERE pagesViewed LIKE '%/ru/ru/%' 
         OR pagesViewed LIKE '%/en/en/%' 
         OR pagesViewed LIKE '%/uk/uk/%'
    `, { type: Sequelize.QueryTypes.SELECT });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${visitorsToClean.length} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏`);

    for (const visitor of visitorsToClean) {
      // –ü–∞—Ä—Å–∏–º JSON –∏ –æ—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏
      let pagesViewed;
      try {
        pagesViewed = JSON.parse(visitor.pagesViewed);
      } catch (e) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è ${visitor.id}`);
        continue;
      }

      // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏
      const cleanedPages = pagesViewed.filter(page => {
        // –£–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        return !page.match(/^\/[a-z]{2}\/[a-z]{2}/) && 
               page !== '/ru/ru/' && 
               page !== '/en/en/' && 
               page !== '/uk/uk/';
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
      await sequelize.query(`
        UPDATE visitors 
        SET pagesViewed = ? 
        WHERE id = ?
      `, {
        replacements: [JSON.stringify(cleanedPages), visitor.id],
        type: Sequelize.QueryTypes.UPDATE
      });

      console.log(`‚úÖ –û—á–∏—â–µ–Ω –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å ${visitor.id}: ${pagesViewed.length} ‚Üí ${cleanedPages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    }

    console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
  } finally {
    await sequelize.close();
  }
}

cleanAnalytics();