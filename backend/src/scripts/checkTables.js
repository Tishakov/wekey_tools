const { Sequelize } = require('sequelize');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: path.join(__dirname, '../../database.sqlite'),
  logging: console.log
});

async function checkTables() {
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const tables = await sequelize.query(`
      SELECT name FROM sqlite_master WHERE type='table';
    `, { type: Sequelize.QueryTypes.SELECT });

    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.forEach(table => {
      console.log(`  - ${table.name}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Visitors
    if (tables.some(t => t.name === 'Visitors')) {
      const visitorsCount = await sequelize.query(`
        SELECT COUNT(*) as count FROM Visitors
      `, { type: Sequelize.QueryTypes.SELECT });
      
      console.log(`\nüë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${visitorsCount[0].count}`);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
      const problematicVisitors = await sequelize.query(`
        SELECT COUNT(*) as count FROM Visitors 
        WHERE pagesViewed LIKE '%/ru/ru/%' 
           OR pagesViewed LIKE '%/en/en/%' 
           OR pagesViewed LIKE '%/uk/uk/%'
      `, { type: Sequelize.QueryTypes.SELECT });

      console.log(`‚ö†Ô∏è –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏: ${problematicVisitors[0].count}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await sequelize.close();
  }
}

checkTables();