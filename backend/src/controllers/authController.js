const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { validationResult } = require('express-validator');

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
const JWT_SECRET = process.env.JWT_SECRET || 'wekey-tools-secret-key-2025';

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Ö–æ–¥–∞
exports.login = async (req, res) => {
  try {
    console.log('üîç Login attempt:', req.body.email);

    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    const { User } = require('../config/database');
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ 
      where: { email }
    });

    if (!user) {
      console.log('‚ùå User not found:', email);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    console.log('‚úÖ User found:', user.email, 'role:', user.role);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –º–æ–¥–µ–ª–∏
    const isPasswordValid = await user.checkPassword(password);
    console.log('üîë Password check:', isPasswordValid);

    if (!isPasswordValid) {
      console.log('‚ùå Invalid password for:', email);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    // if (user.role !== 'admin') {
    //   console.log('‚ùå Insufficient permissions:', email, 'role:', user.role);
    //   return res.status(403).json({
    //     success: false,
    //     message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
    //   });
    // }

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('‚úÖ Login successful:', email);

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      token,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        coinBalance: user.coinBalance
      }
    });

  } catch (error) {
    console.error('‚ùå Login error:', error.message);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.register = async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        errors: errors.array()
      });
    }

    const { email, password, firstName, lastName } = req.body;

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    const { User } = require('../config/database');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create({
      email,
      password, // –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–¥–µ–ª–∏
      firstName,
      lastName,
      role: 'user' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫–æ–∏–Ω–æ–≤
    const { CoinTransaction } = require('../config/database');
    try {
      await CoinTransaction.registrationBonus(user.id, 100);
      console.log('ü™ô –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å 100 –∫–æ–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', email);
    } catch (coinError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', coinError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å –∫–æ–∏–Ω–∞–º–∏
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    await user.reload();

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', email);

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      token,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        coinBalance: user.coinBalance
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
exports.verifyToken = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    const { User } = require('../config/database');
    const user = await User.findByPk(decoded.userId); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å decoded.id –Ω–∞ decoded.userId

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role
      }
    });

  } catch (error) {
    res.status(401).json({
      success: false,
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getProfile = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    
    const { User } = require('../config/database');
    const user = await User.findByPk(decoded.userId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await user.update({ 
      lastLoginAt: new Date(),
      loginCount: user.loginCount + 1
    });

    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        language: user.language,
        theme: user.theme,
        avatar: user.avatar,
        gender: user.gender,
        birthDate: user.birthDate,
        phone: user.phone,
        country: user.country,
        bio: user.bio,
        profession: user.profession,
        interests: user.interests,
        facebook: user.facebook,
        instagram: user.instagram,
        linkedin: user.linkedin,
        telegram: user.telegram,
        website: user.website,
        createdAt: user.createdAt,
        lastLoginAt: user.lastLoginAt,
        loginCount: user.loginCount,
        apiRequestsCount: user.apiRequestsCount,
        dailyApiLimit: user.dailyApiLimit,
        coinBalance: user.coinBalance
      }
    });

  } catch (error) {
    console.error('‚ùå Get profile error:', error);
    res.status(401).json({
      success: false,
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateProfile = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    const { 
      firstName, 
      lastName, 
      language, 
      theme, 
      currentPassword, 
      newPassword,
      gender,
      birthDate,
      phone,
      country,
      bio,
      profession,
      interests,
      facebook,
      instagram,
      linkedin,
      telegram,
      website
    } = req.body;
    
    const { User } = require('../config/database');
    const user = await User.findByPk(decoded.userId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    if (newPassword) {
      if (!currentPassword) {
        return res.status(400).json({
          success: false,
          message: '–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
        });
      }

      const isCurrentPasswordValid = await user.checkPassword(currentPassword);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
        });
      }

      // –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–¥–µ–ª–∏
      await user.update({ password: newPassword });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const updateData = {};
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if (firstName !== undefined) updateData.firstName = firstName;
    if (lastName !== undefined) updateData.lastName = lastName;
    if (language !== undefined) updateData.language = language;
    if (theme !== undefined) updateData.theme = theme;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    if (gender !== undefined) updateData.gender = gender;
    if (birthDate !== undefined) updateData.birthDate = birthDate;
    if (phone !== undefined) updateData.phone = phone;
    if (country !== undefined) updateData.country = country;
    if (bio !== undefined) updateData.bio = bio;
    if (profession !== undefined) updateData.profession = profession;
    if (interests !== undefined) updateData.interests = interests;
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    if (facebook !== undefined) updateData.facebook = facebook;
    if (instagram !== undefined) updateData.instagram = instagram;
    if (linkedin !== undefined) updateData.linkedin = linkedin;
    if (telegram !== undefined) updateData.telegram = telegram;
    if (website !== undefined) updateData.website = website;

    if (Object.keys(updateData).length > 0) {
      await user.update(updateData);
      console.log('‚úÖ Profile updated for user:', user.email, 'Updated fields:', Object.keys(updateData));
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedUser = await User.findByPk(user.id);

    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: {
        id: updatedUser.id,
        email: updatedUser.email,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
        role: updatedUser.role,
        language: updatedUser.language,
        theme: updatedUser.theme,
        avatar: updatedUser.avatar,
        gender: updatedUser.gender,
        birthDate: updatedUser.birthDate,
        phone: updatedUser.phone,
        country: updatedUser.country,
        bio: updatedUser.bio,
        profession: updatedUser.profession,
        interests: updatedUser.interests,
        facebook: updatedUser.facebook,
        instagram: updatedUser.instagram,
        linkedin: updatedUser.linkedin,
        telegram: updatedUser.telegram,
        website: updatedUser.website,
        createdAt: updatedUser.createdAt,
        lastLoginAt: updatedUser.lastLoginAt,
        loginCount: updatedUser.loginCount
      }
    });

  } catch (error) {
    console.error('‚ùå Update profile error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ê–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥ (–æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
exports.adminLogin = async (req, res) => {
  try {
    console.log('üîç Admin login attempt:', req.body.email);

    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    const { User } = require('../config/database');
    
    const user = await User.findOne({ where: { email } });

    if (!user) {
      console.log('‚ùå User not found:', email);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    const isPasswordValid = await user.checkPassword(password);
    if (!isPasswordValid) {
      console.log('‚ùå Invalid password for:', email);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
    if (user.role !== 'admin') {
      console.log('‚ùå Insufficient permissions:', email, 'role:', user.role);
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
      });
    }

    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role 
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('‚úÖ Admin login successful:', email);

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      token,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role
      }
    });

  } catch (error) {
    console.error('‚ùå Admin login error:', error.message);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message
    });
  }
};

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
exports.changePassword = async (req, res) => {
  try {
    console.log('üîê Change password request for user:', req.user.id);

    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        success: false,
        message: '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    if (newPassword.length < 8) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    const { User } = require('../config/database');
    const bcrypt = require('bcryptjs');
    const user = await User.findByPk(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
      });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const saltRounds = 12;
    const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await user.update({ password: hashedNewPassword });

    console.log('‚úÖ Password changed successfully for user:', user.email);

    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå Change password error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateSettings = async (req, res) => {
  try {
    console.log('‚öôÔ∏è Update settings request for user:', req.user.id);
    console.log('‚öôÔ∏è Settings data:', req.body);

    const { defaultLanguage, emailNotifications, theme } = req.body;

    const { User } = require('../config/database');
    const user = await User.findByPk(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updateData = {};
    
    if (defaultLanguage && ['ru', 'en', 'uk'].includes(defaultLanguage)) {
      updateData.language = defaultLanguage;
    }
    
    if (theme && ['light', 'dark'].includes(theme)) {
      updateData.theme = theme;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–æ–ª–µ settings –∫–∞–∫ JSON
    const currentSettings = user.settings ? JSON.parse(user.settings) : {};
    const newSettings = {
      ...currentSettings,
      emailNotifications: emailNotifications !== undefined ? emailNotifications : currentSettings.emailNotifications
    };
    
    updateData.settings = JSON.stringify(newSettings);

    await user.update(updateData);

    console.log('‚úÖ Settings updated successfully for user:', user.email);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findByPk(req.user.id);
    const userResponse = {
      id: updatedUser.id,
      email: updatedUser.email,
      firstName: updatedUser.firstName,
      lastName: updatedUser.lastName,
      role: updatedUser.role,
      language: updatedUser.language,
      theme: updatedUser.theme,
      settings: updatedUser.settings ? JSON.parse(updatedUser.settings) : {}
    };

    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      user: userResponse
    });

  } catch (error) {
    console.error('‚ùå Update settings error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
exports.refreshToken = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const token = authHeader.substring(7);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫)
      const decoded = jwt.verify(token, JWT_SECRET, { ignoreExpiration: true });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 24 —á–∞—Å–∞
      const now = Date.now() / 1000;
      if (decoded.exp && (now - decoded.exp) > 86400) { // 24 —á–∞—Å–∞
        return res.status(401).json({
          success: false,
          message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
      const newToken = jwt.sign(
        {
          userId: decoded.userId,
          email: decoded.email,
          isAdmin: decoded.isAdmin
        },
        JWT_SECRET,
        { expiresIn: '24h' }
      );

      console.log('ÔøΩÔøΩÔøΩ Token refreshed for user:', decoded.email);

      res.json({
        success: true,
        message: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        token: newToken
      });

    } catch (jwtError) {
      console.error('‚ùå JWT verification error:', jwtError.message);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

  } catch (error) {
    console.error('‚ùå Refresh token error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserStats = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    
    const { User, ToolUsage } = require('../config/database');
    const user = await User.findByPk(decoded.userId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const toolStats = await ToolUsage.findAll({
      attributes: [
        [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'totalUsage'],
        [require('sequelize').fn('COUNT', require('sequelize').fn('DISTINCT', require('sequelize').col('toolName'))), 'uniqueTools']
      ],
      where: { userId: decoded.userId },
      raw: true
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤
    const { CoinTransaction } = require('../config/database');
    const coinStats = await CoinTransaction.findAll({
      attributes: [
        [require('sequelize').fn('SUM', require('sequelize').col('amount')), 'totalSpent']
      ],
      where: { 
        userId: decoded.userId,
        type: 'spend' // –¢–æ–ª—å–∫–æ —Ç—Ä–∞—Ç—ã, –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      },
      raw: true
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    const createdAt = new Date(user.createdAt);
    const now = new Date();
    const daysOnPlatform = Math.floor((now - createdAt) / (1000 * 60 * 60 * 24));

    const stats = {
      totalToolUsage: parseInt(toolStats[0]?.totalUsage) || 0,
      uniqueToolsUsed: parseInt(toolStats[0]?.uniqueTools) || 0,
      daysOnPlatform: daysOnPlatform,
      tokensUsed: Math.abs(parseInt(coinStats[0]?.totalSpent) || 0) // –ò—Å–ø–æ–ª—å–∑—É–µ–º Math.abs, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–∞—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –º–∏–Ω—É—Å–æ–º
    };

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('‚ùå Get user stats error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
exports.refreshToken = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const token = authHeader.substring(7);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫)
      const JWT_SECRET = process.env.JWT_SECRET || 'wekey-tools-secret-key-2025';
      const jwt = require('jsonwebtoken');
      const decoded = jwt.verify(token, JWT_SECRET, { ignoreExpiration: true });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 24 —á–∞—Å–∞
      const now = Date.now() / 1000;
      if (decoded.exp && (now - decoded.exp) > 86400) { // 24 —á–∞—Å–∞
        return res.status(401).json({
          success: false,
          message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
      const newToken = jwt.sign(
        {
          userId: decoded.userId,
          email: decoded.email,
          isAdmin: decoded.isAdmin
        },
        JWT_SECRET,
        { expiresIn: '24h' }
      );

      console.log('üîÑ Token refreshed for user:', decoded.email);

      res.json({
        success: true,
        message: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        token: newToken
      });

    } catch (jwtError) {
      console.error('‚ùå JWT verification error:', jwtError.message);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

  } catch (error) {
    console.error('‚ùå Refresh token error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
exports.getActivityChart = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    
    const { User, ToolUsage } = require('../config/database');
    const user = await User.findByPk(decoded.userId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const activityData = await ToolUsage.findAll({
      attributes: [
        [require('sequelize').fn('DATE', require('sequelize').col('createdAt')), 'date'],
        [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'usageCount']
      ],
      where: { 
        userId: decoded.userId,
        createdAt: {
          [require('sequelize').Op.gte]: thirtyDaysAgo
        }
      },
      group: [require('sequelize').fn('DATE', require('sequelize').col('createdAt'))],
      order: [[require('sequelize').fn('DATE', require('sequelize').col('createdAt')), 'ASC']],
      raw: true
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–Ω–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const chartData = [];
    for (let i = 29; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];
      
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
      const dayData = activityData.find(item => item.date === dateStr);
      
      chartData.push({
        date: dateStr,
        usageCount: dayData ? parseInt(dayData.usageCount) : 0
      });
    }

    res.json({
      success: true,
      data: chartData
    });

  } catch (error) {
    console.error('‚ùå Get activity chart error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
exports.getTopTools = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    
    const { User, ToolUsage } = require('../config/database');
    const user = await User.findByPk(decoded.userId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const topToolsData = await ToolUsage.findAll({
      attributes: [
        'toolName',
        [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'count']
      ],
      where: { userId: decoded.userId },
      group: ['toolName'],
      order: [[require('sequelize').fn('COUNT', require('sequelize').col('id')), 'DESC']],
      limit: 5,
      raw: true
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const totalUsage = topToolsData.reduce((sum, tool) => sum + parseInt(tool.count), 0);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    const formattedData = topToolsData.map(tool => ({
      name: tool.toolName,
      count: parseInt(tool.count),
      percentage: totalUsage > 0 ? Math.round((parseInt(tool.count) / totalUsage) * 100) : 0
    }));

    res.json({
      success: true,
      data: formattedData
    });

  } catch (error) {
    console.error('‚ùå Get top tools error:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};
