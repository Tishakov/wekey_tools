console.log("üöÄ Backend: –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ app.js –Ω–∞—á–∞—Ç");

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≤—É—à–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
process.on("uncaughtException", (err) => {
  console.error("‚ùå Uncaught Exception:", err);
  console.error("Stack:", err.stack);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Unhandled Rejection:", reason);
  console.error("Promise:", promise);
});

const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const passport = require('passport');

// –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ middleware –ø–æ–∫–∞
// const helmet = require('helmet');
// const compression = require('compression');
// const morgan = require('morgan');
// const rateLimit = require('express-rate-limit');

console.log("üì¶ –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

const config = require('./config/config');
console.log("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Passport
require('./config/passport');
console.log("üîê Passport OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω");

const logger = require('./utils/logger');
console.log("üìù –õ–æ–≥–≥–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω");

// –£–ë–ò–†–ê–ï–ú process.exit(1) - –ø—É—Å—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception (but continuing):', error);
  // –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†: process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection (but continuing):', reason);
  // –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†: process.exit(1);
});

// –ò–º–ø–æ—Ä—Ç database - –ë–ï–ó process.exit(1)
console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
let sequelize = null;
try {
  const db = require('./config/database');
  sequelize = db.sequelize;
  console.log('‚úÖ Database connection imported successfully');
} catch (error) {
  console.error('‚ùå Failed to import database (but continuing):', error.message);
  // –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†: process.exit(1);
}

const app = express();

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CORS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const corsOptions = {
  origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept']
};

// –ë–∞–∑–æ–≤—ã–µ middleware (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
app.use(cors(corsOptions));
app.use(cookieParser()); // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä –∫—É–∫–∏—Å–æ–≤
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Passport
app.use(passport.initialize());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
app.use('/uploads', express.static('uploads'));

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url} - IP: ${req.ip}`);
  console.log('Headers:', req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('Body:', req.body);
  }
  next();
});

// –ò–º–ø–æ—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤
try {
  const authRoutes = require('./routes/auth');
  const oauthRoutes = require('./routes/oauth');
  const adminRoutes = require('./routes/admin');
  const statsRoutes = require('./routes/stats');
  const usersRoutes = require('./routes/users');
  const analyticsRoutes = require('./routes/analytics');
  const toolsRoutes = require('./routes/tools');
  const siteAuditRoutes = require('./routes/siteAudit');
  const seoAuditRoutes = require('./routes/seoAudit');

  app.use('/api/auth', authRoutes);
  app.use('/auth', oauthRoutes); // OAuth –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ /api –ø—Ä–µ—Ñ–∏–∫—Å–∞
  app.use('/api/admin', adminRoutes);
  app.use('/api/stats', statsRoutes);
  app.use('/api/analytics', analyticsRoutes); // –ü–æ–¥–∫–ª—é—á–∞–µ–º User tracking –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  app.use('/api/users', usersRoutes);
  app.use('/api', toolsRoutes); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
  app.use('/api/tools', siteAuditRoutes); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–æ–≤
  app.use('/api/tools', seoAuditRoutes); // –ü–æ–¥–∫–ª—é—á–∞–µ–º SEO –∞—É–¥–∏—Ç
  
  console.log('‚úÖ All routes registered successfully');
} catch (error) {
  console.error('‚ùå Failed to register routes:', error);
}

// Health check –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/health', (req, res) => {
  console.log('Health check requested');
  try {
    const response = { 
      status: 'OK', 
      timestamp: new Date().toISOString(),
      environment: config.NODE_ENV || 'development',
      version: '1.0.0',
      database: sequelize ? 'connected' : 'not_connected',
      uptime: process.uptime()
    };
    
    console.log('Health check response:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Health check error:', error);
    res.status(500).json({
      status: 'ERROR',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Stats endpoint - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã —Å JSON —Ç–µ–ª–æ–º
app.post('/api/stats/increment', (req, res) => {
  console.log("Stats increment request:", req.body);
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –∏ –¥–∞–Ω–Ω—ã–µ
    const response = { 
      success: true, 
      data: req.body 
    };
    
    console.log('Stats response:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Stats error:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message
    });
  }
});

// Admin login endpoint
app.post('/api/auth/login', (req, res) => {
  console.log("Admin login request:", req.body);
  try {
    const { email, password } = req.body;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ
    if (email === 'admin@wekey.tools' && password === 'admin123') {
      const response = {
        success: true,
        token: 'demo-admin-token-' + Date.now(),
        user: {
          id: 1,
          email: 'admin@wekey.tools',
          role: 'admin'
        }
      };
      
      console.log('Admin login successful:', response);
      res.json(response);
    } else {
      console.log('Admin login failed: invalid credentials');
      res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }
  } catch (error) {
    console.error('‚ùå Admin login error:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message
    });
  }
});

// Admin stats endpoint
app.get('/api/admin/stats', (req, res) => {
  console.log("Admin stats request");
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ)
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer demo-admin-token')) {
      return res.status(401).json({
        success: false,
        message: 'Unauthorized'
      });
    }
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    const response = {
      success: true,
      stats: {
        totalUsage: 1247,
        users: {
          totalUsers: 156,
          activeToday: 23,
          newThisWeek: 8
        },
        toolUsage: [
          {
            toolName: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
            usageCount: 324,
            lastUsed: new Date().toISOString()
          },
          {
            toolName: '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
            usageCount: 289,
            lastUsed: new Date(Date.now() - 1000 * 60 * 30).toISOString()
          },
          {
            toolName: '–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è',
            usageCount: 201,
            lastUsed: new Date(Date.now() - 1000 * 60 * 60).toISOString()
          },
          {
            toolName: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-–º–µ—Ç–æ–∫',
            usageCount: 187,
            lastUsed: new Date(Date.now() - 1000 * 60 * 90).toISOString()
          },
          {
            toolName: '–¢–µ–∫—Å—Ç –≤ HTML',
            usageCount: 156,
            lastUsed: new Date(Date.now() - 1000 * 60 * 120).toISOString()
          }
        ]
      }
    };
    
    console.log('Admin stats response:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Admin stats error:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message
    });
  }
});

// Admin reset stats endpoint
app.post('/api/admin/reset-stats', (req, res) => {
  console.log("Admin reset stats request");
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ)
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer demo-admin-token')) {
      return res.status(401).json({
        success: false,
        message: 'Unauthorized'
      });
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    // –ü–æ–∫–∞ —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    console.log("üîÑ –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—á–∏—Å—Ç–∫–∞ –ë–î)");
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã:
    // await db.query('DELETE FROM tool_usage');
    // await db.query('DELETE FROM user_sessions');
    // await db.query('DELETE FROM analytics_data');
    
    const response = {
      success: true,
      message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞',
      timestamp: new Date().toISOString(),
      resetInfo: {
        toolUsageCleared: true,
        userStatsCleared: true,
        analyticsCleared: true
      }
    };
    
    console.log('Admin reset response:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Admin reset error:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤
app.use('*', (req, res) => {
  console.log(`404 - Route not found: ${req.method} ${req.url}`);
  res.status(404).json({
    success: false,
    message: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    timestamp: new Date().toISOString()
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler - –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†
app.use((err, req, res, next) => {
  console.error('‚ùå Global Error Handler:', err);
  console.error('Stack:', err.stack);
  
  res.status(err.status || 500).json({ 
    success: false,
    error: 'Internal server error',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const PORT = config.PORT || 8880;

console.log("üì° –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
const server = app.listen(PORT, '127.0.0.1', () => {
  console.log(`üöÄ Wekey Tools Backend (Fixed) –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –†–µ–∂–∏–º: ${config.NODE_ENV || 'development'}`);
  console.log(`üîó Health check: http://127.0.0.1:${PORT}/health`);
  console.log(`üìà Stats test: curl -X POST http://127.0.0.1:${PORT}/api/stats/increment -H "Content-Type: application/json" -d "{\\"toolName\\":\\"test\\"}"`);
  console.log('üîç Server listening state:', server.listening);
  console.log('üîç Server address:', server.address());
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≥–¥–µ –ø–∞–¥–∞–µ—Ç
  console.log('‚úÖ Server callback completed - server should be running!');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => {
    console.log('üîç After 1 second - server still running:', server.listening);
    console.log('üîç Process still alive:', process.pid);
  }, 1000);
});

server.on('error', (err) => {
  console.error('‚ùå Server error (but not exiting):', err);
  // –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†: process.exit(1);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –ù–ï –£–ë–ò–í–ê–ï–ú –°–ï–†–í–ï–†
process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception (but not exiting):', err);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection (but not exiting):', reason);
});

// Graceful shutdown –ë–ï–ó process.exit
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Server closed');
  });
});

module.exports = app;