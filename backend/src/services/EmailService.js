const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    this.transporter = null;
    this.provider = process.env.EMAIL_PROVIDER || 'console';
    this.initTransporter();
  }

  async initTransporter() {
    console.log(`üìß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${this.provider.toUpperCase()}`);
    
    try {
      switch (this.provider) {
        case 'console':
          this.initConsoleTransporter();
          break;
        case 'gmail':
          await this.initGmailTransporter();
          break;
        case 'mailtrap':
          await this.initMailtrapTransporter();
          break;
        case 'sendgrid':
          await this.initSendGridTransporter();
          break;
        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${this.provider}, –∏—Å–ø–æ–ª—å–∑—É–µ–º console`);
          this.initConsoleTransporter();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      if (this.provider !== 'console' && this.transporter.verify) {
        await this.testConnection();
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${this.provider}:`, error.message);
      console.log('üìß –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
      this.initConsoleTransporter();
    }
  }

  initConsoleTransporter() {
    console.log('üìß –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
    this.transporter = {
      sendMail: async (options) => {
        console.log('\nüìß ======================');
        console.log('üìß –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò EMAIL');
        console.log('üìß ======================');
        console.log('üìß To:', options.to);
        console.log('üìß Subject:', options.subject);
        console.log('üìß Text:');
        console.log(options.text);
        console.log('üìß ======================\n');
        
        return {
          messageId: 'console-' + Date.now(),
          to: options.to,
          subject: options.subject
        };
      },
      verify: async () => true
    };
  }

  async initGmailTransporter() {
    if (!process.env.GMAIL_USER || !process.env.GMAIL_PASS) {
      throw new Error('Gmail credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GMAIL_USER –∏ GMAIL_PASS');
    }

    this.transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_PASS // App Password
      },
      secure: true,
      timeout: parseInt(process.env.EMAIL_TIMEOUT) || 10000
    });

    console.log('üìß Gmail SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  async initMailtrapTransporter() {
    if (!process.env.MAILTRAP_USER || !process.env.MAILTRAP_PASS) {
      throw new Error('Mailtrap credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MAILTRAP_USER –∏ MAILTRAP_PASS');
    }

    this.transporter = nodemailer.createTransporter({
      host: process.env.MAILTRAP_HOST || 'live.smtp.mailtrap.io',
      port: parseInt(process.env.MAILTRAP_PORT) || 587,
      secure: process.env.EMAIL_SECURE !== 'false', // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
      auth: {
        user: process.env.MAILTRAP_USER,
        pass: process.env.MAILTRAP_PASS
      },
      timeout: parseInt(process.env.EMAIL_TIMEOUT) || 10000
    });

    console.log('üìß Mailtrap SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  async initSendGridTransporter() {
    if (!process.env.SENDGRID_API_KEY) {
      throw new Error('SendGrid API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SENDGRID_API_KEY');
    }

    // SendGrid —á–µ—Ä–µ–∑ nodemailer
    this.transporter = nodemailer.createTransporter({
      host: 'smtp.sendgrid.net',
      port: 587,
      secure: false,
      auth: {
        user: 'apikey',
        pass: process.env.SENDGRID_API_KEY
      },
      timeout: parseInt(process.env.EMAIL_TIMEOUT) || 10000
    });

    console.log('üìß SendGrid SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  generateVerificationEmailHTML(verificationCode, userName = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
    return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email - Wekey Tools</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                line-height: 1.6;
                color: #333;
                background-color: #f4f4f4;
            }
            
            .email-container {
                max-width: 600px;
                margin: 20px auto;
                background: #ffffff;
                border-radius: 12px;
                overflow: hidden;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            }
            
            .header {
                background: linear-gradient(135deg, #5E35F2 0%, #F22987 100%);
                padding: 40px 30px;
                text-align: center;
            }
            
            .logo {
                color: white;
                font-size: 28px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            
            .header-subtitle {
                color: rgba(255, 255, 255, 0.9);
                font-size: 16px;
            }
            
            .content {
                padding: 40px 30px;
            }
            
            .greeting {
                font-size: 20px;
                font-weight: 600;
                color: #2d3748;
                margin-bottom: 20px;
            }
            
            .message {
                font-size: 16px;
                color: #4a5568;
                margin-bottom: 30px;
                line-height: 1.7;
            }
            
            .code-container {
                background: #f7fafc;
                border: 2px dashed #e2e8f0;
                border-radius: 12px;
                padding: 30px;
                text-align: center;
                margin: 30px 0;
            }
            
            .code-label {
                font-size: 14px;
                color: #718096;
                margin-bottom: 10px;
                text-transform: uppercase;
                letter-spacing: 1px;
                font-weight: 600;
            }
            
            .verification-code {
                font-size: 36px;
                font-weight: bold;
                color: #5E35F2;
                letter-spacing: 4px;
                font-family: 'Courier New', monospace;
            }
            
            .code-note {
                font-size: 14px;
                color: #a0aec0;
                margin-top: 15px;
            }
            
            .warning {
                background: #fef5e7;
                border-left: 4px solid #f6ad55;
                padding: 20px;
                margin: 30px 0;
                border-radius: 0 8px 8px 0;
            }
            
            .warning-text {
                font-size: 14px;
                color: #744210;
                margin: 0;
            }
            
            .footer {
                background: #f8f9fa;
                padding: 30px;
                text-align: center;
                border-top: 1px solid #e2e8f0;
            }
            
            .footer-text {
                font-size: 14px;
                color: #6c757d;
                margin-bottom: 15px;
            }
            
            .social-links {
                margin-top: 20px;
            }
            
            .social-links a {
                display: inline-block;
                margin: 0 10px;
                color: #6c757d;
                text-decoration: none;
                font-size: 14px;
            }
            
            .social-links a:hover {
                color: #5E35F2;
            }
            
            @media (max-width: 600px) {
                .email-container {
                    margin: 10px;
                    border-radius: 8px;
                }
                
                .header {
                    padding: 30px 20px;
                }
                
                .content {
                    padding: 30px 20px;
                }
                
                .verification-code {
                    font-size: 28px;
                    letter-spacing: 3px;
                }
                
                .footer {
                    padding: 20px;
                }
            }
        </style>
    </head>
    <body>
        <div class="email-container">
            <div class="header">
                <div class="logo">Wekey Tools</div>
                <div class="header-subtitle">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è SEO –∏ –≤–µ–±-–º–∞—Å—Ç–µ—Ä–æ–≤</div>
            </div>
            
            <div class="content">
                <div class="greeting">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üëã</div>
                
                <div class="message">
                    –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Wekey Tools! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –Ω–∏–∂–µ:
                </div>
                
                <div class="code-container">
                    <div class="code-label">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                    <div class="verification-code">${verificationCode}</div>
                    <div class="code-note">–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                </div>
                
                <div class="message">
                    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <strong>100 –±–æ–Ω—É—Å–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤</strong> –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤! üéâ
                </div>
                
                <div class="warning">
                    <p class="warning-text">
                        <strong>–í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ Wekey Tools, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                    </p>
                </div>
            </div>
            
            <div class="footer">
                <div class="footer-text">
                    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                    –ö–æ–º–∞–Ω–¥–∞ Wekey Tools
                </div>
                
                <div class="social-links">
                    <a href="mailto:support@wekeytools.com">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
                    <a href="#">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
                    <a href="#">–û—Ç–ø–∏—Å–∞—Ç—å—Å—è</a>
                </div>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  async sendVerificationEmail(email, verificationCode, userName) {
    try {
      const htmlContent = this.generateVerificationEmailHTML(verificationCode, userName);
      
      const mailOptions = {
        from: {
          name: 'Wekey Tools',
          address: process.env.EMAIL_FROM || 'noreply@wekeytools.com'
        },
        to: email,
        subject: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email - –ö–æ–¥: ${verificationCode}`,
        html: htmlContent,
        text: `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wekey Tools!

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationCode}

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.

–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –±–æ–Ω—É—Å–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Wekey Tools
        `.trim()
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('Email sent successfully:', {
        messageId: result.messageId,
        to: email,
        subject: mailOptions.subject
      });
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('Failed to send verification email:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async testConnection() {
    try {
      await this.transporter.verify();
      console.log('Email service connection successful');
      return true;
    } catch (error) {
      console.error('Email service connection failed:', error);
      return false;
    }
  }
}

module.exports = new EmailService();