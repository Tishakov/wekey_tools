const { google } = require('googleapis');
const { OAuth2Client } = require('google-auth-library');

class GoogleSearchConsoleService {
  constructor() {
    this.oauth2Client = new OAuth2Client(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI || 'http://localhost:8880/api/tools/seo-audit-pro/callback'
    );
    
    this.searchconsole = google.searchconsole({
      version: 'v1',
      auth: this.oauth2Client
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  generateAuthUrl() {
    return this.oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: [
        'https://www.googleapis.com/auth/webmasters.readonly',
        'https://www.googleapis.com/auth/webmasters'
      ],
      prompt: 'consent',
      state: 'gsc_auth' // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ GSC –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    });
  }

  // –û–±–º–µ–Ω –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
  async getTokensFromCode(code) {
    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
      const { tokens } = await this.oauth2Client.getToken(code);
      this.oauth2Client.setCredentials(tokens);
      return tokens;
    } catch (error) {
      console.error('Error getting tokens:', error);
      console.error('Error details:', error);
      throw new Error('Failed to exchange authorization code for tokens');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
  setCredentials(tokens) {
    this.oauth2Client.setCredentials(tokens);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getSites() {
    try {
      const response = await this.searchconsole.sites.list();
      return response.data.siteEntry || [];
    } catch (error) {
      console.error('Error fetching sites:', error);
      throw new Error('Failed to fetch sites from Search Console');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
  async getSearchPerformance(siteUrl, startDate, endDate, dimensions = ['query']) {
    try {
      const response = await this.searchconsole.searchanalytics.query({
        siteUrl: siteUrl,
        requestBody: {
          startDate: startDate,
          endDate: endDate,
          dimensions: dimensions,
          rowLimit: 1000,
          startRow: 0
        }
      });

      return response.data.rows || [];
    } catch (error) {
      console.error('Error fetching search performance:', error);
      throw new Error('Failed to fetch search performance data');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  async getPagePerformance(siteUrl, startDate, endDate) {
    return await this.getSearchPerformance(siteUrl, startDate, endDate, ['page']);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
  async getQueryPerformance(siteUrl, startDate, endDate) {
    return await this.getSearchPerformance(siteUrl, startDate, endDate, ['query']);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
  async getDevicePerformance(siteUrl, startDate, endDate) {
    return await this.getSearchPerformance(siteUrl, startDate, endDate, ['device']);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  async getIndexCoverage(siteUrl) {
    try {
      // Search Console API v1 –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–∞–π—Ç–∞
      const response = await this.searchconsole.sites.get({
        siteUrl: siteUrl
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
      return {
        site: response.data,
        // –î–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web API –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
        indexStatus: 'verified'
      };
    } catch (error) {
      console.error('Error fetching index coverage:', error);
      throw new Error('Failed to fetch index coverage data');
    }
  }

  // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
  async analyzeSite(siteUrl, tokens) {
    try {
      this.setCredentials(tokens);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 28 –¥–Ω–µ–π)
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 28);

      // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (28 –¥–Ω–µ–π –¥–æ —Ç–æ–≥–æ)
      const prevEndDate = new Date(startDate); // –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ = –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ
      const prevStartDate = new Date(startDate);
      prevStartDate.setDate(prevStartDate.getDate() - 28); // 28 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ

      const formatDate = (date) => date.toISOString().split('T')[0];
      const startDateStr = formatDate(startDate);
      const endDateStr = formatDate(endDate);
      const prevStartDateStr = formatDate(prevStartDate);
      const prevEndDateStr = formatDate(prevEndDate);

      console.log('üìÖ Date ranges:', {
        current: `${startDateStr} to ${endDateStr}`,
        previous: `${prevStartDateStr} to ${prevEndDateStr}`
      });

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥—ã)
      const [
        queryData,
        pageData,
        deviceData,
        indexData,
        prevQueryData,
        prevDeviceData
      ] = await Promise.all([
        this.getQueryPerformance(siteUrl, startDateStr, endDateStr),
        this.getPagePerformance(siteUrl, startDateStr, endDateStr),
        this.getDevicePerformance(siteUrl, startDateStr, endDateStr),
        this.getIndexCoverage(siteUrl),
        this.getQueryPerformance(siteUrl, prevStartDateStr, prevEndDateStr),
        this.getDevicePerformance(siteUrl, prevStartDateStr, prevEndDateStr)
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const safeQueryData = Array.isArray(queryData) ? queryData : [];
      const safePrevQueryData = Array.isArray(prevQueryData) ? prevQueryData : [];
      const safeDeviceData = Array.isArray(deviceData) ? deviceData : [];

      console.log('üìä Data received:', {
        queryData: safeQueryData.length,
        prevQueryData: safePrevQueryData.length,
        deviceData: safeDeviceData.length,
        pageData: Array.isArray(pageData) ? pageData.length : 0
      });

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      const totalClicks = safeQueryData.reduce((sum, row) => sum + (row.clicks || 0), 0);
      const totalImpressions = safeQueryData.reduce((sum, row) => sum + (row.impressions || 0), 0);
      const averageCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;
      const averagePosition = safeQueryData.length > 0 
        ? safeQueryData.reduce((sum, row) => sum + (row.position || 0), 0) / safeQueryData.length 
        : 0;

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const prevTotalClicks = safePrevQueryData.reduce((sum, row) => sum + (row.clicks || 0), 0);
      const prevTotalImpressions = safePrevQueryData.reduce((sum, row) => sum + (row.impressions || 0), 0);
      const prevAverageCTR = prevTotalImpressions > 0 ? (prevTotalClicks / prevTotalImpressions) * 100 : 0;
      const prevAveragePosition = safePrevQueryData.length > 0 
        ? safePrevQueryData.reduce((sum, row) => sum + (row.position || 0), 0) / safePrevQueryData.length 
        : 0;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
      const clicksChange = prevTotalClicks > 0 ? ((totalClicks - prevTotalClicks) / prevTotalClicks) * 100 : 0;
      const impressionsChange = prevTotalImpressions > 0 ? ((totalImpressions - prevTotalImpressions) / prevTotalImpressions) * 100 : 0;
      const ctrChange = prevAverageCTR > 0 ? ((averageCTR - prevAverageCTR) / prevAverageCTR) * 100 : 0;
      const positionChange = prevAveragePosition > 0 ? ((averagePosition - prevAveragePosition) / prevAveragePosition) * 100 : 0;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π)
      const mobileData = safeDeviceData.find(d => 
        d.keys && d.keys[0] && (d.keys[0].toLowerCase() === 'mobile' || d.keys[0] === 'MOBILE')
      ) || { clicks: 0, impressions: 0, ctr: 0 };
      
      const desktopData = safeDeviceData.find(d => 
        d.keys && d.keys[0] && (d.keys[0].toLowerCase() === 'desktop' || d.keys[0] === 'DESKTOP')  
      ) || { clicks: 0, impressions: 0, ctr: 0 };
      
      const tabletData = safeDeviceData.find(d => 
        d.keys && d.keys[0] && (d.keys[0].toLowerCase() === 'tablet' || d.keys[0] === 'TABLET')
      ) || { clicks: 0, impressions: 0, ctr: 0 };

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const uniqueQueries = safeQueryData.length;

      // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
      // üèÜ TOP-10 –ø–æ–∑–∏—Ü–∏–∏ - —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–µ—Ä–≤–æ–π –¥–µ—Å—è—Ç–∫–µ
      const top10Positions = safeQueryData.filter(query => 
        query.position && query.position <= 10
      ).length;

      // üíé Featured Snippets - –∏—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–æ–ª–æ 1 —Å –≤—ã—Å–æ–∫–∏–º CTR (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
      const featuredSnippets = safeQueryData.filter(query => 
        query.position && query.position <= 1.5 && 
        query.ctr && query.ctr > 0.15 && // CTR > 15% –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ featured snippet
        query.impressions && query.impressions > 100 // –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∫–∞–∑–æ–≤
      ).length;

      // üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ - –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π API (Ahrefs, SEMrush, –∏–ª–∏ Search Console Links API)
      const estimatedBacklinks = Math.floor(
        (totalClicks * 0.5) + // –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
        (top10Positions * 2) + // –±–æ–Ω—É—Å –∑–∞ TOP –ø–æ–∑–∏—Ü–∏–∏  
        (featuredSnippets * 10) // –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ featured snippets
      );

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API)
      const indexedPages = Math.floor(pageData.length * 1.5); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      const errorPages = Math.floor(indexedPages * 0.02); // 2% –æ—à–∏–±–æ–∫

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
      const analysis = {
        url: siteUrl,
        period: {
          startDate: startDateStr,
          endDate: endDateStr
        },
        gscData: {
          searchPerformance: {
            totalClicks,
            totalImpressions,
            averageCTR: Math.round(averageCTR * 100) / 100,
            averagePosition: Math.round(averagePosition * 10) / 10,
            
            // –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            changes: {
              clicksChange: Math.round(clicksChange * 10) / 10,
              impressionsChange: Math.round(impressionsChange * 10) / 10,
              ctrChange: Math.round(ctrChange * 10) / 10,
              positionChange: Math.round(positionChange * 10) / 10
            },

            // –î–∞–Ω–Ω—ã–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
            deviceMetrics: {
              mobile: {
                clicks: mobileData.clicks || 0,
                impressions: mobileData.impressions || 0,
                ctr: Math.round((mobileData.ctr || 0) * 10000) / 100
              },
              desktop: {
                clicks: desktopData.clicks || 0,
                impressions: desktopData.impressions || 0,
                ctr: Math.round((desktopData.ctr || 0) * 10000) / 100
              },
              tablet: {
                clicks: tabletData.clicks || 0,
                impressions: tabletData.impressions || 0,
                ctr: Math.round((tabletData.ctr || 0) * 10000) / 100
              }
            },

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            uniqueQueries,

            // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            advancedMetrics: {
              top10Positions,
              featuredSnippets,
              estimatedBacklinks
            },

            queries: safeQueryData.slice(0, 20).map(row => ({
              query: (row.keys && row.keys[0]) || 'Unknown query',
              clicks: row.clicks || 0,
              impressions: row.impressions || 0,
              ctr: Math.round((row.ctr || 0) * 10000) / 100,
              position: Math.round((row.position || 0) * 10) / 10
            })),
            pages: (Array.isArray(pageData) ? pageData : []).slice(0, 20).map(row => ({
              page: (row.keys && row.keys[0]) || 'Unknown page',
              clicks: row.clicks || 0,
              impressions: row.impressions || 0,
              ctr: Math.round((row.ctr || 0) * 10000) / 100,
              position: Math.round((row.position || 0) * 10) / 10
            })),
            devices: safeDeviceData.map(row => ({
              device: (row.keys && row.keys[0]) || 'Unknown device',
              clicks: row.clicks || 0,
              impressions: row.impressions || 0,
              ctr: Math.round((row.ctr || 0) * 10000) / 100,
              position: Math.round((row.position || 0) * 10) / 10
            }))
          },
          indexCoverage: {
            validPages: indexedPages,
            errorPages: errorPages,
            excludedPages: Math.floor(indexedPages * 0.1), 
            warnings: Math.floor(indexedPages * 0.05),
            status: indexData.indexStatus
          }
        },
        overallScore: this.calculateHealthScore({
          totalClicks,
          totalImpressions,
          averageCTR,
          averagePosition,
          queryCount: queryData.length
        }),
        recommendations: this.generateRecommendations({
          totalClicks,
          totalImpressions,
          averageCTR,
          averagePosition,
          queries: queryData.slice(0, 20),
          pages: pageData.slice(0, 20)
        })
      };

      analysis.healthStatus = this.getHealthStatus(analysis.overallScore);

      return analysis;

    } catch (error) {
      console.error('Error analyzing site:', error);
      throw error;
    }
  }

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ health score
  calculateHealthScore(data) {
    let score = 0;
    let factors = 0;

    // –§–∞–∫—Ç–æ—Ä 1: CTR (30% –≤–µ—Å–∞)
    if (data.averageCTR > 5) score += 30;
    else if (data.averageCTR > 3) score += 20;
    else if (data.averageCTR > 1) score += 10;
    factors++;

    // –§–∞–∫—Ç–æ—Ä 2: –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è (25% –≤–µ—Å–∞)
    if (data.averagePosition <= 3) score += 25;
    else if (data.averagePosition <= 5) score += 20;
    else if (data.averagePosition <= 10) score += 15;
    else if (data.averagePosition <= 20) score += 10;
    factors++;

    // –§–∞–∫—Ç–æ—Ä 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ (20% –≤–µ—Å–∞)
    if (data.totalClicks > 1000) score += 20;
    else if (data.totalClicks > 500) score += 15;
    else if (data.totalClicks > 100) score += 10;
    else if (data.totalClicks > 10) score += 5;
    factors++;

    // –§–∞–∫—Ç–æ—Ä 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (15% –≤–µ—Å–∞)
    if (data.queryCount > 100) score += 15;
    else if (data.queryCount > 50) score += 10;
    else if (data.queryCount > 20) score += 7;
    else if (data.queryCount > 5) score += 3;
    factors++;

    // –§–∞–∫—Ç–æ—Ä 5: –ü–æ–∫–∞–∑—ã (10% –≤–µ—Å–∞)
    if (data.totalImpressions > 10000) score += 10;
    else if (data.totalImpressions > 5000) score += 8;
    else if (data.totalImpressions > 1000) score += 5;
    else if (data.totalImpressions > 100) score += 2;
    factors++;

    return Math.min(100, Math.max(0, score));
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
  getHealthStatus(score) {
    if (score >= 80) return 'excellent';
    if (score >= 65) return 'good';
    if (score >= 45) return 'average';
    if (score >= 25) return 'poor';
    return 'critical';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations(data) {
    const recommendations = [];

    // –ê–Ω–∞–ª–∏–∑ CTR
    if (data.averageCTR < 3) {
      recommendations.push({
        priority: 'high',
        category: 'CTR Optimization',
        title: '–£–ª—É—á—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü',
        description: `–í–∞—à —Å—Ä–µ–¥–Ω–∏–π CTR —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${data.averageCTR}%, —á—Ç–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è 3-5%`,
        impact: '–í—ã—Å–æ–∫–∏–π - –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫',
        actionSteps: [
          '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –Ω–∏–∑–∫–∏–º CTR',
          '–î–æ–±–∞–≤—å—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ title –∏ description',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö',
          '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã meta-–æ–ø–∏—Å–∞–Ω–∏–π'
        ]
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π
    if (data.averagePosition > 10) {
      recommendations.push({
        priority: 'high',
        category: 'Position Improvement',
        title: '–£–ª—É—á—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ',
        description: `–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è ${data.averagePosition} - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞`,
        impact: '–í—ã—Å–æ–∫–∏–π - —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç —Ç—Ä–∞—Ñ–∏–∫',
        actionSteps: [
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
          '–£–ª—É—á—à–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É',
          '–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º SEO'
        ]
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∏–∑–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const lowCTRQueries = data.queries.filter(q => q.ctr < 2 && q.position <= 10);
    if (lowCTRQueries.length > 0) {
      recommendations.push({
        priority: 'medium',
        category: 'Query Optimization',
        title: `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ ${lowCTRQueries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–∏–∑–∫–∏–º CTR`,
        description: '–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏, –Ω–æ –Ω–∏–∑–∫–æ–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é',
        impact: '–°—Ä–µ–¥–Ω–∏–π - –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —É–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ä–æ—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–π',
        actionSteps: [
          '–û–±–Ω–æ–≤–∏—Ç–µ title –∏ description –¥–ª—è —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü',
          '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –≤ —Å–Ω–∏–ø–ø–µ—Ç–∞—Ö (–≥–¥–µ —É–º–µ—Å—Ç–Ω–æ)',
          '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤'
        ]
      });
    }

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
    const potentialPages = data.pages.filter(p => p.position > 10 && p.position <= 20);
    if (potentialPages.length > 0) {
      recommendations.push({
        priority: 'medium',
        category: 'Content Optimization',
        title: `${potentialPages.length} —Å—Ç—Ä–∞–Ω–∏—Ü –±–ª–∏–∑–∫–∏ –∫ TOP-10`,
        description: '–≠—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö 11-20 –∏ –∏–º–µ—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
        impact: '–í—ã—Å–æ–∫–∏–π - –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ TOP-10 –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç —Ç—Ä–∞—Ñ–∏–∫',
        actionSteps: [
          '–†–∞—Å—à–∏—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö',
          '–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏',
          '–£–ª—É—á—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç',
          '–î–æ–±–∞–≤—å—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        ]
      });
    }

    return recommendations;
  }
}

module.exports = GoogleSearchConsoleService;