const express = require('express');
const cors = require('cors');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
    console.error('‚ùå Uncaught Exception:', err);
    console.error('Stack:', err.stack);
    // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
});

const app = express();
const PORT = process.env.PORT || 8080;

app.use(express.json());
app.use(cors({
  origin: ['http://localhost:5173', 'http://127.0.0.1:5173'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let toolStats = {};
let totalUsage = 0;

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
let visitors = new Map(); // userId -> VisitorData
let analyticsEvents = []; // –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
let dailyStats = new Map(); // date -> { visitors: Set, toolUsers: Set }

// –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
let historicalData = new Map(); // date -> { visitors: number, toolUsers: number, usageCount: number }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getDateKey(date = new Date()) {
  return date.toISOString().split('T')[0];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
function generateHistoricalData() {
  const today = new Date();
  for (let i = 29; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);
    const dateKey = getDateKey(date);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const baseVisitors = Math.floor(Math.random() * 50) + 10; // 10-60 –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    const baseToolUsers = Math.floor(baseVisitors * (0.3 + Math.random() * 0.4)); // 30-70% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    const baseUsage = Math.floor(baseToolUsers * (1 + Math.random() * 3)); // 1-4 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    historicalData.set(dateKey, {
      visitors: baseVisitors,
      toolUsers: baseToolUsers,
      usageCount: baseUsage
    });
  }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (historicalData.size === 0) {
  generateHistoricalData();
  console.log('üìä [ANALYTICS] Generated historical data for', historicalData.size, 'days');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function getToolDisplayName(toolKey) {
  const displayNames = {
    'add_symbol_tool': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞',
    'analytics_tool': '–°–∫–≤–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
    'case_changer_tool': '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞',
    'char_counter_tool': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤',
    'duplicate_finder_tool': '–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
    'duplicate_removal_tool': '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
    'emoji_tool': '–≠–º–æ–¥–∑–∏',
    'empty_lines_removal_tool': '–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫',
    'find_replace_tool': '–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å',
    'match_types_tool': '–¢–∏–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
    'minus_words_tool': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤',
    'number_generator_tool': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª',
    'password_generator_tool': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π',
    'remove_line_breaks_tool': '–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤',
    'spaces_to_paragraphs_tool': '–ü—Ä–æ–±–µ–ª—ã –Ω–∞ –∞–±–∑–∞—Ü—ã',
    'synonym_generator_tool': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤',
    'text_by_columns_tool': '–¢–µ–∫—Å—Ç –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º',
    'text_generator_tool': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞',
    'text_optimizer_tool': '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞',
    'text_sorting_tool': '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫',
    'text_to_html_tool': '–¢–µ–∫—Å—Ç –≤ HTML',
    'transliteration_tool': '–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è',
    'utm_generator_tool': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-–º–µ—Ç–æ–∫',
    'word_gluing_tool': '–°–∫–ª–µ–π–∫–∞ —Å–ª–æ–≤',
    'word_inflection_tool': '–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤',
    'word_mixer_tool': '–ú–∏–∫—Å–∞—Ü–∏—è —Å–ª–æ–≤',
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'udalenie_pustyh_strok': '–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫',
    'izmeneniya_registra': '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞',
    'udalenie_dublikatov': '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
    'sortirovka_slov_i_strok': '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫',
    'nayti_i_zamenit': '–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å',
    'tekst_v_html': '–¢–µ–∫—Å—Ç –≤ HTML',
    'probeli_na_abzacy': '–ü—Ä–æ–±–µ–ª—ã –Ω–∞ –∞–±–∑–∞—Ü—ã',
    'utm_generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-–º–µ—Ç–æ–∫',
    'duplicate-finder': '–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
  };
  return displayNames[toolKey] || toolKey;
}

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', uptime: process.uptime() });
});

// Login endpoint (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock —Ç–æ–∫–µ–Ω)
app.post('/api/auth/login', (req, res) => {
  console.log('üîë [LOGIN] Request body:', JSON.stringify(req.body, null, 2));
  
  const { email, password } = req.body;
  console.log('üîë [LOGIN] Credentials check:', { email, password: '***' });
  
  if (email === 'admin@wekey.tools' && password === 'admin123') {
    const token = `mock-jwt-token-${Date.now()}`;
    console.log('‚úÖ [LOGIN] Authentication successful, token generated:', token);
    return res.json({ token });
  }
  
  console.log('‚ùå [LOGIN] Authentication failed - invalid credentials');
  res.status(401).json({ message: 'Invalid credentials' });
});

// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function authMiddleware(req, res, next) {
  console.log('üîí [AUTH] Request headers:', JSON.stringify(req.headers, null, 2));
  console.log('üîí [AUTH] Request body:', JSON.stringify(req.body, null, 2));
  
  const authHeader = req.headers.authorization;
  console.log('üîí [AUTH] Authorization header:', authHeader);
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    console.log('‚ùå [AUTH] Missing or invalid Bearer header format');
    return res.status(401).json({ success: false, message: 'Unauthorized' });
  }
  
  const token = authHeader.substring(7);
  console.log('üîí [AUTH] Extracted token:', token);

  const isValid = token === 'demo-admin-token' || token.startsWith('mock-jwt-token-');
  console.log('üîí [AUTH] Token validation:', { 
    token: token.substring(0, 20) + '...', 
    isDemoToken: token === 'demo-admin-token',
    isMockJwtToken: token.startsWith('mock-jwt-token-'),
    isValid 
  });
  
  if (!isValid) {
    console.log('‚ùå [AUTH] Token validation failed');
    return res.status(401).json({ success: false, message: 'Unauthorized token' });
  }
  
  console.log('‚úÖ [AUTH] Token validation successful');
  next();
}

// === ANALYTICS API ===

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
app.post('/api/analytics/visitor', (req, res) => {
  console.log('üìä [ANALYTICS] Visitor data received:', req.body);
  
  try {
    const visitorData = req.body;
    const userId = visitorData.userId;
    
    if (!userId) {
      return res.status(400).json({ success: false, message: 'Missing userId' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    visitors.set(userId, visitorData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const dateKey = getDateKey();
    if (!dailyStats.has(dateKey)) {
      dailyStats.set(dateKey, {
        visitors: new Set(),
        toolUsers: new Set()
      });
    }
    
    const todayStats = dailyStats.get(dateKey);
    todayStats.visitors.add(userId);
    
    if (visitorData.hasUsedTools) {
      todayStats.toolUsers.add(userId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    const currentHistorical = historicalData.get(dateKey) || { visitors: 0, toolUsers: 0, usageCount: 0 };
    historicalData.set(dateKey, {
      visitors: todayStats.visitors.size,
      toolUsers: todayStats.toolUsers.size,
      usageCount: currentHistorical.usageCount // usageCount –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
    });
    
    console.log('üìä [ANALYTICS] Visitor data saved for user:', userId);
    res.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå [ANALYTICS] Error saving visitor data:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.post('/api/analytics/event', (req, res) => {
  console.log('üìä [ANALYTICS] Event received:', req.body);
  
  try {
    const eventData = req.body;
    const { userId, event, data } = eventData;
    
    if (!userId || !event || !data) {
      return res.status(400).json({ success: false, message: 'Missing required fields' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    analyticsEvents.push({
      ...eventData,
      timestamp: new Date().toISOString()
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (event === 'tool_usage' && data.tool) {
      const dateKey = getDateKey();
      if (!dailyStats.has(dateKey)) {
        dailyStats.set(dateKey, {
          visitors: new Set(),
          toolUsers: new Set()
        });
      }
      
      const todayStats = dailyStats.get(dateKey);
      todayStats.toolUsers.add(userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
      const currentHistorical = historicalData.get(dateKey) || { visitors: 0, toolUsers: 0, usageCount: 0 };
      historicalData.set(dateKey, {
        visitors: currentHistorical.visitors,
        toolUsers: todayStats.toolUsers.size,
        usageCount: currentHistorical.usageCount + 1
      });
    }
    
    console.log('üìä [ANALYTICS] Event saved:', event, 'for user:', userId);
    res.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå [ANALYTICS] Error saving event:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
app.get('/api/analytics/stats', (req, res) => {
  console.log('üìä [PUBLIC] Analytics stats requested');
  
  try {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalVisitors = visitors.size;
    const toolUsers = Array.from(visitors.values()).filter(v => v.hasUsedTools).length;
    const totalEvents = analyticsEvents.length;
    const activeTools = new Set(analyticsEvents.map(e => e.toolId)).size;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    const conversionRate = totalVisitors > 0 ? (toolUsers / totalVisitors * 100).toFixed(1) : 0;
    
    res.json({
      success: true,
      data: {
        visitors: totalVisitors,
        users: toolUsers,
        usage: totalEvents,
        tools: activeTools,
        conversion: parseFloat(conversionRate),
        tokens: 1250 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
      }
    });
  } catch (error) {
    console.error('‚ùå [PUBLIC] Error getting analytics stats:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –ü—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
app.get('/api/analytics/history', (req, res) => {
  console.log('üìä [PUBLIC] Analytics history requested');
  
  try {
    res.json({
      success: true,
      data: historicalData
    });
  } catch (error) {
    console.error('‚ùå [PUBLIC] Error getting analytics history:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/api/admin/analytics', authMiddleware, (req, res) => {
  console.log('üìä [ADMIN] Analytics requested');
  
  try {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalVisitors = visitors.size;
    const toolUsers = Array.from(visitors.values()).filter(v => v.hasUsedTools).length;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const dateKey = getDateKey();
    const todayStats = dailyStats.get(dateKey) || { visitors: new Set(), toolUsers: new Set() };
    
    const analytics = {
      total: {
        visitors: totalVisitors,
        toolUsers: toolUsers,
        conversionRate: totalVisitors > 0 ? ((toolUsers / totalVisitors) * 100).toFixed(1) : 0
      },
      today: {
        visitors: todayStats.visitors.size,
        toolUsers: todayStats.toolUsers.size,
        conversionRate: todayStats.visitors.size > 0 ? 
          ((todayStats.toolUsers.size / todayStats.visitors.size) * 100).toFixed(1) : 0
      },
      events: analyticsEvents.length
    };
    
    console.log('üìä [ADMIN] Returning analytics:', analytics);
    res.json({ success: true, analytics });
    
  } catch (error) {
    console.error('‚ùå [ADMIN] Error getting analytics:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
app.get('/api/admin/analytics/historical', authMiddleware, (req, res) => {
  console.log('üìä [ADMIN] Historical analytics requested');
  
  try {
    const { startDate, endDate } = req.query;
    
    // –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const end = endDate ? new Date(endDate) : new Date();
    const start = startDate ? new Date(startDate) : new Date(end.getTime() - 29 * 24 * 60 * 60 * 1000);
    
    const result = [];
    const currentDate = new Date(start);
    
    while (currentDate <= end) {
      const dateKey = getDateKey(currentDate);
      const data = historicalData.get(dateKey) || { visitors: 0, toolUsers: 0, usageCount: 0 };
      
      result.push({
        date: dateKey,
        visitors: data.visitors,
        toolUsers: data.toolUsers,
        usageCount: data.usageCount,
        conversionRate: data.visitors > 0 ? ((data.toolUsers / data.visitors) * 100).toFixed(1) : 0
      });
      
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    console.log('üìä [ADMIN] Returning historical data:', result.length, 'days');
    res.json({ success: true, data: result });
    
  } catch (error) {
    console.error('‚ùå [ADMIN] Error getting historical analytics:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// === EXISTING ENDPOINTS ===

// Admin stats
app.get('/api/admin/stats', authMiddleware, (req, res) => {
  console.log('üìä [ADMIN] Admin stats requested');
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  const displayStats = {};
  Object.entries(toolStats).forEach(([toolKey, data]) => {
    const displayName = getToolDisplayName(toolKey);
    displayStats[displayName] = {
      count: data.count,
      lastUsed: data.lastUsed,
      originalKey: toolKey // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    };
  });
  
  console.log('üìä [ADMIN] Returning stats with display names:', Object.keys(displayStats));
  
  res.json({ 
    success: true, 
    stats: displayStats, 
    totalUsage 
  });
});

// Reset stats
app.post('/api/admin/reset-stats', authMiddleware, (req, res) => {
  const hasData = Object.keys(toolStats).some(k => toolStats[k].count > 0);
  if (!hasData) {
    return res.json({ success: true, message: 'stats already empty' });
  }

  Object.keys(toolStats).forEach(k => {
    toolStats[k].count = 0;
    toolStats[k].lastUsed = new Date().toISOString();
  });
  totalUsage = 0;

  res.json({
    success: true,
    message: 'stats cleared',
    timestamp: new Date().toISOString()
  });
});

// Stats increment endpoint –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
app.post('/api/stats/increment', (req, res) => {
  console.log('üìà [STATS] Stats increment request:', JSON.stringify(req.body, null, 2));
  
  const { toolName, toolId } = req.body;
  const key = toolId || toolName; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  
  if (!key) {
    console.log('‚ùå [STATS] Missing toolName or toolId');
    return res.status(400).json({ 
      success: false, 
      message: 'toolName or toolId is required' 
    });
  }
  
  console.log(`üìä [STATS] Incrementing stats for: ${key}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!toolStats[key]) {
    toolStats[key] = { count: 0, lastUsed: new Date().toISOString() };
    console.log(`üÜï [STATS] Created new tool entry: ${key}`);
  }
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
  toolStats[key].count += 1;
  toolStats[key].lastUsed = new Date().toISOString();
  totalUsage += 1;
  
  console.log(`‚úÖ [STATS] Updated stats for ${key}:`, {
    count: toolStats[key].count,
    totalUsage,
    lastUsed: toolStats[key].lastUsed
  });
  
  res.json({
    success: true,
    message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
    toolName: getToolDisplayName(key),
    count: toolStats[key].count,
    totalUsage,
    timestamp: new Date().toISOString()
  });
});

// Get stats for specific tool
app.get('/api/stats/tool/:toolName', (req, res) => {
  console.log('üìä [STATS] Get tool stats request for:', req.params.toolName);
  
  const toolName = req.params.toolName;
  const stats = toolStats[toolName];
  
  if (!stats) {
    console.log(`üìä [STATS] No stats found for ${toolName}, returning 0`);
    return res.json({
      success: true,
      toolName: toolName,
      displayName: getToolDisplayName(toolName),
      count: 0,
      lastUsed: null
    });
  }
  
  console.log(`üìä [STATS] Found stats for ${toolName}:`, stats);
  
  res.json({
    success: true,
    toolName: toolName,
    displayName: getToolDisplayName(toolName),
    count: stats.count,
    lastUsed: stats.lastUsed
  });
});

const server = app.listen(PORT, '127.0.0.1', () => {
  console.log(`‚úÖ Server running on http://127.0.0.1:${PORT}`);
  console.log(`üìç Health check: http://127.0.0.1:${PORT}/health`);
  console.log(`üìä Admin login: http://127.0.0.1:${PORT}/api/auth/login`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
  setTimeout(() => {
    console.log('‚úÖ Server is still running after 1 second');
    console.log('üîç Server address:', server.address());
  }, 1000);
}).on('error', (err) => {
  console.error('‚ùå Server error:', err);
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} is already in use. Try a different port.`);
  }
  process.exit(1);
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.stdin.resume();

console.log('üîß Server setup completed, app.listen() called');