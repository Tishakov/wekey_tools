const express = require('express');
const passport = require('passport');
const jwt = require('jsonwebtoken');
const config = require('../config/config');
const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è OAuth —Å Google
router.get('/google', (req, res, next) => {
  console.log('üöÄ OAuth: Initiation request received');
  console.log('üîç Request headers:', req.headers);
  console.log('üîç Request URL:', req.url);
  next();
}, passport.authenticate('google', {
  scope: ['profile', 'email']
}));

// Callback –ø–æ—Å–ª–µ OAuth
router.get('/google/callback', (req, res, next) => {
  console.log('üîÑ OAuth: Callback received from Google');
  console.log('üîç Callback URL:', req.url);
  console.log('üîç Callback query:', req.query);
  next();
}, passport.authenticate('google', { session: false }),
  async (req, res) => {
    try {
      const user = req.user;
      
      if (!user) {
        return res.redirect(`${config.cors.origin}/auth?error=oauth_failed`);
      }

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å auth controller)
      const token = jwt.sign(
        { 
          userId: user.id, 
          email: user.email,
          role: user.role 
        },
        config.jwt.secret,
        { expiresIn: config.jwt.expiresIn }
      );

      // –°–æ–∑–¥–∞–µ–º refresh token
      const refreshToken = jwt.sign(
        { userId: user.id },
        config.jwt.secret,
        { expiresIn: config.jwt.refreshExpiresIn }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
      user.lastLogin = new Date();
      await user.save();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      const userDataForFrontend = {
        id: user.id,
        email: user.email,
        name: user.name || user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: user.avatar || null,
        role: user.role,
        isGoogleUser: user.isGoogleUser
      };

      console.log('üîç User data for frontend:', userDataForFrontend);

      // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ frontend —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ URL (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
      const redirectUrl = `${config.cors.origin}/auth/callback?token=${token}&refresh=${refreshToken}&user=${encodeURIComponent(JSON.stringify(userDataForFrontend))}`;

      console.log('üîó OAuth Callback: Redirecting to:', redirectUrl);
      console.log('üîó CORS origin:', config.cors.origin);
      console.log('‚úÖ OAuth: User authenticated successfully:', user.email);

      res.redirect(redirectUrl);
    } catch (error) {
      console.error('OAuth Callback Error:', error);
      res.redirect(`${config.cors.origin}/auth?error=callback_error`);
    }
  }
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OAuth
router.get('/status', passport.authenticate('jwt', { session: false }), (req, res) => {
  res.json({
    success: true,
    user: {
      id: req.user.id,
      email: req.user.email,
      name: req.user.name,
      avatar: req.user.avatar,
      role: req.user.role,
      isGoogleUser: req.user.isGoogleUser
    }
  });
});

// –û—Ç–≤—è–∑–∫–∞ Google –∞–∫–∫–∞—É–Ω—Ç–∞
router.post('/google/unlink', passport.authenticate('jwt', { session: false }), async (req, res) => {
  try {
    const user = req.user;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –±–µ–∑ Google
    if (!user.password && user.isGoogleUser) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å Google –∞–∫–∫–∞—É–Ω—Ç. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å.'
      });
    }

    // –û—Ç–≤—è–∑—ã–≤–∞–µ–º Google
    user.googleId = null;
    user.isGoogleUser = false;
    await user.save();

    res.json({
      success: true,
      message: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    });
  } catch (error) {
    console.error('Google Unlink Error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞'
    });
  }
});

module.exports = router;