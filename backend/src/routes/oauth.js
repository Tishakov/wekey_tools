const express = require('express');
const passport = require('passport');
const jwt = require('jsonwebtoken');
const config = require('../config/config');
const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è OAuth —Å Google
router.get('/google', (req, res, next) => {
  console.log('üöÄ OAuth: Initiation request received');
  console.log('üîç Request headers:', req.headers);
  console.log('üîç Request URL:', req.url);
  next();
}, passport.authenticate('google', {
  scope: ['profile', 'email']
}));

// Callback –ø–æ—Å–ª–µ OAuth (–¥–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
router.get('/google/callback', (req, res, next) => {
  console.log('üîÑ OAuth: Callback received from Google');
  console.log('üîç Callback URL:', req.url);
  console.log('üîç Callback query:', req.query);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ GSC –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (req.query.state === 'gsc_auth') {
    // –≠—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Google Search Console
    const { code, error } = req.query;
    
    if (error) {
      return res.redirect(`http://localhost:5173/gsc-callback.html?error=${encodeURIComponent(error)}`);
    }
    
    if (!code) {
      return res.redirect(`http://localhost:5173/gsc-callback.html?error=no_code`);
    }

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ GSC —Å –∫–æ–¥–æ–º
    return res.redirect(`http://localhost:5173/gsc-callback.html?code=${encodeURIComponent(code)}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
  if (req.query.state && req.query.state.startsWith('connect_')) {
    // –≠—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return handleGoogleConnect(req, res, next);
  }
  
  // –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  next();
}, passport.authenticate('google', { session: false }),
  async (req, res) => {
    try {
      const user = req.user;
      
      if (!user) {
        return res.redirect(`${config.cors.origin}/auth?error=oauth_failed`);
      }

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å auth controller)
      const token = jwt.sign(
        { 
          userId: user.id, 
          email: user.email,
          role: user.role 
        },
        config.jwt.secret,
        { expiresIn: config.jwt.expiresIn }
      );

      // –°–æ–∑–¥–∞–µ–º refresh token
      const refreshToken = jwt.sign(
        { userId: user.id },
        config.jwt.secret,
        { expiresIn: config.jwt.refreshExpiresIn }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
      user.lastLogin = new Date();
      await user.save();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      const userDataForFrontend = {
        id: user.id,
        email: user.email,
        name: user.name || user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: user.avatar || null,
        role: user.role,
        isGoogleUser: user.isGoogleUser
      };

      console.log('üîç User data for frontend:', userDataForFrontend);

      // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ frontend —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ URL (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
      const redirectUrl = `${config.cors.origin}/auth/callback?token=${token}&refresh=${refreshToken}&user=${encodeURIComponent(JSON.stringify(userDataForFrontend))}`;

      console.log('üîó OAuth Callback: Redirecting to:', redirectUrl);
      console.log('üîó CORS origin:', config.cors.origin);
      console.log('‚úÖ OAuth: User authenticated successfully:', user.email);

      res.redirect(redirectUrl);
    } catch (error) {
      console.error('OAuth Callback Error:', error);
      res.redirect(`${config.cors.origin}/auth?error=callback_error`);
    }
  }
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OAuth
router.get('/status', passport.authenticate('jwt', { session: false }), (req, res) => {
  res.json({
    success: true,
    user: {
      id: req.user.id,
      email: req.user.email,
      name: req.user.name,
      avatar: req.user.avatar,
      role: req.user.role,
      isGoogleUser: req.user.isGoogleUser
    }
  });
});

// –û—Ç–≤—è–∑–∫–∞ Google –∞–∫–∫–∞—É–Ω—Ç–∞
router.post('/google/unlink', passport.authenticate('jwt', { session: false }), async (req, res) => {
  try {
    const user = req.user;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –±–µ–∑ Google
    if (!user.password && user.isGoogleUser) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å Google –∞–∫–∫–∞—É–Ω—Ç. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å.'
      });
    }

    // –û—Ç–≤—è–∑—ã–≤–∞–µ–º Google
    user.googleId = null;
    user.isGoogleUser = false;
    await user.save();

    res.json({
      success: true,
      message: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    });
  } catch (error) {
    console.error('Google Unlink Error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const handleGoogleConnect = async (req, res, next) => {
  try {
    const { User } = require('../config/database');
    const userId = req.query.state.replace('connect_', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await User.findByPk(userId);
    if (!existingUser) {
      return res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Passport
    passport.authenticate('google', { session: false }, async (err, googleProfile) => {
      try {
        if (err || !googleProfile) {
          return res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ email
        if (googleProfile.email !== existingUser.email) {
          return res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('Email –∞–∫–∫–∞—É–Ω—Ç–∞ Google –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º email –∞–∫–∫–∞—É–Ω—Ç–∞')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Google –∞–∫–∫–∞—É–Ω—Ç –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const googleUserExists = await User.findOne({ 
          where: { 
            googleId: googleProfile.googleId,
            id: { [require('sequelize').Op.ne]: userId }
          } 
        });
        
        if (googleUserExists) {
          return res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('–≠—Ç–æ—Ç Google –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')}`);
        }
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º Google –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        existingUser.googleId = googleProfile.googleId;
        existingUser.isGoogleUser = false; // –û—Å—Ç–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–æ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º Google
        existingUser.avatar = existingUser.avatar || googleProfile.avatar; // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await existingUser.save();
        
        console.log('‚úÖ Google account connected successfully to user:', existingUser.email);
        
        // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è —Å —É—Å–ø–µ—Ö–æ–º
        res.redirect(`http://localhost:5173/profile/password?success=${encodeURIComponent('Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω')}`);
        
      } catch (error) {
        console.error('‚ùå Error connecting Google account:', error);
        res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')}`);
      }
    })(req, res, next);
    
  } catch (error) {
    console.error('‚ùå Error in handleGoogleConnect:', error);
    res.redirect(`http://localhost:5173/profile/password?error=${encodeURIComponent('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')}`);
  }
};

module.exports = router;