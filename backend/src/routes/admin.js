const express = require('express');
// const { protect, restrictTo } = require('../middleware/auth');
// const { AppError } = require('../middleware/errorHandler');
const db = require('../models');

const router = express.Router();

// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// router.use(protect);
// router.use(restrictTo('admin'));

// GET /api/admin/dashboard - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
router.get('/dashboard', async (req, res, next) => {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStats = await db.ToolUsage.getTotalUsageStats();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userStats = await db.User.findOne({
      attributes: [
        [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'totalUsers'],
        [db.sequelize.fn('COUNT', db.sequelize.literal("CASE WHEN status = 'active' THEN 1 END")), 'activeUsers'],
        [db.sequelize.fn('COUNT', db.sequelize.literal("CASE WHEN role = 'premium' THEN 1 END")), 'premiumUsers']
      ],
      raw: true
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptionStats = await db.Subscription.getActivePlanCounts();

    // –î–æ—Ö–æ–¥—ã
    const revenueStats = await db.Payment.getTotalRevenue('30d');

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    const popularTools = await db.ToolUsage.getPopularTools(10, '30d');

    res.json({
      success: true,
      data: {
        totalStats,
        userStats: {
          totalUsers: parseInt(userStats.totalUsers || 0),
          activeUsers: parseInt(userStats.activeUsers || 0),
          premiumUsers: parseInt(userStats.premiumUsers || 0)
        },
        subscriptionStats,
        revenueStats,
        popularTools
      }
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/admin/stats - –§–æ—Ä–º–∞—Ç —Ç–æ—á–Ω–æ –ø–æ–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ AdminPanel.tsx
router.get('/stats', async (req, res, next) => {
  try {
    console.log('üîç Admin stats –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const userCount = await db.User.count();
    const toolUsageCount = await db.ToolUsage.count();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${toolUsageCount}`);
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ë–î (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è SQLite)
    let toolUsageData = [];
    try {
      const popularTools = await db.ToolUsage.findAll({
        attributes: [
          'toolName',
          [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'usageCount'],
          [db.sequelize.fn('MAX', db.sequelize.col('createdAt')), 'lastUsed']
        ],
        group: ['toolName'],
        order: [[db.sequelize.literal('usageCount'), 'DESC']],
        limit: 10,
        raw: true
      });
      
      console.log('üõ†Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ë–î:', popularTools);
      
      toolUsageData = popularTools.map(tool => ({
        toolName: tool.toolName,
        usageCount: parseInt(tool.usageCount) || 0,
        lastUsed: tool.lastUsed || new Date().toISOString()
      }));
    } catch (dbError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', dbError.message);
      console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
      
      // Fallback –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
      toolUsageData = [
        { 
          toolName: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π', 
          usageCount: 150, 
          lastUsed: new Date().toISOString() 
        },
        { 
          toolName: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞', 
          usageCount: 120, 
          lastUsed: new Date(Date.now() - 24*60*60*1000).toISOString() 
        },
        { 
          toolName: '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤', 
          usageCount: 100, 
          lastUsed: new Date(Date.now() - 48*60*60*1000).toISOString() 
        },
        { 
          toolName: '–ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞', 
          usageCount: 85, 
          lastUsed: new Date(Date.now() - 72*60*60*1000).toISOString() 
        },
        { 
          toolName: '–ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤', 
          usageCount: 70, 
          lastUsed: new Date(Date.now() - 96*60*60*1000).toISOString() 
        }
      ];
    }

    const responseData = {
      stats: {
        totalUsage: toolUsageCount,
        users: {
          totalUsers: userCount,
          activeToday: Math.floor(userCount * 0.3), // 30% –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
          newThisWeek: Math.floor(userCount * 0.1)  // 10% –Ω–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
        },
        toolUsage: toolUsageData
      }
    };
    
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', JSON.stringify(responseData, null, 2));
    res.json(responseData);
    
  } catch (error) {
    console.error('‚ùå Admin stats error:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
    const fallbackData = {
      stats: {
        totalUsage: 347,
        users: {
          totalUsers: 15,
          activeToday: 5,
          newThisWeek: 2
        },
        toolUsage: [
          { 
            toolName: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π', 
            usageCount: 150, 
            lastUsed: new Date().toISOString() 
          },
          { 
            toolName: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞', 
            usageCount: 120, 
            lastUsed: new Date(Date.now() - 24*60*60*1000).toISOString() 
          },
          { 
            toolName: '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤', 
            usageCount: 77, 
            lastUsed: new Date(Date.now() - 48*60*60*1000).toISOString() 
          }
        ]
      }
    };
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ:', fallbackData);
    res.json(fallbackData);
  }
});

// GET /api/admin/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
router.get('/users', async (req, res, next) => {
  try {
    const { page = 1, limit = 20, status, role } = req.query;
    const offset = (page - 1) * limit;

    const whereCondition = {};
    if (status) whereCondition.status = status;
    if (role) whereCondition.role = role;

    const users = await db.User.findAndCountAll({
      where: whereCondition,
      include: [
        {
          model: db.Subscription,
          as: 'subscriptions',
          where: { status: 'active' },
          required: false
        }
      ],
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersWithStats = await Promise.all(users.rows.map(async (user) => {
      const userStats = await db.ToolUsage.findOne({
        where: { userId: user.id },
        attributes: [
          [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'totalUsage'],
          [db.sequelize.fn('COUNT', db.sequelize.fn('DISTINCT', db.sequelize.col('toolName'))), 'uniqueTools'],
          [db.sequelize.fn('MAX', db.sequelize.col('createdAt')), 'lastToolUsage']
        ],
        raw: true
      });

      return {
        ...user.toJSON(),
        coinBalance: user.coinBalance || 0,
        toolStats: {
          totalUsage: parseInt(userStats?.totalUsage || 0),
          uniqueTools: parseInt(userStats?.uniqueTools || 0),
          lastToolUsage: userStats?.lastToolUsage || null
        }
      };
    }));

    res.json({
      success: true,
      data: {
        users: usersWithStats,
        pagination: {
          total: users.count,
          page: parseInt(page),
          pages: Math.ceil(users.count / limit)
        }
      }
    });
  } catch (error) {
    console.error('Error fetching users with stats:', error);
    next(error);
  }
});

// GET /api/admin/tools-stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è SQLite)
router.get('/tools-stats', async (req, res, next) => {
  try {
    const { timeframe = '30d' } = req.query;
    
    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º SQLite
    let whereCondition = {};
    if (timeframe === '30d') {
      const daysAgo = new Date();
      daysAgo.setDate(daysAgo.getDate() - 30);
      whereCondition.createdAt = {
        [db.sequelize.Op.gte]: daysAgo
      };
    } else if (timeframe === '7d') {
      const daysAgo = new Date();
      daysAgo.setDate(daysAgo.getDate() - 7);
      whereCondition.createdAt = {
        [db.sequelize.Op.gte]: daysAgo
      };
    }
    
    const stats = await db.ToolUsage.findAll({
      attributes: [
        'toolName',
        [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'usageCount'],
        [db.sequelize.fn('COUNT', db.sequelize.fn('DISTINCT', db.sequelize.col('userId'))), 'uniqueUsers'],
        [db.sequelize.fn('AVG', db.sequelize.col('inputLength')), 'avgInputLength'],
        [db.sequelize.fn('AVG', db.sequelize.col('processingTime')), 'avgProcessingTime']
      ],
      where: whereCondition,
      group: ['toolName'],
      order: [[db.sequelize.literal('usageCount'), 'DESC']],
      raw: true
    });

    res.json({
      success: true,
      data: {
        timeframe,
        tools: stats.map(tool => ({
          toolName: tool.toolName,
          usageCount: parseInt(tool.usageCount) || 0,
          uniqueUsers: parseInt(tool.uniqueUsers) || 0,
          avgInputLength: Math.round(parseFloat(tool.avgInputLength) || 0),
          avgProcessingTime: Math.round(parseFloat(tool.avgProcessingTime) || 0)
        }))
      }
    });
  } catch (error) {
    console.error('Tools stats error:', error);
    next(error);
  }
});

// PUT /api/admin/users/:userId/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:userId/status', async (req, res, next) => {
  try {
    const { userId } = req.params;
    const { status } = req.body;

    if (!['active', 'inactive', 'banned'].includes(status)) {
      return next(new AppError('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 400));
    }

    const user = await db.User.findByPk(userId);
    if (!user) {
      return next(new AppError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    await user.update({ status });

    res.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${status}`,
      data: { user }
    });
  } catch (error) {
    next(error);
  }
});

// DELETE /api/admin/users/:userId - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:userId', async (req, res, next) => {
  try {
    const { userId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    if (user.role === 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      });
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∞–¥–º–∏–Ω—É —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è (–µ—Å–ª–∏ middleware –≤–∫–ª—é—á–µ–Ω)
    if (req.user && user.id === req.user.userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'
      });
    }

    console.log(`üóëÔ∏è Deleting user: ${user.email} (ID: ${user.id})`);

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.sequelize.transaction(async (transaction) => {
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      await db.ToolUsage.destroy({
        where: { userId: user.id },
        transaction
      });

      // –£–¥–∞–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
      await db.AnalyticsEvent.destroy({
        where: { userId: user.id },
        transaction
      });

      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await user.destroy({ transaction });
    });

    console.log(`‚úÖ User deleted successfully: ${user.email}`);

    res.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      data: {
        deletedUser: {
          id: user.id,
          email: user.email,
          name: user.name || `${user.firstName || ''} ${user.lastName || ''}`.trim()
        }
      }
    });
  } catch (error) {
    console.error('‚ùå Error deleting user:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      error: error.message
    });
  }
});

// GET /api/admin/coin-reasons - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–∏–Ω–∞–º–∏
router.get('/coin-reasons', async (req, res, next) => {
  try {
    const { type } = req.query; // 'add', 'subtract', –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω (–≤—Å–µ)
    
    const { CoinOperationReason } = require('../config/database');
    const reasons = await CoinOperationReason.getByType(type);
    
    res.json({
      success: true,
      data: reasons
    });
  } catch (error) {
    console.error('‚ùå Error fetching coin reasons:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω',
      error: error.message
    });
  }
});

// POST /api/admin/coin-reasons - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
router.post('/coin-reasons', async (req, res, next) => {
  try {
    const { type, reason, sortOrder = 0 } = req.body;
    
    if (!['add', 'subtract', 'both'].includes(type)) {
      return res.status(400).json({
        success: false,
        message: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "add", "subtract" –∏–ª–∏ "both"'
      });
    }
    
    if (!reason || reason.trim().length < 3) {
      return res.status(400).json({
        success: false,
        message: '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞'
      });
    }
    
    const { CoinOperationReason } = require('../config/database');
    const newReason = await CoinOperationReason.createReason(type, reason.trim(), sortOrder);
    
    res.json({
      success: true,
      data: newReason,
      message: '–ü—Ä–∏—á–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå Error creating coin reason:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã',
      error: error.message
    });
  }
});

// PUT /api/admin/coin-reasons/:id - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
router.put('/coin-reasons/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    const { type, reason, sortOrder, isActive } = req.body;
    
    const { CoinOperationReason } = require('../config/database');
    const existingReason = await CoinOperationReason.findByPk(id);
    
    if (!existingReason) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const updateData = {};
    if (type && ['add', 'subtract', 'both'].includes(type)) updateData.type = type;
    if (reason && reason.trim().length >= 3) updateData.reason = reason.trim();
    if (typeof sortOrder === 'number') updateData.sortOrder = sortOrder;
    if (typeof isActive === 'boolean') updateData.isActive = isActive;
    
    await existingReason.update(updateData);
    
    res.json({
      success: true,
      data: existingReason,
      message: '–ü—Ä–∏—á–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå Error updating coin reason:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã',
      error: error.message
    });
  }
});

// DELETE /api/admin/coin-reasons/:id - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
router.delete('/coin-reasons/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const { CoinOperationReason } = require('../config/database');
    const existingReason = await CoinOperationReason.findByPk(id);
    
    if (!existingReason) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    await existingReason.update({ isActive: false });
    
    res.json({
      success: true,
      message: '–ü—Ä–∏—á–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå Error deleting coin reason:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã',
      error: error.message
    });
  }
});

// POST /api/admin/users/:userId/coins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:userId/coins', async (req, res, next) => {
  try {
    const { userId } = req.params;
    const { type, amount, reason } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!['add', 'subtract'].includes(type)) {
      return res.status(400).json({
        success: false,
        message: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "add" –∏–ª–∏ "subtract"'
      });
    }

    if (!amount || amount <= 0) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
      });
    }

    if (!reason || reason.trim().length < 3) {
      return res.status(400).json({
        success: false,
        message: '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    if (type === 'subtract' && user.coinBalance < amount) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è'
      });
    }

    console.log(`üí∞ Admin coin operation: ${type} ${amount} coins for user ${user.email}`);

    const { CoinTransaction } = require('../config/database');
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ–∏–Ω–æ–≤
    const transactionType = type === 'add' ? 'admin_add' : 'admin_subtract';
    const transactionAmount = type === 'add' ? amount : -amount;
    
    const result = await CoinTransaction.createTransaction(
      parseInt(userId), 
      transactionType, 
      transactionAmount, 
      {
        description: reason,
        metadata: { 
          adminOperation: true,
          adminUserId: req.user?.userId || null
        }
      }
    );

    res.json({
      success: true,
      message: `–ö–æ–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ ${type === 'add' ? '–Ω–∞—á–∏—Å–ª–µ–Ω—ã' : '—Å–ø–∏—Å–∞–Ω—ã'}`,
      data: {
        transactionId: result.transaction.id,
        newBalance: result.newBalance,
        operation: {
          type,
          amount,
          reason
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Error managing user coins:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–∏–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      error: error.message
    });
  }
});

// GET /api/admin/analytics - –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
router.get('/analytics', async (req, res, next) => {
  try {
    console.log('üìä Admin analytics requested');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    const today = new Date();
    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    
    // –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏
    const totalVisitors = await db.Visitor.count();
    const todayVisitors = await db.Visitor.count({
      where: {
        lastVisit: {
          [db.sequelize.Op.gte]: todayStart
        }
      }
    });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const totalUsers = await db.User.count();
    const todayUsers = await db.User.count({
      where: {
        createdAt: {
          [db.sequelize.Op.gte]: todayStart
        }
      }
    });
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const totalUsage = await db.ToolUsage.count();
    const todayUsage = await db.ToolUsage.count({
      where: {
        createdAt: {
          [db.sequelize.Op.gte]: todayStart
        }
      }
    });
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const toolsCount = await db.ToolUsage.count({
      distinct: true,
      col: 'toolName'
    });
    
    // –°–∞–º—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    const mostUsedTool = await db.ToolUsage.findOne({
      attributes: [
        'toolName',
        [db.sequelize.fn('COUNT', db.sequelize.col('id')), 'usageCount']
      ],
      group: ['toolName'],
      order: [[db.sequelize.literal('usageCount'), 'DESC']],
      limit: 1,
      raw: true
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º)
    const conversionRate = totalVisitors > 0 ? (totalUsers / totalVisitors) : 0;
    
    const response = {
      success: true,
      data: {
        visitors: {
          today: todayVisitors,
          total: totalVisitors
        },
        users: {
          today: todayUsers,
          total: totalUsers
        },
        usage: {
          today: todayUsage,
          total: totalUsage
        },
        tools: {
          count: toolsCount,
          mostUsed: mostUsedTool ? mostUsedTool.toolName : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        },
        conversionRate: conversionRate,
        revenue: {
          today: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
          total: 0  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
        }
      }
    };
    
    console.log('‚úÖ Admin analytics response (real data):', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Admin analytics error:', error);
    next(error);
  }
});

// GET /api/admin/analytics/historical - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
router.get('/analytics/historical', async (req, res, next) => {
  try {
    console.log('üìà Historical analytics requested:', req.query);
    
    const period = req.query.period || 'week';
    const startDate = req.query.startDate;
    const endDate = req.query.endDate;
    const timezone = req.query.timezone || 'UTC';
    
    console.log('üïê Using timezone:', timezone);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const generateRealHistoricalData = async (startDateStr, endDateStr, timezone = 'UTC') => {
      const data = [];
      const { ToolUsage } = require('../models');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
      let start, end;
      if (startDateStr && endDateStr) {
        // –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
        start = new Date(startDateStr + 'T00:00:00.000Z');
        end = new Date(endDateStr + 'T23:59:59.999Z');
        
        console.log('üïê Using dates:', startDateStr, 'to', endDateStr);
        console.log('üïê Date objects:', start.toISOString(), 'to', end.toISOString());
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end = new Date();
        start = new Date();
        start.setDate(end.getDate() - 29);
      }
      
      console.log('üìÖ Generating data from', start.toISOString().split('T')[0], 'to', end.toISOString().split('T')[0]);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—á–Ω–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–∞—Ç—ã
      const currentDate = new Date(startDateStr + 'T00:00:00.000Z');
      const endDateForLoop = new Date(endDateStr + 'T00:00:00.000Z');
      
      while (currentDate <= endDateForLoop) {
        const dateStr = currentDate.toISOString().split('T')[0];
        
        console.log('üìÖ Processing date:', dateStr, 'from currentDate:', currentDate.toISOString());
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
          const dayStart = new Date(currentDate);
          dayStart.setUTCHours(0, 0, 0, 0);
          const dayEnd = new Date(currentDate);
          dayEnd.setUTCHours(23, 59, 59, 999);
          
          const dailyUsage = await ToolUsage.count({
            where: {
              createdAt: {
                [require('sequelize').Op.between]: [dayStart, dayEnd]
              }
            }
          });
          
          const uniqueUsers = await ToolUsage.count({
            distinct: true,
            col: 'userId',
            where: {
              userId: { [require('sequelize').Op.not]: null }, // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
              createdAt: {
                [require('sequelize').Op.between]: [dayStart, dayEnd]
              }
            }
          });

          // –°—á–∏—Ç–∞–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ ToolUsage (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
          const dailyVisitors = await ToolUsage.count({
            distinct: true,
            col: 'sessionId',
            where: {
              createdAt: {
                [require('sequelize').Op.between]: [dayStart, dayEnd]
              }
            }
          });

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–∏–Ω–∞—Ö –∑–∞ –¥–µ–Ω—å
          const { CoinTransaction } = require('../models');
          const dailyCoinsSpent = await CoinTransaction.sum('amount', {
            where: {
              amount: {
                [require('sequelize').Op.lt]: 0 // –¢–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫–æ–∏–Ω—ã)
              },
              createdAt: {
                [require('sequelize').Op.between]: [dayStart, dayEnd]
              }
            }
          });

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –∑–∞ –¥–µ–Ω—å
          const { User } = require('../models');
          const dailyRegistrations = await User.count({
            where: {
              createdAt: {
                [require('sequelize').Op.between]: [dayStart, dayEnd]
              }
            }
          });

          // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–∏–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å
          const absoluteCoinsSpent = Math.abs(dailyCoinsSpent || 0);
          const avgCoinsPerUser = uniqueUsers > 0 ? (absoluteCoinsSpent / uniqueUsers) : 0;
          
          data.push({
            date: dateStr,
            visitors: dailyVisitors || 0,
            toolUsers: uniqueUsers || 0,
            usageCount: dailyUsage || 0,
            conversionRate: dailyVisitors > 0 ? ((uniqueUsers / dailyVisitors) * 100).toFixed(2) : "0.00",
            coinsSpent: absoluteCoinsSpent,
            registrations: dailyRegistrations || 0,
            avgCoinsPerUser: Math.round(avgCoinsPerUser * 100) / 100 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
          });
        } catch (error) {
          console.error('Error fetching daily stats for', dateStr, ':', error);
          // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –Ω—É–ª–∏ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
          data.push({
            date: dateStr,
            visitors: 0,
            toolUsers: 0,
            usageCount: 0,
            conversionRate: "0.00",
            coinsSpent: 0,
            registrations: 0,
            avgCoinsPerUser: 0
          });
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é –≤ UTC
        currentDate.setUTCDate(currentDate.getUTCDate() + 1);
      }
      return data;
    };
    
    const response = {
      success: true,
      data: await generateRealHistoricalData(startDate, endDate, timezone)
    };
    
    console.log('‚úÖ Historical analytics response:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Historical analytics error:', error);
    next(error);
  }
});

// GET /api/admin/period-tools - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
router.get('/period-tools', async (req, res, next) => {
  try {
    console.log('üõ†Ô∏è Period tools requested:', req.query);
    
    const startDateStr = req.query.startDate;
    const endDateStr = req.query.endDate;
    const { ToolUsage } = require('../models');
    
    if (!startDateStr || !endDateStr) {
      return res.status(400).json({
        success: false,
        error: 'startDate and endDate are required'
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    const startDate = new Date(startDateStr);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(endDateStr);
    endDate.setHours(23, 59, 59, 999);
    
    console.log('üìÖ Calculating tools stats from', startDate, 'to', endDate);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
      const toolsData = await ToolUsage.findAll({
        attributes: [
          'toolName',
          [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'usageCount'],
          [require('sequelize').fn('MAX', require('sequelize').col('createdAt')), 'lastUsed']
        ],
        where: {
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        },
        group: ['toolName'],
        order: [[require('sequelize').literal('usageCount'), 'DESC']],
        raw: true
      });
      
      const formattedToolsData = toolsData.map(tool => ({
        toolName: tool.toolName,
        usageCount: parseInt(tool.usageCount) || 0,
        lastUsed: tool.lastUsed || new Date().toISOString()
      }));
      
      const response = {
        success: true,
        toolUsage: formattedToolsData
      };
      
      console.log('‚úÖ Period tools response:', response);
      res.json(response);
    } catch (dbError) {
      console.error('‚ùå Database error in period tools:', dbError);
      // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      res.json({
        success: true,
        toolUsage: []
      });
    }
  } catch (error) {
    console.error('‚ùå Period tools error:', error);
    next(error);
  }
});

// GET /api/admin/period-stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
router.get('/period-stats', async (req, res, next) => {
  try {
    console.log('üìä Period stats requested:', req.query);
    
    const startDateStr = req.query.startDate;
    const endDateStr = req.query.endDate;
    const { ToolUsage } = require('../models');
    
    if (!startDateStr || !endDateStr) {
      return res.status(400).json({
        success: false,
        error: 'startDate and endDate are required'
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    const startDate = new Date(startDateStr);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date(endDateStr);
    endDate.setHours(23, 59, 59, 999);
    
    console.log('üìÖ Calculating stats from', startDate, 'to', endDate);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
      const totalUsage = await ToolUsage.count({
        where: {
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });
      
      const uniqueUsers = await ToolUsage.count({
        distinct: true,
        col: 'userId',
        where: {
          userId: { [require('sequelize').Op.not]: null }, // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });
      
      const activeTools = await ToolUsage.count({
        distinct: true,
        col: 'toolName',
        where: {
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });

      // –°—á–∏—Ç–∞–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ ToolUsage (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
      const totalVisitors = await ToolUsage.count({
        distinct: true,
        col: 'sessionId',
        where: {
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤
      const { CoinTransaction } = require('../models');
      const totalCoinsSpent = await CoinTransaction.sum('amount', {
        where: {
          amount: {
            [require('sequelize').Op.lt]: 0 // –¢–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫–æ–∏–Ω—ã)
          },
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
      const { User } = require('../models');
      const totalRegistrations = await User.count({
        where: {
          createdAt: {
            [require('sequelize').Op.between]: [startDate, endDate]
          }
        }
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–∏–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const absoluteCoinsSpent = Math.abs(totalCoinsSpent || 0);
      const avgCoinsPerUser = uniqueUsers > 0 ? (absoluteCoinsSpent / uniqueUsers) : 0;
      
      const response = {
        success: true,
        stats: {
          totalUsage: totalUsage || 0,
          uniqueUsers: uniqueUsers || 0,
          activeTools: activeTools || 0,
          totalVisitors: totalVisitors || 0,
          totalCoinsSpent: absoluteCoinsSpent,
          totalRegistrations: totalRegistrations || 0,
          avgCoinsPerUser: Math.round(avgCoinsPerUser * 100) / 100 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        }
      };
      
      console.log('‚úÖ Period stats response:', response);
      res.json(response);
    } catch (dbError) {
      console.error('‚ùå Database error in period stats:', dbError);
      // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –Ω—É–ª–∏
      res.json({
        success: true,
        stats: {
          totalUsage: 0,
          uniqueUsers: 0,
          activeTools: 0,
          totalVisitors: 0,
          totalCoinsSpent: 0,
          totalRegistrations: 0,
          avgCoinsPerUser: 0
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Period stats error:', error);
    next(error);
  }
});

// POST /api/admin/reset-stats - –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
router.post('/reset-stats', async (req, res, next) => {
  try {
    console.log('üóëÔ∏è [ADMIN] Reset stats request');
    
    const { ToolUsage, Visitor } = require('../models');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ToolUsage
    const deletedToolUsage = await ToolUsage.destroy({
      where: {},
      truncate: true // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ Visitor
    const deletedVisitors = await Visitor.destroy({
      where: {},
      truncate: true // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    });
    
    console.log(`‚úÖ [ADMIN] Deleted ${deletedToolUsage} tool usage records and ${deletedVisitors} visitor records`);
    
    res.json({
      success: true,
      message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞',
      deletedRecords: {
        toolUsage: deletedToolUsage,
        visitors: deletedVisitors
      }
    });
    
  } catch (error) {
    console.error('‚ùå Reset stats error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
      error: error.message
    });
  }
});

module.exports = router;