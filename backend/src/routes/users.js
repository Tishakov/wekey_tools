const express = require('express');
const path = require('path');
const fs = require('fs');
const { protect, restrictTo } = require('../middleware/auth');
const { avatarUpload, handleMulterError } = require('../middleware/upload');
const { AppError } = require('../middleware/errorHandler');
const db = require('../config/database');

const router = express.Router();

// –ó–∞—â–∏—Ç–∞ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.use(protect);

// GET /api/users/profile - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', async (req, res, next) => {
  try {
    const user = await db.User.findByPk(req.user.id, {
      include: [
        {
          model: db.Subscription,
          as: 'subscriptions',
          where: { status: 'active' },
          required: false
        }
      ]
    });

    res.json({
      success: true,
      data: {
        user
      }
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/users/usage-history - –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
router.get('/usage-history', async (req, res, next) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    const usageHistory = await db.ToolUsage.findAndCountAll({
      where: { userId: req.user.id },
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.json({
      success: true,
      data: {
        usage: usageHistory.rows,
        pagination: {
          total: usageHistory.count,
          page: parseInt(page),
          pages: Math.ceil(usageHistory.count / limit)
        }
      }
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/users/subscription - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
router.get('/subscription', async (req, res, next) => {
  try {
    const subscription = await db.Subscription.findOne({
      where: { 
        userId: req.user.id,
        status: 'active'
      },
      include: [
        {
          model: db.Payment,
          as: 'payments',
          order: [['createdAt', 'DESC']],
          limit: 5
        }
      ]
    });

    if (!subscription) {
      return next(new AppError('–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    res.json({
      success: true,
      data: {
        subscription,
        features: subscription.getFeatures(),
        isActive: subscription.isActive(),
        daysRemaining: subscription.getDaysRemaining(),
        isExpiringSoon: subscription.isExpiringSoon()
      }
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/users/avatar - –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
router.post('/avatar', 
  avatarUpload.single('avatar'),
  handleMulterError,
  async (req, res, next) => {
    try {
      if (!req.file) {
        return next(new AppError('–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω', 400));
      }

      console.log('üì∏ Avatar upload for user:', req.user.id);
      console.log('üìÅ File details:', {
        filename: req.file.filename,
        size: req.file.size,
        mimetype: req.file.mimetype
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (req.user.avatar) {
        const oldAvatarPath = path.join(__dirname, '../../uploads/avatars', path.basename(req.user.avatar));
        if (fs.existsSync(oldAvatarPath)) {
          fs.unlinkSync(oldAvatarPath);
          console.log('üóëÔ∏è Old avatar deleted:', oldAvatarPath);
        }
      }

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
      const avatarUrl = `/uploads/avatars/${req.file.filename}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await req.user.update({ avatar: avatarUrl });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await req.user.reload();

      res.json({
        success: true,
        message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        data: {
          avatar: avatarUrl,
          user: req.user
        }
      });
    } catch (error) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (req.file && fs.existsSync(req.file.path)) {
        fs.unlinkSync(req.file.path);
      }
      next(error);
    }
  }
);

// DELETE /api/users/avatar - –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
router.delete('/avatar', async (req, res, next) => {
  try {
    if (!req.user.avatar) {
      return next(new AppError('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞', 404));
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞
    const avatarPath = path.join(__dirname, '../../uploads/avatars', path.basename(req.user.avatar));
    if (fs.existsSync(avatarPath)) {
      fs.unlinkSync(avatarPath);
      console.log('üóëÔ∏è Avatar deleted:', avatarPath);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await req.user.update({ avatar: null });

    res.json({
      success: true,
      message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      data: {
        user: req.user
      }
    });
  } catch (error) {
    next(error);
  }
});

module.exports = router;