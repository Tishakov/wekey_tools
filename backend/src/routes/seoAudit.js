const express = require('express');
const router = express.Router();
const cheerio = require('cheerio');
const fetch = require('node-fetch');

// Google PageSpeed Insights API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL)
const PAGESPEED_API_URL = 'https://www.googleapis.com/pagespeedonline/v5/runPagespeed';
const GOOGLE_API_KEY = process.env.GOOGLE_PAGESPEED_API_KEY; // –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PageSpeed –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π
async function getPageSpeedData(url, waitForFullData = false) {
  console.log(`üéØ getPageSpeedData –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${url}, waitForFullData: ${waitForFullData}`);
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const keyParam = GOOGLE_API_KEY ? `&key=${GOOGLE_API_KEY}` : '';
    const mobileUrl = `${PAGESPEED_API_URL}?url=${encodeURIComponent(url)}&strategy=mobile&category=performance${keyParam}`;
    const desktopUrl = `${PAGESPEED_API_URL}?url=${encodeURIComponent(url)}&strategy=desktop&category=performance${keyParam}`;
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ PageSpeed –¥–∞–Ω–Ω—ã—Ö...');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å retry
    const fetchWithRetry = async (url, strategy, maxRetries = 4) => {
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –¥–ª—è ${strategy}...`);
          const response = await fetch(url, { timeout: 60000 }); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
          if (response.ok) {
            console.log(`‚úÖ ${strategy} –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
            return response;
          } else {
            console.log(`‚ö†Ô∏è ${strategy} –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${response.status}`);
          }
        } catch (error) {
          if (error.message.includes('400')) {
            console.log(`‚ö†Ô∏è ${strategy} –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: 400 (Bad Request) - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç Google`);
          } else if (error.message.includes('timeout')) {
            console.log(`‚ùå ${strategy} –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –æ—à–∏–±–∫–∞: network timeout`);
          } else {
            console.log(`‚ùå ${strategy} –ø–æ–ø—ã—Ç–∫–∞ ${attempt} –æ—à–∏–±–∫–∞: ${error.message}`);
          }
        }
        
        // –ñ–¥–µ–º –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if (attempt < maxRetries) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 8 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π ${strategy}...`);
          await new Promise(resolve => setTimeout(resolve, 8000));
        }
      }
      return null;
    };
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å retry
    const [mobileResponse, desktopResponse] = await Promise.allSettled([
      fetchWithRetry(mobileUrl, 'mobile'),
      fetchWithRetry(desktopUrl, 'desktop')
    ]);
    
    const results = {
      mobile: null,
      desktop: null,
      error: null,
      metadata: {
        timestamp: new Date().toISOString(),
        source: 'unknown',
        hasApiKey: !!GOOGLE_API_KEY,
        requestStatus: {
          mobile: 'pending',
          desktop: 'pending'
        }
      }
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º mobile —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (mobileResponse.status === 'fulfilled' && mobileResponse.value && mobileResponse.value.ok) {
      const mobileData = await mobileResponse.value.json();
      results.mobile = extractCoreWebVitals(mobileData, 'mobile');
      results.metadata.requestStatus.mobile = 'success';
      console.log('‚úÖ Mobile –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      results.metadata.requestStatus.mobile = 'failed';
      console.log('‚ùå Mobile –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º desktop —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (desktopResponse.status === 'fulfilled' && desktopResponse.value && desktopResponse.value.ok) {
      const desktopData = await desktopResponse.value.json();
      results.desktop = extractCoreWebVitals(desktopData, 'desktop');
      results.metadata.requestStatus.desktop = 'success';
      console.log('‚úÖ Desktop –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      results.metadata.requestStatus.desktop = 'failed';
      console.log('‚ùå Desktop –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const mobileSuccess = results.metadata.requestStatus.mobile === 'success';
    const desktopSuccess = results.metadata.requestStatus.desktop === 'success';
    
    if (waitForFullData) {
      // –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      if (mobileSuccess && desktopSuccess) {
        results.metadata.source = 'google_api';
        console.log('üéâ –í—Å–µ PageSpeed –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Google API');
      } else {
        // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        const missingData = [];
        if (!mobileSuccess) missingData.push('mobile');
        if (!desktopSuccess) missingData.push('desktop');
        
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PageSpeed –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${missingData.join(', ')}`);
        throw new Error(`Google PageSpeed API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è: ${missingData.join(', ')}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      }
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
      if (mobileSuccess && desktopSuccess) {
        results.metadata.source = 'google_api';
        console.log('üéâ –í—Å–µ PageSpeed –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Google API');
      } else if (mobileSuccess || desktopSuccess) {
        // –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ demo
        if (!results.mobile) {
          console.log('‚ö†Ô∏è Mobile PageSpeed API failed, using demo data');
          results.mobile = generateDemoWebVitals('mobile');
          results.metadata.requestStatus.mobile = 'demo';
        }
        
        if (!results.desktop) {
          console.log('‚ö†Ô∏è Desktop PageSpeed API failed, using demo data');
          results.desktop = generateDemoWebVitals('desktop');
          results.metadata.requestStatus.desktop = 'demo';
        }
        
        results.metadata.source = 'mixed';
        console.log('‚ö° –°–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —á–∞—Å—Ç—å –æ—Ç Google API, —á–∞—Å—Ç—å demo');
      } else {
        // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã failed - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ demo –¥–∞–Ω–Ω—ã–µ
        console.log('üí• –í—Å–µ PageSpeed –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —É–¥–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo –¥–∞–Ω–Ω—ã–µ');
        results.mobile = generateDemoWebVitals('mobile');
        results.desktop = generateDemoWebVitals('desktop');
        results.metadata.source = 'demo_data';
        results.metadata.requestStatus.mobile = 'demo';
        results.metadata.requestStatus.desktop = 'demo';
      }
    }
    
    return results;
  } catch (error) {
    console.log('PageSpeed API error:', error.message);
    
    if (waitForFullData) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∂–¥–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      throw error;
    } else {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      return { 
        mobile: generateDemoWebVitals('mobile'), 
        desktop: generateDemoWebVitals('desktop'), 
        error: error.message 
      };
    }
  }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º Core Web Vitals –∏–∑ –æ—Ç–≤–µ—Ç–∞ Google
function extractCoreWebVitals(data, strategy) {
  try {
    const lighthouse = data.lighthouseResult;
    const audits = lighthouse.audits;
    
    return {
      performance_score: Math.round(lighthouse.categories.performance.score * 100),
      strategy: strategy, // mobile –∏–ª–∏ desktop
      timestamp: new Date().toISOString(),
      source: 'google_api',
      core_web_vitals: {
        lcp: {
          value: audits['largest-contentful-paint']?.numericValue || 0,
          score: Math.round((audits['largest-contentful-paint']?.score || 0) * 100),
          displayValue: audits['largest-contentful-paint']?.displayValue || 'N/A'
        },
        fid: {
          value: audits['max-potential-fid']?.numericValue || 0,
          score: Math.round((audits['max-potential-fid']?.score || 0) * 100),
          displayValue: audits['max-potential-fid']?.displayValue || 'N/A'
        },
        cls: {
          value: audits['cumulative-layout-shift']?.numericValue || 0,
          score: Math.round((audits['cumulative-layout-shift']?.score || 0) * 100),
          displayValue: audits['cumulative-layout-shift']?.displayValue || 'N/A'
        }
      },
      // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ opportunities –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Google PageSpeed
      googleOpportunities: extractGoogleOpportunities(data, strategy),
      diagnostics: {
        dom_size: audits['dom-size']?.numericValue || 0,
        unused_css: audits['unused-css-rules']?.details?.overallSavingsBytes || 0,
        render_blocking: audits['render-blocking-resources']?.details?.items?.length || 0
      }
    };
  } catch (error) {
    console.log('Error extracting Core Web Vitals:', error);
    return null;
  }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Google PageSpeed –¥–ª—è seo-audit-section –∫–∞—Ä—Ç–æ—á–µ–∫
function extractGoogleOpportunities(data, strategy) {
  try {
    const lighthouse = data.lighthouseResult;
    const audits = lighthouse.audits;
    const opportunities = [];

    // 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (audits['modern-image-formats'] || audits['uses-optimized-images'] || audits['uses-webp-images']) {
      const imageOptimization = {
        id: 'image-optimization',
        category: 'images',
        title: 'üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        priority: 'high',
        savings: 0,
        items: [],
        recommendations: []
      };

      // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (audits['modern-image-formats']?.details?.items) {
        const modernFormats = audits['modern-image-formats'];
        imageOptimization.savings += modernFormats.details.overallSavingsBytes || 0;
        imageOptimization.items.push(...modernFormats.details.items.map(item => ({
          type: 'modern-format',
          url: item.url || item.node?.lhId || 'Unknown',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          recommendation: `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WebP –∏–ª–∏ AVIF (—ç–∫–æ–Ω–æ–º–∏—è: ${Math.round((item.wastedBytes || 0) / 1024)}KB)`
        })));
      }

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (audits['uses-optimized-images']?.details?.items) {
        const optimizedImages = audits['uses-optimized-images'];
        imageOptimization.savings += optimizedImages.details.overallSavingsBytes || 0;
        imageOptimization.items.push(...optimizedImages.details.items.map(item => ({
          type: 'optimization',
          url: item.url || item.node?.lhId || 'Unknown',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          recommendation: `–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏—è: ${Math.round((item.wastedBytes || 0) / 1024)}KB)`
        })));
      }

      // WebP —Ñ–æ—Ä–º–∞—Ç
      if (audits['uses-webp-images']?.details?.items) {
        const webpImages = audits['uses-webp-images'];
        imageOptimization.savings += webpImages.details.overallSavingsBytes || 0;
        imageOptimization.items.push(...webpImages.details.items.map(item => ({
          type: 'webp-format',
          url: item.url || item.node?.lhId || 'Unknown',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          recommendation: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebP —Ñ–æ—Ä–º–∞—Ç (—ç–∫–æ–Ω–æ–º–∏—è: ${Math.round((item.wastedBytes || 0) / 1024)}KB)`
        })));
      }

      if (imageOptimization.items.length > 0) {
        imageOptimization.summary = `–ù–∞–π–¥–µ–Ω–æ ${imageOptimization.items.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`;
        imageOptimization.totalSavings = `${Math.round(imageOptimization.savings / 1024)}KB`;
        opportunities.push(imageOptimization);
      }
    }

    // 2. CSS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑  
    if (audits['unused-css-rules'] || audits['render-blocking-resources']) {
      const cssOptimization = {
        id: 'css-optimization',
        category: 'css',
        title: 'üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS',
        priority: 'medium',
        savings: 0,
        items: [],
        recommendations: []
      };

      // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π CSS
      if (audits['unused-css-rules']?.details?.items) {
        const unusedCSS = audits['unused-css-rules'];
        cssOptimization.savings += unusedCSS.details.overallSavingsBytes || 0;
        cssOptimization.items.push(...unusedCSS.details.items.map(item => ({
          type: 'unused-css',
          url: item.url || 'Inline CSS',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          wastedPercent: item.wastedPercent || 0,
          recommendation: `–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π CSS (${Math.round(item.wastedPercent || 0)}% –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)`
        })));
      }

      // –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ CSS —Ä–µ—Å—É—Ä—Å—ã
      if (audits['render-blocking-resources']?.details?.items) {
        const blockingCSS = audits['render-blocking-resources'].details.items.filter(item => 
          item.url && item.url.includes('.css')
        );
        cssOptimization.items.push(...blockingCSS.map(item => ({
          type: 'render-blocking',
          url: item.url || 'Unknown CSS',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedMs || 0,
          recommendation: `–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ`
        })));
      }

      if (cssOptimization.items.length > 0) {
        cssOptimization.summary = `–ù–∞–π–¥–µ–Ω–æ ${cssOptimization.items.length} CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`;
        cssOptimization.totalSavings = `${Math.round(cssOptimization.savings / 1024)}KB`;
        opportunities.push(cssOptimization);
      }
    }

    // 3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å JavaScript
    if (audits['unused-javascript'] || audits['unminified-javascript']) {
      const jsOptimization = {
        id: 'js-optimization', 
        category: 'performance',
        title: '‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript',
        priority: 'high',
        savings: 0,
        items: [],
        recommendations: []
      };

      // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π JavaScript
      if (audits['unused-javascript']?.details?.items) {
        const unusedJS = audits['unused-javascript'];
        jsOptimization.savings += unusedJS.details.overallSavingsBytes || 0;
        jsOptimization.items.push(...unusedJS.details.items.map(item => ({
          type: 'unused-js',
          url: item.url || 'Inline JS',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          wastedPercent: item.wastedPercent || 0,
          recommendation: `–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π JavaScript (${Math.round(item.wastedPercent || 0)}% –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)`
        })));
      }

      // –ù–µ—Å–∂–∞—Ç—ã–π JavaScript
      if (audits['unminified-javascript']?.details?.items) {
        const unminifiedJS = audits['unminified-javascript'];
        jsOptimization.savings += unminifiedJS.details.overallSavingsBytes || 0;
        jsOptimization.items.push(...unminifiedJS.details.items.map(item => ({
          type: 'unminified-js',
          url: item.url || 'Unknown JS',
          currentSize: item.totalBytes || 0,
          potentialSavings: item.wastedBytes || 0,
          recommendation: `–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å JavaScript (—ç–∫–æ–Ω–æ–º–∏—è: ${Math.round((item.wastedBytes || 0) / 1024)}KB)`
        })));
      }

      if (jsOptimization.items.length > 0) {
        jsOptimization.summary = `–ù–∞–π–¥–µ–Ω–æ ${jsOptimization.items.length} JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`;
        jsOptimization.totalSavings = `${Math.round(jsOptimization.savings / 1024)}KB`;
        opportunities.push(jsOptimization);
      }
    }

    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${opportunities.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π Google PageSpeed –¥–ª—è ${strategy}`);
    return opportunities;

  } catch (error) {
    console.log('Error extracting Google opportunities:', error);
    return [];
  }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ Web Vitals –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateDemoWebVitals(strategy) {
  // –†–∞–∑–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è mobile –∏ desktop
  const isMobile = strategy === 'mobile';
  
  return {
    performance_score: isMobile ? Math.floor(Math.random() * 20) + 65 : Math.floor(Math.random() * 20) + 75, // 65-84 mobile, 75-94 desktop
    strategy: strategy,
    timestamp: new Date().toISOString(),
    source: 'demo_data',
    core_web_vitals: {
      lcp: {
        value: isMobile ? Math.random() * 1000 + 2000 : Math.random() * 800 + 1200, // ms
        score: isMobile ? Math.floor(Math.random() * 30) + 60 : Math.floor(Math.random() * 30) + 70,
        displayValue: isMobile ? `${(Math.random() * 1 + 2).toFixed(1)}s` : `${(Math.random() * 0.8 + 1.2).toFixed(1)}s`
      },
      fid: {
        value: isMobile ? Math.random() * 50 + 100 : Math.random() * 30 + 80, // ms
        score: isMobile ? Math.floor(Math.random() * 25) + 65 : Math.floor(Math.random() * 25) + 75,
        displayValue: isMobile ? `${Math.floor(Math.random() * 50 + 100)}ms` : `${Math.floor(Math.random() * 30 + 80)}ms`
      },
      cls: {
        value: isMobile ? Math.random() * 0.15 + 0.1 : Math.random() * 0.1 + 0.05, 
        score: isMobile ? Math.floor(Math.random() * 20) + 70 : Math.floor(Math.random() * 20) + 80,
        displayValue: isMobile ? (Math.random() * 0.15 + 0.1).toFixed(3) : (Math.random() * 0.1 + 0.05).toFixed(3)
      }
    },
    // –î–µ–º–æ Google —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    googleOpportunities: [
      {
        id: 'image-optimization',
        category: 'images',
        title: 'üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        priority: 'high',
        savings: Math.floor(Math.random() * 200000) + 50000,
        summary: `–ù–∞–π–¥–µ–Ω–æ ${Math.floor(Math.random() * 8) + 3} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`,
        totalSavings: `${Math.floor(Math.random() * 200) + 50}KB`,
        items: [
          {
            type: 'modern-format',
            url: 'https://cher17.fra1.cdn.digitaloceanspaces.com/public/slides/media/12407/hero-banner-main.jpg',
            currentSize: 156000,
            potentialSavings: 89000,
            recommendation: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WebP –∏–ª–∏ AVIF (—ç–∫–æ–Ω–æ–º–∏—è: 89KB)'
          },
          {
            type: 'optimization',
            url: 'https://cher17.fra1.cdn.digitaloceanspaces.com/public/products/media/8945/product-catalog-image.png',
            currentSize: 245000,
            potentialSavings: 156000,
            recommendation: '–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏—è: 156KB)'
          },
          {
            type: 'webp-format',
            url: 'https://cher17.fra1.cdn.digitaloceanspaces.com/public/collections/media/5623/collection-preview.jpg',
            currentSize: 89000,
            potentialSavings: 45000,
            recommendation: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebP —Ñ–æ—Ä–º–∞—Ç (—ç–∫–æ–Ω–æ–º–∏—è: 45KB)'
          },
          {
            type: 'modern-format',
            url: 'https://cher17.fra1.cdn.digitaloceanspaces.com/public/banners/media/3421/sale-banner-desktop.jpg',
            currentSize: 178000,
            potentialSavings: 98000,
            recommendation: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WebP –∏–ª–∏ AVIF (—ç–∫–æ–Ω–æ–º–∏—è: 98KB)'
          }
        ]
      },
      {
        id: 'css-optimization',
        category: 'css',
        title: 'üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS',
        priority: 'medium',
        savings: Math.floor(Math.random() * 100000) + 20000,
        summary: `–ù–∞–π–¥–µ–Ω–æ ${Math.floor(Math.random() * 5) + 2} CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`,
        totalSavings: `${Math.floor(Math.random() * 100) + 20}KB`,
        items: [
          {
            type: 'unused-css',
            url: 'https://cher17.com/assets/css/main-styles.css',
            currentSize: 89000,
            potentialSavings: 45000,
            wastedPercent: 51,
            recommendation: '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π CSS (51% –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)'
          },
          {
            type: 'render-blocking',
            url: 'https://cher17.com/assets/css/bootstrap.min.css',
            currentSize: 156000,
            potentialSavings: 0,
            recommendation: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ'
          },
          {
            type: 'unused-css',
            url: 'https://cher17.com/wp-content/themes/cher17/style.css',
            currentSize: 67000,
            potentialSavings: 32000,
            wastedPercent: 48,
            recommendation: '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π CSS (48% –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)'
          }
        ]
      }
    ],
    diagnostics: {
      dom_size: Math.floor(Math.random() * 1000) + 800,
      unused_css: Math.floor(Math.random() * 50000) + 20000,
      render_blocking: Math.floor(Math.random() * 5) + 2
    }
  };
}

router.post('/seo-audit', async (req, res) => {
  try {
    const { url, waitForFullData = true } = req.body; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–¥–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!url) {
      return res.status(400).json({ success: false, error: 'URL is required' });
    }

    let fullUrl = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      fullUrl = 'https://' + url;
    }
    
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ ${fullUrl} (waitForFullData: ${waitForFullData})`);

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª—é—á–∞—è Mobile-Friendly, SSL Labs, W3C Validator –∏ Security Headers
    const [htmlAnalysis, pageSpeedData, robotsCheck, sslCheck, resourcesCheck, mobileCheck, sslLabsCheck, w3cCheck, securityHeadersCheck] = await Promise.allSettled([
      analyzeHTML(fullUrl),
      getPageSpeedData(fullUrl, waitForFullData), // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      checkRobotsTxt(fullUrl),
      checkSSL(fullUrl),
      checkResourcesSpeed(fullUrl),
      checkMobileFriendly(fullUrl),
      checkSSLLabs(fullUrl),
      checkW3CValidator(fullUrl),
      checkSecurityHeaders(fullUrl)
    ]);

    let seoResult = {};
    let performanceData = null;
    let robotsData = null;
    let sslData = null;
    let resourcesData = null;
    let mobileData = null;
    let sslLabsData = null;
    let w3cData = null;
    let securityHeadersData = null;

    if (htmlAnalysis.status === 'fulfilled') {
      seoResult = htmlAnalysis.value;
    } else {
      throw new Error('HTML analysis failed: ' + htmlAnalysis.reason);
    }

    if (pageSpeedData.status === 'fulfilled') {
      performanceData = pageSpeedData.value;
      console.log('‚úÖ PageSpeed –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå PageSpeed –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å:', pageSpeedData.reason);
      
      if (waitForFullData) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∂–¥–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        return res.status(503).json({
          success: false,
          error: 'Google PageSpeed API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          details: '–ú—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
          retryAfter: 60 // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        });
      } else {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
        performanceData = null;
      }
    }

    if (robotsCheck.status === 'fulfilled') {
      robotsData = robotsCheck.value;
    }

    if (sslCheck.status === 'fulfilled') {
      sslData = sslCheck.value;
    }

    if (resourcesCheck.status === 'fulfilled') {
      resourcesData = resourcesCheck.value;
    } else {
      console.error('Resources check failed:', resourcesCheck.reason);
      resourcesData = { 
        error: resourcesCheck.reason?.message || 'Unknown error',
        loadTime: null,
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏'],
        warnings: []
      };
    }

    if (mobileCheck.status === 'fulfilled') {
      mobileData = mobileCheck.value;
    } else {
      console.error('Mobile check failed:', mobileCheck.reason);
      mobileData = { 
        error: mobileCheck.reason?.message || 'Unknown error',
        isMobileFriendly: false,
        status: 'ERROR',
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏'],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞']
      };
    }

    if (sslLabsCheck.status === 'fulfilled') {
      sslLabsData = sslLabsCheck.value;
    } else {
      console.error('SSL Labs check failed:', sslLabsCheck.reason);
      sslLabsData = { 
        error: sslLabsCheck.reason?.message || 'Unknown error',
        grade: null,
        hasSSL: false,
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL Labs'],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞']
      };
    }

    if (w3cCheck.status === 'fulfilled') {
      w3cData = w3cCheck.value;
    } else {
      console.error('W3C Validator check failed:', w3cCheck.reason);
      w3cData = { 
        error: w3cCheck.reason?.message || 'Unknown error',
        isValid: false,
        errors: [],
        warnings: [],
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ W3C –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞']
      };
    }

    if (securityHeadersCheck.status === 'fulfilled') {
      securityHeadersData = securityHeadersCheck.value;
    } else {
      console.error('Security Headers check failed:', securityHeadersCheck.reason);
      securityHeadersData = { 
        error: securityHeadersCheck.reason?.message || 'Unknown error',
        grade: null,
        score: 0,
        headers: {},
        issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞']
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º sitemap –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è robots.txt
    let sitemapData = null;
    try {
      sitemapData = await checkSitemap(fullUrl, robotsData);
    } catch (error) {
      console.error('Sitemap check failed:', error);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const enhancedResult = enhanceWithInsights(seoResult, performanceData, {
      robots: robotsData,
      sitemap: sitemapData,
      ssl: sslData,
      resources: resourcesData,
      mobile: mobileData,
      sslLabs: sslLabsData,
      w3c: w3cData,
      w3cValidator: seoResult.w3cValidator,
      securityHeaders: seoResult.securityHeaders || securityHeadersData,
      linkProfile: seoResult.linkProfile,
      sitelinks: seoResult.sitelinks
    });

    res.json({ success: true, results: enhancedResult });

  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTML –∞–Ω–∞–ª–∏–∑–∞
async function analyzeHTML(fullUrl) {
  const response = await fetch(fullUrl, {
    headers: { 'User-Agent': 'Mozilla/5.0' },
    timeout: 15000
  });

  if (!response.ok) {
    throw new Error('HTTP ' + response.status);
  }

  const html = await response.text();
  const $ = cheerio.load(html);

  return analyzeSEO($, html, fullUrl);
}

function analyzeSEO($, html, url) {
  const seo = {};

  // 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
  const title = $('title').text().trim();
  seo.title = {
    content: title,
    length: title.length,
    isOptimal: title.length >= 30 && title.length <= 60
  };

  // 2. Meta –æ–ø–∏—Å–∞–Ω–∏—è
  const description = $('meta[name="description"]').attr('content') || '';
  seo.metaDescription = {
    content: description,
    length: description.length,
    isOptimal: description.length >= 120 && description.length <= 160
  };

  // 3. Keywords meta —Ç–µ–≥
  const keywords = $('meta[name="keywords"]').attr('content') || '';
  seo.keywords = {
    content: keywords,
    count: keywords ? keywords.split(',').map(k => k.trim()).filter(k => k).length : 0
  };

  // 4. Open Graph —Ä–∞–∑–º–µ—Ç–∫–∞
  seo.openGraph = {
    title: $('meta[property="og:title"]').attr('content') || '',
    description: $('meta[property="og:description"]').attr('content') || '',
    image: $('meta[property="og:image"]').attr('content') || '',
    url: $('meta[property="og:url"]').attr('content') || '',
    type: $('meta[property="og:type"]').attr('content') || '',
    siteName: $('meta[property="og:site_name"]').attr('content') || ''
  };

  // 5. Twitter Cards
  seo.twitterCard = {
    card: $('meta[name="twitter:card"]').attr('content') || '',
    title: $('meta[name="twitter:title"]').attr('content') || '',
    description: $('meta[name="twitter:description"]').attr('content') || '',
    image: $('meta[name="twitter:image"]').attr('content') || '',
    site: $('meta[name="twitter:site"]').attr('content') || ''
  };

  // 6. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (JSON-LD + Microdata)
  console.log('üîç Starting structured data analysis...');
  try {
    const structuredDataAnalysis = analyzeStructuredDataAdvanced($, url);
    console.log('‚úÖ Structured data analysis completed:', structuredDataAnalysis?.count || 0, 'items');
    seo.structuredData = structuredDataAnalysis;
  } catch (error) {
    console.error('‚ùå Error in structured data analysis:', error);
    seo.structuredData = { count: 0, types: [], schemas: [], validation: { isValid: true, errors: [], warnings: [], recommendations: [] } };
  }

  // 7. –ú–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∞ (Schema.org)
  seo.microdata = {
    itemscope: $('[itemscope]').length,
    itemtype: []
  };
  
  $('[itemtype]').each((i, el) => {
    const itemtype = $(el).attr('itemtype');
    if (itemtype && !seo.microdata.itemtype.includes(itemtype)) {
      seo.microdata.itemtype.push(itemtype);
    }
  });

  // 8. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1-H6
  seo.headings = {
    h1: { count: $('h1').length, texts: [], issues: [] },
    h2: { count: $('h2').length, texts: [], issues: [] },
    h3: { count: $('h3').length, texts: [], issues: [] },
    h4: { count: $('h4').length, texts: [], issues: [] },
    h5: { count: $('h5').length, texts: [], issues: [] },
    h6: { count: $('h6').length, texts: [], issues: [] },
    structure: { isValid: true, issues: [] }
  };

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
  ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {
    $(tag).each((i, el) => {
      const text = $(el).text().trim();
      if (text) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (seo.headings[tag].texts.length < 5) {
          seo.headings[tag].texts.push({
            text: text,
            length: text.length,
            hasKeywords: title ? text.toLowerCase().includes(title.toLowerCase().split(' ')[0]) : false
          });
        }
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (tag === 'h1') {
      if (seo.headings.h1.count === 0) {
        seo.headings.h1.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫');
      } else if (seo.headings.h1.count > 1) {
        seo.headings.h1.issues.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (${seo.headings.h1.count})`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã H1
      if (seo.headings.h1.texts.length > 0) {
        const h1Length = seo.headings.h1.texts[0].length;
        if (h1Length < 20) {
          seo.headings.h1.issues.push('H1 —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20-70 —Å–∏–º–≤–æ–ª–æ–≤)');
        } else if (h1Length > 70) {
          seo.headings.h1.issues.push('H1 —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20-70 —Å–∏–º–≤–æ–ª–æ–≤)');
        }
      }
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headingLevels = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
  let previousLevel = 0;
  
  for (let i = 0; i < headingLevels.length; i++) {
    const currentCount = seo.headings[headingLevels[i]].count;
    if (currentCount > 0) {
      const currentLevel = i + 1;
      if (currentLevel > previousLevel + 1 && previousLevel > 0) {
        seo.headings.structure.isValid = false;
        seo.headings.structure.issues.push(`–ü—Ä–æ–ø—É—â–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H${previousLevel + 1} –ø–µ—Ä–µ–¥ H${currentLevel}`);
      }
      previousLevel = currentLevel;
    }
  }

  // 9. Canonical URL
  seo.canonical = {
    url: $('link[rel="canonical"]').attr('href') || '',
    isPresent: $('link[rel="canonical"]').length > 0
  };

  // 10. Robots meta —Ç–µ–≥
  const robotsMeta = $('meta[name="robots"]').attr('content') || '';
  seo.robots = {
    content: robotsMeta,
    noindex: robotsMeta.includes('noindex'),
    nofollow: robotsMeta.includes('nofollow'),
    noarchive: robotsMeta.includes('noarchive'),
    nosnippet: robotsMeta.includes('nosnippet')
  };

  // 11. Hreflang —Ç–µ–≥–∏
  seo.hreflang = [];
  $('link[rel="alternate"][hreflang]').each((i, el) => {
    seo.hreflang.push({
      lang: $(el).attr('hreflang'),
      href: $(el).attr('href')
    });
  });

  // 12. Sitemap –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
  seo.sitemap = {
    found: false,
    urls: []
  };
  
  // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ sitemap –≤ robots.txt —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
  $('a[href*="sitemap"]').each((i, el) => {
    const href = $(el).attr('href');
    if (href && (href.includes('sitemap.xml') || href.includes('sitemap'))) {
      seo.sitemap.urls.push(href);
      seo.sitemap.found = true;
    }
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SEO –º–µ—Ç—Ä–∏–∫–∏
  seo.additional = {
    viewport: $('meta[name="viewport"]').attr('content') || '',
    charset: $('meta[charset]').attr('charset') || '',
    lang: $('html').attr('lang') || '',
    favicon: $('link[rel*="icon"]').length > 0
  };

  // 13. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è SEO
  const images = $('img');
  seo.images = {
    total: images.length,
    withoutAlt: images.filter((i, el) => !$(el).attr('alt')).length,
    withEmptyAlt: images.filter((i, el) => $(el).attr('alt') === '').length
  };

  // 14. –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫
  const links = $('a[href]');
  const internalLinks = [];
  const externalLinks = [];
  const navigationLinks = [];
  
  links.each((i, el) => {
    const href = $(el).attr('href');
    const linkText = $(el).text().trim();
    const parentClass = $(el).parent().attr('class') || '';
    const linkClass = $(el).attr('class') || '';
    
    if (href) {
      if (href.startsWith('http://') || href.startsWith('https://')) {
        try {
          const linkUrl = new URL(href);
          const currentUrl = new URL(url);
          if (linkUrl.hostname === currentUrl.hostname) {
            internalLinks.push({
              href: href,
              text: linkText,
              isNavigation: isNavigationLink(parentClass, linkClass, linkText)
            });
          } else {
            externalLinks.push(href);
          }
        } catch (e) {
          // Invalid URL
        }
      } else if (href.startsWith('/') || !href.includes('://')) {
        internalLinks.push({
          href: href,
          text: linkText,
          isNavigation: isNavigationLink(parentClass, linkClass, linkText)
        });
      }
    }
  });

  // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  internalLinks.forEach(link => {
    if (link.isNavigation) {
      navigationLinks.push(link);
    }
  });

  seo.links = {
    total: links.length,
    internal: internalLinks.length,
    external: externalLinks.length,
    nofollow: $('a[rel*="nofollow"]').length,
    navigation: navigationLinks
  };

  // 15. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–ª—è Sitelinks
  seo.sitelinks = analyzeSitelinksPotential($, internalLinks, url);

  // 16. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  seo.linkProfile = analyzeLinkProfile($, internalLinks, externalLinks, url);

  // 17. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π)
  const textContent = $('body').text()
    .replace(/[\n\r\t]+/g, ' ')  // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    .replace(/[^\w\s–∞-—è—ë–ê-–Ø–Å\u0400-\u04FF\u0500-\u052F]/g, ' ')  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    .replace(/\s+/g, ' ')  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .trim();
  
  const words = textContent.split(' ').filter(word => word.length > 2); // –°–ª–æ–≤–∞ –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤
  const wordCount = words.length;
  const htmlSize = Buffer.byteLength(html, 'utf8');
  
  seo.performance = {
    htmlSize: htmlSize,
    htmlSizeKB: Math.round(htmlSize / 1024 * 100) / 100,
    wordCount: wordCount,
    textToHtmlRatio: Math.round((textContent.length / html.length) * 100),
    title_length_score: seo.title.isOptimal ? 100 : (seo.title.length === 0 ? 0 : Math.max(0, 100 - Math.abs(45 - seo.title.length) * 2)),
    description_length_score: seo.metaDescription.isOptimal ? 100 : (seo.metaDescription.length === 0 ? 0 : Math.max(0, 100 - Math.abs(140 - seo.metaDescription.length))),
    h1_score: seo.headings.h1.count === 1 ? 100 : (seo.headings.h1.count === 0 ? 0 : 50),
    content_score: wordCount >= 300 ? 100 : Math.round((wordCount / 300) * 100),
    images_alt_score: seo.images.total === 0 ? 100 : Math.round(((seo.images.total - seo.images.withoutAlt) / seo.images.total) * 100)
  };

  // 18. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤—ã–π)
  if (title && wordCount > 0) {
    const titleWords = title.toLowerCase().split(' ').filter(word => word.length > 3);
    seo.keywordAnalysis = {
      titleKeywords: titleWords.slice(0, 3),
      keywordDensity: {},
      recommendations: []
    };
    
    // –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    titleWords.forEach(keyword => {
      const regex = new RegExp(keyword, 'gi');
      const matches = (textContent.match(regex) || []).length;
      const density = Math.round((matches / wordCount) * 10000) / 100;
      seo.keywordAnalysis.keywordDensity[keyword] = {
        count: matches,
        density: density
      };
      
      if (density < 0.5) {
        seo.keywordAnalysis.recommendations.push(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword}" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ (${density}%)`);
      } else if (density > 3) {
        seo.keywordAnalysis.recommendations.push(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword}" –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Å–ø–∞–º–ª–µ–Ω–æ (${density}%)`);
      }
    });
  }

  // 17. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SEO –∞–Ω–∞–ª–∏–∑
  seo.technical = {
    https: url.startsWith('https://'),
    urlStructure: {
      length: url.length,
      hasParameters: url.includes('?'),
      hasFragment: url.includes('#'),
      isClean: !url.includes('?') && !url.includes('#') && url.length < 100
    },
    pageLoadHints: {
      hasLazyLoading: $('img[loading="lazy"]').length > 0,
      hasPreconnect: $('link[rel="preconnect"]').length > 0,
      hasPrefetch: $('link[rel="prefetch"], link[rel="preload"]').length > 0,
      hasMinifiedCSS: $('link[rel="stylesheet"]').filter((i, el) => {
        const href = $(el).attr('href');
        return href && href.includes('.min.');
      }).length > 0
    }
  };

  // Schema.org –≤–∞–ª–∏–¥–∞—Ü–∏—è
  try {
    console.log('üîç Starting Schema.org analysis...');
    seo.schemaValidation = analyzeSchemaOrg($, url);
    console.log('‚úÖ Schema.org analysis completed:', seo.schemaValidation ? 'success' : 'empty');
  } catch (error) {
    console.error('‚ùå Schema.org validation error:', error.message);
    console.error('Stack:', error.stack);
    seo.schemaValidation = {
      schemas: [],
      richSnippetsOpportunities: [],
      score: 0,
      maxScore: 100,
      issues: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Schema.org: ' + error.message],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']
    };
  }

  return seo;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
function enhanceWithInsights(seoData, performanceData, additionalData = {}) {
  const enhanced = { ...seoData };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  enhanced.webVitals = performanceData;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (additionalData.robots) {
    enhanced.robotsCheck = additionalData.robots;
  }
  
  if (additionalData.sitemap) {
    enhanced.sitemapCheck = additionalData.sitemap;
  }
  
  if (additionalData.ssl) {
    enhanced.ssl = additionalData.ssl;
  }
  
  if (additionalData.resources) {
    enhanced.resourcesSpeed = additionalData.resources;
  }

  if (additionalData.mobile) {
    enhanced.mobileFriendly = additionalData.mobile;
  }

  if (additionalData.sslLabs) {
    enhanced.sslLabs = additionalData.sslLabs;
  }

  if (additionalData.w3c) {
    enhanced.w3cValidator = additionalData.w3c;
  }

  if (additionalData.securityHeaders) {
    enhanced.securityHeaders = additionalData.securityHeaders;
  }

  // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π SEO Health Score
  enhanced.overallScore = calculateOverallScore(seoData, performanceData, { ...additionalData, schemaValidation: seoData.schemaValidation, sitelinks: seoData.sitelinks });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
  enhanced.actionPlan = generateActionPlan(seoData, performanceData, { ...additionalData, schemaValidation: seoData.schemaValidation });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  enhanced.visualData = generateVisualData(seoData, performanceData);
  
  return enhanced;
}

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ SEO Health Score
function calculateOverallScore(seoData, performanceData, additionalData = {}) {
  const scores = {
    technical: 0,
    content: 0,
    performance: 0,
    overall: 0
  };
  
  // Technical SEO (40% –≤–µ—Å–∞) - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  let technicalPoints = 0;
  
  // –ë–∞–∑–æ–≤—ã–µ SEO —ç–ª–µ–º–µ–Ω—Ç—ã (60 –±–∞–ª–ª–æ–≤)
  technicalPoints += seoData.title?.isOptimal ? 15 : 0;
  technicalPoints += seoData.metaDescription?.isOptimal ? 12 : 0;
  technicalPoints += seoData.headings?.h1?.count === 1 ? 12 : 0;
  technicalPoints += seoData.technical?.https ? 8 : 0;
  technicalPoints += seoData.canonical?.isPresent ? 8 : 0;
  technicalPoints += (seoData.openGraph?.title ? 5 : 0);
  
  // Schema.org –≤–∞–ª–∏–¥–∞—Ü–∏—è (20 –±–∞–ª–ª–æ–≤) - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
  if (additionalData.schemaValidation) {
    const schemaVal = additionalData.schemaValidation;
    
    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ Schema.org (0-100 -> 0-15 –±–∞–ª–ª–æ–≤)
    technicalPoints += Math.round(schemaVal.score / 100 * 15);
    
    // –ë–æ–Ω—É—Å –∑–∞ Rich Snippets –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (+5 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å)
    const highPriorityOpportunities = schemaVal.richSnippetsOpportunities?.filter(opp => opp.priority === 'high')?.length || 0;
    technicalPoints += Math.min(highPriorityOpportunities * 2, 5);
  } else if (seoData.structuredData?.count > 0) {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
    technicalPoints += Math.min(seoData.structuredData.count * 3, 15);
  }
  
  // W3C –≤–∞–ª–∏–¥–∞—Ü–∏—è (10 –±–∞–ª–ª–æ–≤)
  if (additionalData.w3cValidator) {
    const errorCount = additionalData.w3cValidator.errors?.count || 0;
    if (errorCount === 0) {
      technicalPoints += 10;
    } else if (errorCount <= 5) {
      technicalPoints += 7;
    } else if (errorCount <= 10) {
      technicalPoints += 4;
    }
    // >10 –æ—à–∏–±–æ–∫ = 0 –±–∞–ª–ª–æ–≤
  }
  
  // Security Headers (8 –±–∞–ª–ª–æ–≤)
  if (additionalData.securityHeaders?.score) {
    technicalPoints += Math.round(additionalData.securityHeaders.score / 10 * 0.8);
  }
  
  // SSL Labs –∫–∞—á–µ—Å—Ç–≤–æ (7 –±–∞–ª–ª–æ–≤)
  if (additionalData.sslLabs?.grade) {
    const sslGrade = additionalData.sslLabs.grade;
    if (sslGrade === 'A+') {
      technicalPoints += 7;
    } else if (sslGrade === 'A') {
      technicalPoints += 6;
    } else if (sslGrade === 'B') {
      technicalPoints += 4;
    } else if (sslGrade === 'C') {
      technicalPoints += 2;
    }
    // D, F = 0 –±–∞–ª–ª–æ–≤
  }
  
  // Robots.txt + Sitemap (5 –±–∞–ª–ª–æ–≤)
  technicalPoints += additionalData.robots?.found ? 2.5 : 0;
  technicalPoints += additionalData.sitemap?.found ? 2.5 : 0;
  
  // –ú–∞–∫—Å–∏–º—É–º Technical: 110 –±–∞–ª–ª–æ–≤ (60 –±–∞–∑–æ–≤—ã–µ + 20 Schema.org + 10 W3C + 8 Security + 7 SSL + 5 robots/sitemap)
  scores.technical = Math.min(Math.round(technicalPoints), 100);
  
  // Content Quality (30% –≤–µ—Å–∞) - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  let contentPoints = 0;
  
  // –û–±—ä–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (50 –±–∞–ª–ª–æ–≤)
  const wordCount = seoData.performance?.wordCount || 0;
  if (wordCount >= 500) {
    contentPoints += 25;
  } else if (wordCount >= 300) {
    contentPoints += 20;
  } else {
    contentPoints += Math.round(wordCount / 300 * 20);
  }
  
  // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç/HTML
  const textToHtmlRatio = seoData.performance?.textToHtmlRatio || 0;
  if (textToHtmlRatio >= 20) {
    contentPoints += 15;
  } else {
    contentPoints += Math.round(textToHtmlRatio / 20 * 15);
  }
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const hasH2 = seoData.headings?.h2?.count > 0;
  const hasH3 = seoData.headings?.h3?.count > 0;
  contentPoints += hasH2 ? 5 : 0;
  contentPoints += hasH3 ? 5 : 0;
  
  // SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (30 –±–∞–ª–ª–æ–≤)
  contentPoints += (seoData.keywordAnalysis?.titleKeywords?.length || 0) > 0 ? 15 : 0;
  
  // Alt-—Ç–µ–∫—Å—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (seoData.images?.total > 0) {
    const altTextCoverage = ((seoData.images.total - seoData.images.withoutAlt) / seoData.images.total) * 100;
    contentPoints += Math.round(altTextCoverage / 100 * 15);
  } else {
    contentPoints += 15;
  }
  
  // Link Profile –∞–Ω–∞–ª–∏–∑ (20 –±–∞–ª–ª–æ–≤)
  if (additionalData.linkProfile) {
    const linkProfile = additionalData.linkProfile;
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞
    if (linkProfile.internal?.total >= 10) {
      contentPoints += 10;
    } else {
      contentPoints += Math.round((linkProfile.internal?.total || 0) / 10 * 10);
    }
    
    // –ë–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö/–≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    if (linkProfile.ratios?.internalToExternal >= 3) {
      contentPoints += 5;
    } else {
      contentPoints += Math.round((linkProfile.ratios?.internalToExternal || 0) / 3 * 5);
    }
    
    // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ anchor —Ç–µ–∫—Å—Ç–æ–≤
    if (linkProfile.ratios?.anchorDiversity >= 5) {
      contentPoints += 5;
    } else {
      contentPoints += Math.round((linkProfile.ratios?.anchorDiversity || 0) / 5 * 5);
    }
  }
  
  // Sitelinks –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (10 –±–∞–ª–ª–æ–≤)
  if (additionalData.sitelinks) {
    const sitelinksScore = additionalData.sitelinks.score || 0;
    contentPoints += Math.round(sitelinksScore / 100 * 10);
  }
  
  // –ú–∞–∫—Å–∏–º—É–º Content: 130 –±–∞–ª–ª–æ–≤ (50 –∫–æ–Ω—Ç–µ–Ω—Ç + 30 SEO + 15 alt + 20 links + 10 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + 10 sitelinks - —É—Ä–µ–∑–∞–Ω–æ –¥–æ 100)
  scores.content = Math.min(Math.round(contentPoints), 100);
  
  // Performance (30% –≤–µ—Å–∞) - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Core Web Vitals
  let performancePoints = 0;
  const mobileData = performanceData?.mobile;
  const desktopData = performanceData?.desktop;
  const primaryData = mobileData || desktopData; // Mobile-First –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  
  if (primaryData) {
    // Core Web Vitals –¥–µ—Ç–∞–ª—å–Ω–æ (60 –±–∞–ª–ª–æ–≤)
    if (primaryData.core_web_vitals) {
      const cwv = primaryData.core_web_vitals;
      
      // LCP - Largest Contentful Paint (25 –±–∞–ª–ª–æ–≤)
      if (cwv.lcp?.score >= 90) {
        performancePoints += 25;
      } else if (cwv.lcp?.score >= 50) {
        performancePoints += Math.round(cwv.lcp.score / 90 * 25);
      }
      
      // FCP - First Contentful Paint (20 –±–∞–ª–ª–æ–≤) 
      if (cwv.fcp?.score >= 90) {
        performancePoints += 20;
      } else if (cwv.fcp?.score >= 50) {
        performancePoints += Math.round(cwv.fcp.score / 90 * 20);
      }
      
      // CLS - Cumulative Layout Shift (15 –±–∞–ª–ª–æ–≤)
      if (cwv.cls?.score >= 90) {
        performancePoints += 15;
      } else if (cwv.cls?.score >= 50) {
        performancePoints += Math.round(cwv.cls.score / 90 * 15);
      }
    } else {
      // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö CWV, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π score
      performancePoints += Math.round(primaryData.performance_score * 0.6);
    }
    
    // Overall Performance Score (30 –±–∞–ª–ª–æ–≤)
    performancePoints += Math.round(primaryData.performance_score * 0.3);
    
    // Mobile-Friendly (10 –±–∞–ª–ª–æ–≤)
    if (additionalData.mobile?.score >= 80) {
      performancePoints += 10;
    } else if (additionalData.mobile?.score >= 60) {
      performancePoints += 7;
    } else if (additionalData.mobile?.score >= 40) {
      performancePoints += 4;
    }
  } else {
    // –ï—Å–ª–∏ PageSpeed –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    performancePoints = 50;
  }
  
  scores.performance = Math.min(Math.round(performancePoints), 100);
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –≤–µ—Å–∞–º–∏
  scores.overall = Math.round(
    scores.technical * 0.4 + 
    scores.content * 0.3 + 
    scores.performance * 0.3
  );
  
  return scores;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Action Plan —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
function generateActionPlan(seoData, performanceData, additionalData = {}) {
  const actions = [];
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)
  if (!seoData.title?.isOptimal) {
    actions.push({
      priority: 'critical',
      category: 'SEO',
      task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      description: `–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ${seoData.title?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 30-60 —Å–∏–º–≤–æ–ª–æ–≤.`,
      impact: 'high',
      effort: 'low',
      expectedImprovement: '+25-40% CTR –≤ –ø–æ–∏—Å–∫–µ'
    });
  }
  
  if (seoData.headings?.h1?.count !== 1) {
    actions.push({
      priority: 'critical',
      category: 'SEO',
      task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É H1',
      description: seoData.headings?.h1?.count === 0 ? 'H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : `–ù–∞–π–¥–µ–Ω–æ ${seoData.headings.h1.count} H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`,
      impact: 'high',
      effort: 'low',
      expectedImprovement: '+15-25% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤'
    });
  }
  
  // –í–∞–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
  if (!seoData.metaDescription?.isOptimal) {
    actions.push({
      priority: 'important',
      category: 'SEO',
      task: '–£–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      description: `–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ${seoData.metaDescription?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 120-160 —Å–∏–º–≤–æ–ª–æ–≤.`,
      impact: 'medium',
      effort: 'low',
      expectedImprovement: '+10-20% CTR –≤ –ø–æ–∏—Å–∫–µ'
    });
  }
  
  if (performanceData?.mobile?.core_web_vitals?.lcp?.score < 50) {
    actions.push({
      priority: 'important',
      category: 'Performance',
      task: '–£–ª—É—á—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (LCP)',
      description: `–¢–µ–∫—É—â–∏–π LCP: ${performanceData.mobile.core_web_vitals.lcp.displayValue}. –¶–µ–ª—å: < 2.5s`,
      impact: 'high',
      effort: 'high',
      expectedImprovement: '+10-15% —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ, +20% –∫–æ–Ω–≤–µ—Ä—Å–∏—è'
    });
  }
  
  if ((seoData.images?.withoutAlt || 0) > 0) {
    actions.push({
      priority: 'important',
      category: 'Accessibility',
      task: '–î–æ–±–∞–≤–∏—Ç—å alt-—Ç–µ–∫—Å—Ç—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º',
      description: `${seoData.images.withoutAlt} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ ${seoData.images.total}`,
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+5-10% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ SEO'
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Schema.org –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  if (additionalData.schemaValidation) {
    const schemaVal = additionalData.schemaValidation;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Rich Snippets –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    if (schemaVal.richSnippetsOpportunities && schemaVal.richSnippetsOpportunities.length > 0) {
      // –ë–µ—Ä–µ–º —Ç–æ–ø-3 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      const topOpportunities = schemaVal.richSnippetsOpportunities
        .filter(opp => opp.priority === 'high' || opp.priority === 'medium')
        .slice(0, 3);
      
      topOpportunities.forEach(opportunity => {
        actions.push({
          priority: opportunity.priority === 'high' ? 'important' : 'recommended',
          category: 'SEO',
          task: `–î–æ–±–∞–≤–∏—Ç—å ${opportunity.type} schema`,
          description: opportunity.description,
          impact: opportunity.priority === 'high' ? 'high' : 'medium',
          effort: 'medium',
          expectedImprovement: opportunity.impact || '+15-30% rich snippets –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
        });
      });
    }
    
    // –û–±—â–∞—è –∑–∞–¥–∞—á–∞ –µ—Å–ª–∏ Score –Ω–∏–∑–∫–∏–π
    if (schemaVal.score < 50 && schemaVal.schemas.length === 0) {
      actions.push({
        priority: 'recommended',
        category: 'SEO',
        task: '–í–Ω–µ–¥—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        description: `–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ Schema.org: ${schemaVal.score}/100. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${schemaVal.richSnippetsOpportunities.length} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.`,
        impact: 'medium',
        effort: 'medium',
        expectedImprovement: '+20-40% —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ'
      });
    }
  } else if ((seoData.structuredData?.count || 0) === 0) {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
    actions.push({
      priority: 'recommended',
      category: 'SEO',
      task: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      description: 'Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å rich snippets.',
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+15-30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å rich snippets'
    });
  }
  
  if (!seoData.openGraph?.title) {
    actions.push({
      priority: 'recommended',
      category: 'Social',
      task: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π',
      description: 'Open Graph —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–ª—É—á—à–∏—Ç –≤–∏–¥ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.',
      impact: 'low',
      effort: 'low',
      expectedImprovement: '+20-40% CTR –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö'
    });
  }

  // –ù–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ robots.txt –∏ sitemap
  if (additionalData.robots && !additionalData.robots.found) {
    actions.push({
      priority: 'important',
      category: 'Technical',
      task: '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª robots.txt',
      description: 'Robots.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π.',
      impact: 'medium',
      effort: 'low',
      expectedImprovement: '+5-10% –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏'
    });
  }

  if (additionalData.robots?.issues?.length > 0) {
    actions.push({
      priority: 'recommended',
      category: 'Technical',
      task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ robots.txt',
      description: `–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${additionalData.robots.issues.join(', ')}`,
      impact: 'low',
      effort: 'low',
      expectedImprovement: '+3-5% SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
    });
  }

  if (additionalData.sitemap && !additionalData.sitemap.found) {
    actions.push({
      priority: 'important',
      category: 'Technical',
      task: '–°–æ–∑–¥–∞—Ç—å sitemap.xml',
      description: 'Sitemap.xml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–æ–∂–µ—Ç –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º –ª—É—á—à–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç.',
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+10-15% —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏'
    });
  }

  if (additionalData.ssl && !additionalData.ssl.hasSSL) {
    actions.push({
      priority: 'critical',
      category: 'Security',
      task: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å HTTPS',
      description: '–°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ SEO.',
      impact: 'high',
      effort: 'high',
      expectedImprovement: '+15-25% –¥–æ–≤–µ—Ä–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ SEO'
    });
  }

  if (additionalData.resources?.loadTime > 3000) {
    actions.push({
      priority: 'important',
      category: 'Performance',
      task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏',
      description: `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ${additionalData.resources.loadTime}ms —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ.`,
      impact: 'high',
      effort: 'high',
      expectedImprovement: '+20-30% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç'
    });
  }

  if (additionalData.resources?.cssFiles > 10 || additionalData.resources?.jsFiles > 15) {
    actions.push({
      priority: 'recommended',
      category: 'Performance',
      task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤',
      description: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ CSS/JS —Ñ–∞–π–ª–æ–≤ (${additionalData.resources.cssFiles}/${additionalData.resources.jsFiles}).`,
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+10-15% —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏'
    });
  }

  // W3C Validation –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (additionalData.w3cValidator && !additionalData.w3cValidator.isValid) {
    const errorCount = additionalData.w3cValidator.errors?.count || 0;
    if (errorCount > 0) {
      actions.push({
        priority: errorCount > 10 ? 'important' : 'recommended',
        category: 'Technical',
        task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ HTML –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        description: `–ù–∞–π–¥–µ–Ω–æ ${errorCount} –æ—à–∏–±–æ–∫ –≤ HTML –∫–æ–¥–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ SEO.`,
        impact: errorCount > 10 ? 'medium' : 'low',
        effort: 'medium',
        expectedImprovement: '+5-10% —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ SEO'
      });
    }
  }

  // Security Headers –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (additionalData.securityHeaders && additionalData.securityHeaders.score < 70) {
    const missing = additionalData.securityHeaders.summary?.missing || 0;
    actions.push({
      priority: missing > 3 ? 'important' : 'recommended',
      category: 'Security',
      task: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      description: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missing} –≤–∞–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û—Ü–µ–Ω–∫–∞: ${additionalData.securityHeaders.score}/100`,
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+10-15% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ–≤–µ—Ä–∏–µ'
    });
  }

  // Link Profile –∞–Ω–∞–ª–∏–∑
  if (additionalData.linkProfile) {
    const linkProfile = additionalData.linkProfile;
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if (linkProfile.internal?.total < 10) {
      actions.push({
        priority: 'important',
        category: 'SEO',
        task: '–£–ª—É—á—à–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É',
        description: `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${linkProfile.internal.total} –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10-15.`,
        impact: 'medium',
        effort: 'medium',
        expectedImprovement: '+10-20% –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π PageRank'
      });
    }

    // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫ –≤–Ω–µ—à–Ω–∏–º
    if (linkProfile.ratios?.internalToExternal < 2) {
      actions.push({
        priority: 'recommended',
        category: 'SEO',
        task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—Å—ã–ª–æ–∫',
        description: `–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º: ${linkProfile.ratios.internalToExternal}:1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3:1 –∏–ª–∏ –±–æ–ª—å—à–µ.`,
        impact: 'low',
        effort: 'low',
        expectedImprovement: '+5-10% —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ –≤–µ—Å–∞'
      });
    }

    // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ anchor —Ç–µ–∫—Å—Ç–æ–≤
    if (linkProfile.ratios?.anchorDiversity < 5) {
      actions.push({
        priority: 'recommended',
        category: 'SEO',
        task: '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—ã —Å—Å—ã–ª–æ–∫',
        description: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ ${linkProfile.ratios.anchorDiversity} —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å—Å—ã–ª–æ–∫. –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ.`,
        impact: 'low',
        effort: 'low',
        expectedImprovement: '+3-7% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫'
      });
    }

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    if (!linkProfile.external?.social || linkProfile.external.social.length === 0) {
      actions.push({
        priority: 'recommended',
        category: 'Social',
        task: '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
        description: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏. –≠—Ç–æ —É–ª—É—á—à–∏—Ç engagement.',
        impact: 'low',
        effort: 'low',
        expectedImprovement: '+10-20% —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã'
      });
    }
  }

  // Sitelinks –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
  if (additionalData.sitelinks && additionalData.sitelinks.score < 70) {
    actions.push({
      priority: 'recommended',
      category: 'SEO',
      task: '–£–ª—É—á—à–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è Sitelinks',
      description: `–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${additionalData.sitelinks.score}/100. –£–ª—É—á—à–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞.`,
      impact: 'medium',
      effort: 'medium',
      expectedImprovement: '+20-30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è sitelinks'
    });
  }

  // URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  if (seoData.technical?.urlStructure) {
    const urlStruct = seoData.technical.urlStructure;
    if (urlStruct.length > 100) {
      actions.push({
        priority: 'recommended',
        category: 'Technical',
        task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω—É URL',
        description: `URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${urlStruct.length} —Å–∏–º–≤–æ–ª–æ–≤). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.`,
        impact: 'low',
        effort: 'low',
        expectedImprovement: '+3-5% —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
      });
    }
    
    if (urlStruct.hasParameters) {
      actions.push({
        priority: 'recommended',
        category: 'Technical',
        task: '–û—á–∏—Å—Ç–∏—Ç—å URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        description: 'URL —Å–æ–¥–µ—Ä–∂–∏—Ç GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ß–ü–£.',
        impact: 'low',
        effort: 'medium',
        expectedImprovement: '+5-8% SEO-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å URL'
      });
    }
  }

  // Mobile adaptivity
  if (additionalData.mobile && additionalData.mobile.score < 80) {
    actions.push({
      priority: 'critical',
      category: 'Mobile',
      task: '–£–ª—É—á—à–∏—Ç—å –º–æ–±–∏–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: `–û—Ü–µ–Ω–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: ${additionalData.mobile.score}/100. Mobile-first –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞.`,
      impact: 'high',
      effort: 'high',
      expectedImprovement: '+25-40% –º–æ–±–∏–ª—å–Ω–æ–µ SEO'
    });
  }

  // Core Web Vitals –¥–µ—Ç–∞–ª—å–Ω–æ
  if (performanceData?.mobile?.core_web_vitals) {
    const cwv = performanceData.mobile.core_web_vitals;
    
    if (cwv.fcp?.score < 50) {
      actions.push({
        priority: 'important',
        category: 'Performance',
        task: '–£–ª—É—á—à–∏—Ç—å First Contentful Paint',
        description: `FCP: ${cwv.fcp.displayValue}. –¶–µ–ª—å: < 1.8s –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.`,
        impact: 'high',
        effort: 'high',
        expectedImprovement: '+15-25% —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏'
      });
    }

    if (cwv.cls?.score < 50) {
      actions.push({
        priority: 'important',
        category: 'Performance',
        task: '–£–º–µ–Ω—å—à–∏—Ç—å —Å–¥–≤–∏–≥ –º–∞–∫–µ—Ç–∞ (CLS)',
        description: `CLS: ${cwv.cls.displayValue}. –¶–µ–ª—å: < 0.1 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∞–∫–µ—Ç–∞.`,
        impact: 'medium',
        effort: 'medium',
        expectedImprovement: '+10-20% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç'
      });
    }
  }

  // Heading hierarchy
  if (seoData.headings) {
    const headings = seoData.headings;
    if (!headings.h2?.count || headings.h2.count === 0) {
      actions.push({
        priority: 'recommended',
        category: 'SEO',
        task: '–î–æ–±–∞–≤–∏—Ç—å H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏',
        description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
        impact: 'medium',
        effort: 'low',
        expectedImprovement: '+5-15% —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      });
    }
  }

  // Content length analysis
  if (seoData.content && seoData.content.textLength < 300) {
    actions.push({
      priority: 'important',
      category: 'Content',
      task: '–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      description: `–¢–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${seoData.content.textLength} —Å–∏–º–≤–æ–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 300-500.`,
      impact: 'medium',
      effort: 'high',
      expectedImprovement: '+15-25% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'
    });
  }

  // Google PageSpeed Insights —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (performanceData?.mobile?.googleOpportunities || performanceData?.desktop?.googleOpportunities) {
    const opportunities = performanceData.mobile?.googleOpportunities || performanceData.desktop?.googleOpportunities || [];
    console.log(`üîç Processing ${opportunities.length} PageSpeed opportunities for action plan`);
    
    opportunities.forEach(opportunity => {
      console.log(`üìä Opportunity: ${opportunity.category}, savings: ${opportunity.savings}KB, title: ${opportunity.title}`);
      if (opportunity.category === 'images' && opportunity.savings > 50) { // > 50KB —ç–∫–æ–Ω–æ–º–∏–∏
        actions.push({
          priority: opportunity.savings > 200 ? 'critical' : 'important', // > 200KB = –∫—Ä–∏—Ç–∏—á–Ω–æ
          category: 'Performance',
          task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          description: `–°–∂–∞—Ç–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å ${Math.round(opportunity.savings)}KB. –ù–∞–π–¥–µ–Ω–æ ${opportunity.items?.length || 0} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`,
          impact: 'high',
          effort: 'medium',
          expectedImprovement: '+20-35% —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        });
      }
      
      if (opportunity.category === 'css' && opportunity.savings > 30) { // > 30KB —ç–∫–æ–Ω–æ–º–∏–∏
        actions.push({
          priority: opportunity.savings > 100 ? 'important' : 'recommended', // > 100KB = –≤–∞–∂–Ω–æ
          category: 'Performance',
          task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å CSS —Ñ–∞–π–ª—ã',
          description: `–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ CSS –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å ${Math.round(opportunity.savings)}KB. –ù–∞–π–¥–µ–Ω–æ ${opportunity.items?.length || 0} CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`,
          impact: 'medium',
          effort: 'high',
          expectedImprovement: '+10-20% —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏'
        });
      }
      
      if ((opportunity.category === 'performance' || opportunity.category === 'javascript') && opportunity.savings > 20) { // > 20KB —ç–∫–æ–Ω–æ–º–∏–∏
        console.log(`üéØ JavaScript optimization found: ${opportunity.savings}KB savings, category: ${opportunity.category}`);
        actions.push({
          priority: opportunity.savings > 80 ? 'important' : 'recommended', // > 80KB = –≤–∞–∂–Ω–æ
          category: 'Performance', 
          task: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å JavaScript —Ñ–∞–π–ª—ã',
          description: `–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ JS –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å ${Math.round(opportunity.savings)}KB. –ù–∞–π–¥–µ–Ω–æ ${opportunity.items?.length || 0} JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`,
          impact: 'medium',
          effort: 'high',
          expectedImprovement: '+15-25% –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        });
      }
    });
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PageSpeed
  const performanceScore = performanceData?.mobile?.performance_score || performanceData?.desktop?.performance_score;
  if (performanceScore && performanceScore < 90) {
    if (performanceScore < 50) {
      actions.push({
        priority: 'critical',
        category: 'PageSpeed Insights',
        task: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        description: `–û—Ü–µ–Ω–∫–∞ PageSpeed: ${performanceScore}/100. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫—Ä–∞–π–Ω–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`,
        impact: 'high', 
        effort: 'high',
        expectedImprovement: '+40-60% —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ SEO'
      });
    } else if (performanceScore < 70) {
      actions.push({
        priority: 'important',
        category: 'PageSpeed Insights',
        task: '–£–ª—É—á—à–∏—Ç—å –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        description: `–û—Ü–µ–Ω–∫–∞ PageSpeed: ${performanceScore}/100. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞.`,
        impact: 'high',
        effort: 'medium',
        expectedImprovement: '+25-40% –æ–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
      });
    } else {
      actions.push({
        priority: 'recommended',
        category: 'PageSpeed Insights',
        task: '–î–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –æ—Ç–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
        description: `–û—Ü–µ–Ω–∫–∞ PageSpeed: ${performanceScore}/100. –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–∏–π –¥–∞–¥—É—Ç –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`,
        impact: 'medium',
        effort: 'low',
        expectedImprovement: '+10-20% —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
      });
    }
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ Core Web Vitals —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ PageSpeed –¥–∞–Ω–Ω—ã—Ö
  if (performanceData?.mobile?.core_web_vitals) {
    const cwv = performanceData.mobile.core_web_vitals;
    
    // LCP –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (cwv.lcp?.score < 50 && cwv.lcp?.displayValue) {
      const lcpValue = parseFloat(cwv.lcp.displayValue);
      if (lcpValue > 4.0) {
        actions.push({
          priority: 'critical',
          category: 'Core Web Vitals',
          task: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∏—Ç—å LCP',
          description: `LCP ${cwv.lcp.displayValue} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`,
          impact: 'high',
          effort: 'high',
          expectedImprovement: '+30-50% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –∏ SEO'
        });
      } else if (lcpValue > 2.5) {
        actions.push({
          priority: 'important',
          category: 'Core Web Vitals',
          task: '–£–ª—É—á—à–∏—Ç—å Largest Contentful Paint',
          description: `LCP ${cwv.lcp.displayValue} —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –¶–µ–ª—å: –º–µ–Ω–µ–µ 2.5s –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.`,
          impact: 'high',
          effort: 'medium',
          expectedImprovement: '+20-30% Core Web Vitals –æ—Ü–µ–Ω–∫–∞'
        });
      }
    }
    
    // FID/INP –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
    if (cwv.fid?.score < 50 || cwv.inp?.score < 50) {
      const fidValue = cwv.fid?.displayValue || cwv.inp?.displayValue;
      actions.push({
        priority: 'important',
        category: 'Core Web Vitals',
        task: '–£–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        description: `–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${fidValue}. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`,
        impact: 'high',
        effort: 'high',
        expectedImprovement: '+25-40% –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ UX'
      });
    }
    
    // CLS –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (cwv.cls?.score < 50) {
      const clsValue = parseFloat(cwv.cls?.displayValue || '0');
      if (clsValue > 0.25) {
        actions.push({
          priority: 'important',
          category: 'Core Web Vitals',
          task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–∫–µ—Ç–∞',
          description: `CLS ${cwv.cls.displayValue} –≤—ã–∑—ã–≤–∞–µ—Ç —Å–¥–≤–∏–≥–∏ –º–∞–∫–µ—Ç–∞. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –±–ª–æ–∫–æ–≤.`,
          impact: 'medium',
          effort: 'medium',
          expectedImprovement: '+15-25% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
        });
      }
    }
  }
  
  return actions.sort((a, b) => {
    const priorityOrder = { critical: 3, important: 2, recommended: 1 };
    return priorityOrder[b.priority] - priorityOrder[a.priority];
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
function generateVisualData(seoData, performanceData) {
  return {
    scoreBreakdown: {
      technical: calculateOverallScore(seoData, performanceData).technical,
      content: calculateOverallScore(seoData, performanceData).content,
      performance: calculateOverallScore(seoData, performanceData).performance
    },
    headingsChart: {
      h1: seoData.headings?.h1?.count || 0,
      h2: seoData.headings?.h2?.count || 0,
      h3: seoData.headings?.h3?.count || 0,
      h4: seoData.headings?.h4?.count || 0,
      h5: seoData.headings?.h5?.count || 0,
      h6: seoData.headings?.h6?.count || 0
    },
    contentStats: {
      wordCount: seoData.performance?.wordCount || 0,
      imagesTotal: seoData.images?.total || 0,
      imagesWithoutAlt: seoData.images?.withoutAlt || 0,
      linksInternal: seoData.links?.internal || 0,
      linksExternal: seoData.links?.external || 0
    },
    coreWebVitals: performanceData?.mobile?.core_web_vitals || null
  };
}

// === STRUCTURED DATA –ê–ù–ê–õ–ò–ó ===

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function analyzeStructuredDataAdvanced($, url) {
  const analysis = {
    count: 0,
    types: [],
    schemas: [],
    validation: {
      isValid: true,
      errors: [],
      warnings: [],
      recommendations: []
    },
    richSnippetsOpportunities: [],
    coverage: {
      hasJsonLd: false,
      hasMicrodata: false,
      hasRdfa: false
    }
  };

  // 1. –ê–Ω–∞–ª–∏–∑ JSON-LD
  const jsonLdData = analyzeJsonLd($);
  analysis.count += jsonLdData.count;
  analysis.types = [...analysis.types, ...jsonLdData.types];
  analysis.schemas = [...analysis.schemas, ...jsonLdData.schemas];
  analysis.coverage.hasJsonLd = jsonLdData.count > 0;

  // 2. –ê–Ω–∞–ª–∏–∑ Microdata
  const microdataData = analyzeMicrodata($);
  analysis.count += microdataData.count;
  analysis.types = [...analysis.types, ...microdataData.types];
  analysis.coverage.hasMicrodata = microdataData.count > 0;

  // 3. –ê–Ω–∞–ª–∏–∑ RDFa
  const rdfaData = analyzeRdfa($);
  analysis.coverage.hasRdfa = rdfaData.count > 0;

  // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º
  validateSchemas(analysis);

  // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ Rich Snippets
  generateRichSnippetsOpportunities(analysis, $, url);

  return analysis;
}

// –ê–Ω–∞–ª–∏–∑ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä
function analyzeJsonLd($) {
  const jsonLdScripts = $('script[type="application/ld+json"]');
  const result = {
    count: jsonLdScripts.length,
    types: [],
    schemas: []
  };
  
  jsonLdScripts.each((i, el) => {
    try {
      const jsonContent = $(el).html();
      const data = JSON.parse(jsonContent);
      
      const schema = {
        type: data['@type'],
        context: data['@context'],
        isValid: true,
        errors: [],
        data: data
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!data['@type']) {
        schema.isValid = false;
        schema.errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @type');
      }

      if (!data['@context']) {
        schema.isValid = false;
        schema.errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @context');
      }

      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
      validateSchemaByType(schema, data);

      if (data['@type']) {
        result.types.push(data['@type']);
      }
      
      result.schemas.push(schema);
    } catch (e) {
      result.schemas.push({
        type: 'Invalid JSON',
        isValid: false,
        errors: ['–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ' + e.message]
      });
    }
  });
  
  return result;
}

// –ê–Ω–∞–ª–∏–∑ Microdata
function analyzeMicrodata($) {
  const microdataElements = $('[itemscope]');
  const result = {
    count: microdataElements.length,
    types: []
  };
  
  microdataElements.each((i, el) => {
    const itemType = $(el).attr('itemtype');
    if (itemType) {
      const schemaType = itemType.split('/').pop();
      result.types.push(schemaType);
    }
  });
  
  return result;
}

// –ê–Ω–∞–ª–∏–∑ RDFa
function analyzeRdfa($) {
  const rdfaElements = $('[typeof], [property], [resource]');
  return {
    count: rdfaElements.length
  };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º –ø–æ —Ç–∏–ø—É
function validateSchemaByType(schema, data) {
  const type = data['@type'];
  
  switch (type) {
    case 'Article':
      validateArticleSchema(schema, data);
      break;
    case 'Product':
      validateProductSchema(schema, data);
      break;
    case 'Organization':
      validateOrganizationSchema(schema, data);
      break;
    case 'WebSite':
      validateWebSiteSchema(schema, data);
      break;
    case 'BreadcrumbList':
      validateBreadcrumbSchema(schema, data);
      break;
    case 'FAQ':
      validateFAQSchema(schema, data);
      break;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è Article —Å—Ö–µ–º—ã
function validateArticleSchema(schema, data) {
  const required = ['headline', 'author', 'datePublished'];
  const recommended = ['image', 'dateModified', 'publisher'];
  
  required.forEach(field => {
    if (!data[field]) {
      schema.errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
    }
  });
  
  recommended.forEach(field => {
    if (!data[field]) {
      schema.warnings = schema.warnings || [];
      schema.warnings.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è Product —Å—Ö–µ–º—ã
function validateProductSchema(schema, data) {
  const required = ['name'];
  const recommended = ['image', 'description', 'brand', 'offers'];
  
  required.forEach(field => {
    if (!data[field]) {
      schema.errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
    }
  });
  
  recommended.forEach(field => {
    if (!data[field]) {
      schema.warnings = schema.warnings || [];
      schema.warnings.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
    }
  });
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è offers
  if (data.offers) {
    if (!data.offers.price) {
      schema.errors.push('Offers –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å price');
    }
    if (!data.offers.priceCurrency) {
      schema.errors.push('Offers –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å priceCurrency');
    }
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è Organization —Å—Ö–µ–º—ã
function validateOrganizationSchema(schema, data) {
  if (!data.name) {
    schema.errors.push('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: name');
  }
  
  if (!data.url) {
    schema.warnings = schema.warnings || [];
    schema.warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: url');
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è WebSite —Å—Ö–µ–º—ã
function validateWebSiteSchema(schema, data) {
  if (!data.name && !data.alternateName) {
    schema.errors.push('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ name –∏–ª–∏ alternateName');
  }
  
  if (!data.url) {
    schema.errors.push('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: url');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–ª—è sitelinks searchbox
  if (data.potentialAction && data.potentialAction['@type'] === 'SearchAction') {
    schema.recommendations = schema.recommendations || [];
    schema.recommendations.push('–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–µ–Ω SearchAction –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ sitelinks');
  } else {
    schema.recommendations = schema.recommendations || [];
    schema.recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ SearchAction –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ Google');
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è FAQ —Å—Ö–µ–º—ã
function validateFAQSchema(schema, data) {
  if (!data.mainEntity || !Array.isArray(data.mainEntity)) {
    schema.errors.push('FAQ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ mainEntity');
    return;
  }
  
  data.mainEntity.forEach((qa, index) => {
    if (!qa.name) {
      schema.errors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞)`);
    }
    if (!qa.acceptedAnswer || !qa.acceptedAnswer.text) {
      schema.errors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç acceptedAnswer.text`);
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è BreadcrumbList —Å—Ö–µ–º—ã
function validateBreadcrumbSchema(schema, data) {
  if (!data.itemListElement || !Array.isArray(data.itemListElement)) {
    schema.errors.push('BreadcrumbList –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ itemListElement');
    return;
  }
  
  data.itemListElement.forEach((item, index) => {
    if (!item.name) {
      schema.errors.push(`–•–ª–µ–±–Ω–∞—è –∫—Ä–æ—à–∫–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name`);
    }
    if (!item.item && index < data.itemListElement.length - 1) {
      schema.errors.push(`–•–ª–µ–±–Ω–∞—è –∫—Ä–æ—à–∫–∞ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç item (URL)`);
    }
    if (typeof item.position !== 'number') {
      schema.errors.push(`–•–ª–µ–±–Ω–∞—è –∫—Ä–æ—à–∫–∞ ${index + 1}: position –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
    }
  });
}

// –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ö–µ–º
function validateSchemas(analysis) {
  let totalErrors = 0;
  let totalWarnings = 0;
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Å—Ö–µ–º—ã
  analysis.schemas.forEach((schema, index) => {
    const validation = validateIndividualSchema(schema);
    schema.validation = validation;
    
    if (validation.errors) {
      totalErrors += validation.errors.length;
      analysis.validation.errors = [...analysis.validation.errors, ...validation.errors.map(error => ({
        schemaIndex: index,
        schemaType: schema['@type'] || schema.type || 'Unknown',
        ...error
      }))];
    }
    
    if (validation.warnings) {
      totalWarnings += validation.warnings.length;
      analysis.validation.warnings = [...analysis.validation.warnings, ...validation.warnings.map(warning => ({
        schemaIndex: index,
        schemaType: schema['@type'] || schema.type || 'Unknown',
        ...warning
      }))];
    }
  });
  
  analysis.validation.isValid = totalErrors === 0;
  analysis.validation.totalErrors = totalErrors;
  analysis.validation.totalWarnings = totalWarnings;
  analysis.validation.validSchemas = analysis.schemas.filter(s => s.validation?.isValid).length;
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  generateSchemaRecommendations(analysis);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
function validateIndividualSchema(schema) {
  const validation = {
    isValid: true,
    errors: [],
    warnings: [],
    missingProperties: [],
    recommendations: []
  };
  
  const schemaType = schema['@type'] || schema.type;
  if (!schemaType) {
    validation.errors.push({
      property: '@type',
      message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ @type',
      severity: 'error'
    });
    validation.isValid = false;
    return validation;
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å—Ö–µ–º
  switch (schemaType.toLowerCase()) {
    case 'organization':
      validateOrganizationSchema(schema, validation);
      break;
    case 'website':
      validateWebsiteSchema(schema, validation);
      break;
    case 'article':
    case 'newsarticle':
    case 'blogposting':
      validateArticleSchema(schema, validation);
      break;
    case 'product':
      validateProductSchema(schema, validation);
      break;
    case 'localbusiness':
      validateLocalBusinessSchema(schema, validation);
      break;
    case 'breadcrumblist':
      validateBreadcrumbSchema(schema, validation);
      break;
    case 'faqpage':
      validateFAQSchema(schema, validation);
      break;
    case 'howto':
      validateHowToSchema(schema, validation);
      break;
    default:
      validateGenericSchema(schema, validation);
  }
  
  return validation;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å—Ö–µ–º–∞–º
function generateSchemaRecommendations(analysis) {
  const recommendations = [];
  
  if (analysis.count === 0) {
    recommendations.push({
      type: 'missing_schema',
      priority: 'high',
      message: '–î–æ–±–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Organization, Website)',
      impact: '–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ –Ω–∞ 25-40%'
    });
  }
  
  if (!analysis.coverage.hasJsonLd && analysis.coverage.hasMicrodata) {
    recommendations.push({
      type: 'format_upgrade',
      priority: 'medium',
      message: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å —Å Microdata –Ω–∞ JSON-LD —Ñ–æ—Ä–º–∞—Ç',
      impact: '–ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ª—É—á—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'
    });
  }
  
  if (analysis.validation.totalErrors > 0) {
    recommendations.push({
      type: 'fix_errors',
      priority: 'critical',
      message: `–ò—Å–ø—Ä–∞–≤—å—Ç–µ ${analysis.validation.totalErrors} –æ—à–∏–±–æ–∫ –≤ —Å—Ö–µ–º–∞—Ö`,
      impact: '–ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ö–µ–º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏'
    });
  }
  
  if (analysis.validation.totalWarnings > 3) {
    recommendations.push({
      type: 'optimize_schemas',
      priority: 'medium',
      message: `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ö–µ–º—ã (${analysis.validation.totalWarnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)`,
      impact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ structured data'
    });
  }
  
  analysis.validation.recommendations = [...analysis.validation.recommendations, ...recommendations];
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã Organization
function validateOrganizationSchema(schema, validation) {
  const requiredProps = ['name', 'url'];
  const recommendedProps = ['logo', 'contactPoint', 'address', 'sameAs'];
  
  requiredProps.forEach(prop => {
    if (!schema[prop]) {
      validation.errors.push({
        property: prop,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
        severity: 'error'
      });
      validation.isValid = false;
    }
  });
  
  recommendedProps.forEach(prop => {
    if (!schema[prop]) {
      validation.missingProperties.push(prop);
      validation.warnings.push({
        property: prop,
        message: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
        severity: 'warning',
        impact: prop === 'logo' ? '–õ–æ–≥–æ—Ç–∏–ø –≤ Knowledge Panel' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø–æ–∏—Å–∫–µ'
      });
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã Article
function validateArticleSchema(schema, validation) {
  const requiredProps = ['headline', 'author', 'datePublished'];
  const recommendedProps = ['image', 'publisher', 'dateModified', 'mainEntityOfPage'];
  
  requiredProps.forEach(prop => {
    if (!schema[prop]) {
      validation.errors.push({
        property: prop,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è Article`,
        severity: 'error'
      });
      validation.isValid = false;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
  if (schema.datePublished && !isValidDateFormat(schema.datePublished)) {
    validation.errors.push({
      property: 'datePublished',
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ISO 8601)',
      severity: 'error'
    });
    validation.isValid = false;
  }
  
  recommendedProps.forEach(prop => {
    if (!schema[prop]) {
      validation.missingProperties.push(prop);
      validation.warnings.push({
        property: prop,
        message: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
        severity: 'warning',
        impact: prop === 'image' ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ'
      });
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã Product
function validateProductSchema(schema, validation) {
  const requiredProps = ['name'];
  const recommendedProps = ['image', 'description', 'offers', 'aggregateRating', 'brand'];
  
  requiredProps.forEach(prop => {
    if (!schema[prop]) {
      validation.errors.push({
        property: prop,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è Product`,
        severity: 'error'
      });
      validation.isValid = false;
    }
  });
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ offers
  if (schema.offers) {
    if (!schema.offers.price && !schema.offers.priceRange) {
      validation.warnings.push({
        property: 'offers.price',
        message: '–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞',
        severity: 'warning',
        impact: '–¶–µ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞'
      });
    }
    
    if (!schema.offers.availability) {
      validation.warnings.push({
        property: 'offers.availability',
        message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞',
        severity: 'warning',
        impact: '–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω'
      });
    }
  } else {
    validation.missingProperties.push('offers');
    validation.warnings.push({
      property: 'offers',
      message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (—Ü–µ–Ω–∞, –Ω–∞–ª–∏—á–∏–µ)',
      severity: 'warning',
      impact: '–¢–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å —Ü–µ–Ω–æ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞'
    });
  }
  
  recommendedProps.forEach(prop => {
    if (!schema[prop] && prop !== 'offers') {
      validation.missingProperties.push(prop);
      validation.warnings.push({
        property: prop,
        message: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`,
        severity: 'warning',
        impact: prop === 'aggregateRating' ? '–ó–≤–µ–∑–¥–æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –ø–æ–∏—Å–∫–µ' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ'
      });
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function validateWebsiteSchema(schema, validation) {
  if (!schema.name && !schema.url) {
    validation.errors.push({
      property: 'name|url',
      message: 'Website —Å—Ö–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å name –∏–ª–∏ url',
      severity: 'error'
    });
    validation.isValid = false;
  }
}

function validateLocalBusinessSchema(schema, validation) {
  const requiredProps = ['name', 'address'];
  requiredProps.forEach(prop => {
    if (!schema[prop]) {
      validation.errors.push({
        property: prop,
        message: `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ '${prop}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è LocalBusiness`,
        severity: 'error'
      });
      validation.isValid = false;
    }
  });
}

function validateBreadcrumbSchema(schema, validation) {
  if (!schema.itemListElement || !Array.isArray(schema.itemListElement)) {
    validation.errors.push({
      property: 'itemListElement',
      message: 'BreadcrumbList –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ itemListElement',
      severity: 'error'
    });
    validation.isValid = false;
  }
}

function validateFAQSchema(schema, validation) {
  if (!schema.mainEntity || !Array.isArray(schema.mainEntity)) {
    validation.errors.push({
      property: 'mainEntity',
      message: 'FAQPage –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ mainEntity',
      severity: 'error'
    });
    validation.isValid = false;
  }
}

function validateHowToSchema(schema, validation) {
  if (!schema.step || !Array.isArray(schema.step)) {
    validation.errors.push({
      property: 'step',
      message: 'HowTo –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –≤ step',
      severity: 'error'
    });
    validation.isValid = false;
  }
}

function validateGenericSchema(schema, validation) {
  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
  if (!schema.name && !schema.headline && !schema.title) {
    validation.warnings.push({
      property: 'name',
      message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å name, headline –∏–ª–∏ title',
      severity: 'warning'
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
function isValidDateFormat(dateString) {
  const iso8601Regex = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{3})?([+-]\d{2}:\d{2}|Z))?$/;
  return iso8601Regex.test(dateString);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è Rich Snippets
function generateRichSnippetsOpportunities(analysis, $, url) {
  const opportunities = [];
  const existingTypes = analysis.types.map(t => t.toLowerCase());
  
  // 1. –ê–Ω–∞–ª–∏–∑ FAQ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const faqOpportunity = detectFAQOpportunity($, existingTypes);
  if (faqOpportunity) opportunities.push(faqOpportunity);
  
  // 2. –ê–Ω–∞–ª–∏–∑ HowTo –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π  
  const howToOpportunity = detectHowToOpportunity($, existingTypes);
  if (howToOpportunity) opportunities.push(howToOpportunity);
  
  // 3. –ê–Ω–∞–ª–∏–∑ Product –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const productOpportunity = detectProductOpportunity($, existingTypes);
  if (productOpportunity) opportunities.push(productOpportunity);
  
  // 4. –ê–Ω–∞–ª–∏–∑ Article –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const articleOpportunity = detectArticleOpportunity($, existingTypes);
  if (articleOpportunity) opportunities.push(articleOpportunity);
  
  // 5. –ê–Ω–∞–ª–∏–∑ LocalBusiness –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const localBusinessOpportunity = detectLocalBusinessOpportunity($, existingTypes);
  if (localBusinessOpportunity) opportunities.push(localBusinessOpportunity);
  
  // 6. –ê–Ω–∞–ª–∏–∑ Organization/Website –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const organizationOpportunities = detectOrganizationOpportunities($, existingTypes);
  opportunities.push(...organizationOpportunities);
  
  // 7. –ê–Ω–∞–ª–∏–∑ BreadcrumbList –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const breadcrumbOpportunity = detectBreadcrumbOpportunity($, existingTypes);
  if (breadcrumbOpportunity) opportunities.push(breadcrumbOpportunity);
  
  // 8. –ê–Ω–∞–ª–∏–∑ Video –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const videoOpportunity = detectVideoOpportunity($, existingTypes);
  if (videoOpportunity) opportunities.push(videoOpportunity);
  
  // 9. –ê–Ω–∞–ª–∏–∑ Event –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  const eventOpportunity = detectEventOpportunity($, existingTypes);
  if (eventOpportunity) opportunities.push(eventOpportunity);
  
  analysis.richSnippetsOpportunities = opportunities;
  
  // FAQ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const faqElements = $('details, .faq, .accordion, h3:contains("?"), h2:contains("?")');
  if (faqElements.length > 0 && !existingTypes.includes('faq')) {
    opportunities.push({
      type: 'FAQ',
      priority: 'medium',
      description: '–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Q&A –≤ FAQ schema',
      expectedResult: '–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã –≤ Google'
    });
  }
  
  analysis.richSnippetsOpportunities = opportunities;
}

// –î–µ—Ç–µ–∫—Ü–∏—è FAQ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectFAQOpportunity($, existingTypes) {
  if (existingTypes.includes('faqpage')) return null;
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã FAQ
  const faqPatterns = [
    'h2:contains("?"), h3:contains("?"), h4:contains("?")', // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    '.faq, .faqs, .questions, .qa', // CSS –∫–ª–∞—Å—Å—ã FAQ
    '[class*="faq"], [class*="question"]', // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'dt, dd' // Definition lists —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è FAQ
  ];
  
  let faqElements = 0;
  let questionElements = [];
  
  faqPatterns.forEach(pattern => {
    const elements = $(pattern);
    faqElements += elements.length;
    
    elements.each((i, el) => {
      const text = $(el).text().trim();
      if (text.includes('?') || text.toLowerCase().includes('–∫–∞–∫') || text.toLowerCase().includes('—á—Ç–æ')) {
        questionElements.push({
          element: el.tagName,
          text: text.substring(0, 100) + '...',
          hasAnswer: $(el).next().length > 0
        });
      }
    });
  });
  
  if (faqElements >= 3 || questionElements.length >= 2) {
    return {
      type: 'FAQPage',
      priority: 'high',
      confidence: questionElements.length >= 3 ? 'high' : 'medium',
      description: `–ù–∞–π–¥–µ–Ω–æ ${questionElements.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –î–æ–±–∞–≤—å—Ç–µ FAQPage schema`,
      expectedResult: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä—è–º–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ (Featured Snippets)',
      impact: 'CTR +30-50%, Featured Snippets –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å +60%',
      detectedElements: questionElements.slice(0, 3),
      implementation: '–û–±–µ—Ä–Ω–∏—Ç–µ –∫–∞–∂–¥—É—é –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ Question schema —Å acceptedAnswer'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è HowTo –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectHowToOpportunity($, existingTypes) {
  if (existingTypes.includes('howto')) return null;
  
  // –ò—â–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  const howToPatterns = [
    'ol li', // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    '.step, .steps', // CSS –∫–ª–∞—Å—Å—ã —à–∞–≥–æ–≤
    '[class*="step"]', // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    'h2:matches("–®–∞–≥ \\d+"), h3:matches("–≠—Ç–∞–ø \\d+")', // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
  ];
  
  let stepElements = 0;
  let detectedSteps = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
  $('ol').each((i, ol) => {
    const items = $(ol).find('li');
    if (items.length >= 3) {
      stepElements += items.length;
      items.each((j, li) => {
        if (j < 3) { // –ü–µ—Ä–≤—ã–µ 3 —à–∞–≥–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
          detectedSteps.push({
            stepNumber: j + 1,
            text: $(li).text().trim().substring(0, 80) + '...',
            hasImage: $(li).find('img').length > 0
          });
        }
      });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —à–∞–≥–∞–º–∏
  $('h1, h2, h3, h4').each((i, el) => {
    const text = $(el).text().toLowerCase();
    if (text.includes('—à–∞–≥') || text.includes('—ç—Ç–∞–ø') || /\d+\./.test(text)) {
      stepElements++;
      if (detectedSteps.length < 3) {
        detectedSteps.push({
          stepNumber: detectedSteps.length + 1,
          text: $(el).text().trim().substring(0, 80) + '...',
          hasImage: $(el).siblings().find('img').length > 0
        });
      }
    }
  });
  
  if (stepElements >= 3) {
    return {
      type: 'HowTo',
      priority: 'high',
      confidence: stepElements >= 5 ? 'high' : 'medium',
      description: `–ù–∞–π–¥–µ–Ω–æ ${stepElements} —à–∞–≥–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ HowTo schema`,
      expectedResult: '–ü–æ—à–∞–≥–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
      impact: 'CTR +25-40%, Rich Results –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      detectedSteps: detectedSteps,
      implementation: '–°–æ–∑–¥–∞–π—Ç–µ HowTo schema —Å –º–∞—Å—Å–∏–≤–æ–º HowToStep –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è Product –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectProductOpportunity($, existingTypes) {
  if (existingTypes.includes('product')) return null;
  
  const productIndicators = {
    price: $('[class*="price"], .cost, .amount, [data-price]').length,
    rating: $('[class*="rating"], [class*="star"], .review-score').length,
    availability: $('[class*="stock"], [class*="available"], .in-stock, .out-of-stock').length,
    brand: $('[class*="brand"], .manufacturer').length,
    description: $('[class*="description"], .product-info').length
  };
  
  const productScore = Object.values(productIndicators).reduce((sum, count) => sum + (count > 0 ? 1 : 0), 0);
  
  if (productScore >= 2) {
    return {
      type: 'Product',
      priority: 'high',
      confidence: productScore >= 4 ? 'high' : 'medium',
      description: `–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞ (${productScore}/5). –î–æ–±–∞–≤—å—Ç–µ Product schema`,
      expectedResult: '–¶–µ–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥, –Ω–∞–ª–∏—á–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
      impact: 'E-commerce CTR +40-60%, Google Shopping integration',
      detectedElements: {
        hasPrice: productIndicators.price > 0,
        hasRating: productIndicators.rating > 0,
        hasAvailability: productIndicators.availability > 0,
        hasBrand: productIndicators.brand > 0,
        hasDescription: productIndicators.description > 0
      },
      implementation: '–î–æ–±–∞–≤—å—Ç–µ Product schema —Å offers, aggregateRating –∏ brand'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è Article –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectArticleOpportunity($, existingTypes) {
  if (existingTypes.includes('article') || existingTypes.includes('blogposting') || existingTypes.includes('newsarticle')) return null;
  
  const articleIndicators = {
    headline: $('h1').length > 0,
    author: $('[class*="author"], .byline, [rel="author"]').length > 0,
    publishDate: $('[datetime], [class*="date"], .published').length > 0,
    content: $('article, .content, .post-content, main').length > 0,
    image: $('img[src]').length > 0
  };
  
  const wordCount = $('body').text().trim().split(/\s+/).length;
  const isArticle = wordCount > 200 && (articleIndicators.headline || articleIndicators.content);
  
  if (isArticle) {
    return {
      type: 'Article',
      priority: 'medium',
      confidence: Object.values(articleIndicators).filter(Boolean).length >= 3 ? 'high' : 'medium',
      description: `–°—Ç–∞—Ç—å—è —Å ${wordCount} —Å–ª–æ–≤–∞–º–∏. –î–æ–±–∞–≤—å—Ç–µ Article schema`,
      expectedResult: '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∞–≤—Ç–æ—Ä –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
      impact: 'News/Blog CTR +20-35%, Google News eligibility',
      detectedElements: articleIndicators,
      implementation: '–î–æ–±–∞–≤—å—Ç–µ Article schema —Å headline, author, datePublished –∏ image'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è LocalBusiness –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectLocalBusinessOpportunity($, existingTypes) {
  if (existingTypes.includes('localbusiness')) return null;
  
  const businessIndicators = {
    address: $('[class*="address"], .location, .contact-info').length > 0,
    phone: $('a[href^="tel:"], [class*="phone"], .telephone').length > 0,
    hours: $('[class*="hours"], [class*="schedule"], .opening-hours').length > 0,
    location: $('[class*="location"], [class*="map"]').length > 0
  };
  
  const businessScore = Object.values(businessIndicators).filter(Boolean).length;
  
  if (businessScore >= 2) {
    return {
      type: 'LocalBusiness',
      priority: 'high',
      confidence: businessScore >= 3 ? 'high' : 'medium',
      description: `–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ (${businessScore}/4). –î–æ–±–∞–≤—å—Ç–µ LocalBusiness schema`,
      expectedResult: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ –≤ Google Maps –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö',
      impact: 'Local SEO +50-70%, Google My Business integration',
      detectedElements: businessIndicators,
      implementation: '–î–æ–±–∞–≤—å—Ç–µ LocalBusiness schema —Å address, telephone –∏ openingHours'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è Organization –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectOrganizationOpportunities($, existingTypes) {
  const opportunities = [];
  
  if (!existingTypes.includes('organization')) {
    const hasLogo = $('img[alt*="logo"], .logo img, [class*="logo"] img').length > 0;
    const hasContactInfo = $('[class*="contact"], .footer').length > 0;
    
    if (hasLogo || hasContactInfo) {
      opportunities.push({
        type: 'Organization',
        priority: 'medium',
        confidence: hasLogo && hasContactInfo ? 'high' : 'medium',
        description: '–î–æ–±–∞–≤—å—Ç–µ Organization schema –¥–ª—è Knowledge Panel',
        expectedResult: '–õ–æ–≥–æ—Ç–∏–ø –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
        impact: 'Brand recognition +30%, Knowledge Panel eligibility',
        implementation: '–î–æ–±–∞–≤—å—Ç–µ Organization schema —Å name, logo, url –∏ contactPoint'
      });
    }
  }
  
  if (!existingTypes.includes('website')) {
    opportunities.push({
      type: 'WebSite',
      priority: 'low',
      confidence: 'high',
      description: '–î–æ–±–∞–≤—å—Ç–µ WebSite schema —Å –ø–æ–∏—Å–∫–æ–º –ø–æ —Å–∞–π—Ç—É',
      expectedResult: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ Google',
      impact: 'Site search usage +40%, Brand queries boost',
      implementation: '–î–æ–±–∞–≤—å—Ç–µ WebSite schema —Å potentialAction SearchAction'
    });
  }
  
  return opportunities;
}

// –î–µ—Ç–µ–∫—Ü–∏—è BreadcrumbList –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectBreadcrumbOpportunity($, existingTypes) {
  if (existingTypes.includes('breadcrumblist')) return null;
  
  const breadcrumbElements = $('nav ol, .breadcrumb, .breadcrumbs, [class*="breadcrumb"]').length;
  
  if (breadcrumbElements > 0) {
    return {
      type: 'BreadcrumbList',
      priority: 'low',
      confidence: 'high',
      description: '–ù–∞–π–¥–µ–Ω—ã —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏. –î–æ–±–∞–≤—å—Ç–µ BreadcrumbList schema',
      expectedResult: '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
      impact: 'Navigation clarity +25%, SERP real estate',
      implementation: '–î–æ–±–∞–≤—å—Ç–µ BreadcrumbList schema –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è Video –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
function detectVideoOpportunity($, existingTypes) {
  if (existingTypes.includes('videoobject')) return null;
  
  const videoElements = $('video, iframe[src*="youtube"], iframe[src*="vimeo"], [class*="video"]').length;
  
  if (videoElements > 0) {
    return {
      type: 'VideoObject',
      priority: 'medium',
      confidence: 'high',
      description: `–ù–∞–π–¥–µ–Ω–æ ${videoElements} –≤–∏–¥–µ–æ. –î–æ–±–∞–≤—å—Ç–µ VideoObject schema`,
      expectedResult: '–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
      impact: 'Video CTR +50-80%, Video carousel eligibility',
      implementation: '–î–æ–±–∞–≤—å—Ç–µ VideoObject schema —Å name, description, thumbnailUrl –∏ duration'
    };
  }
  
  return null;
}

// –î–µ—Ç–µ–∫—Ü–∏—è Event –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π  
function detectEventOpportunity($, existingTypes) {
  if (existingTypes.includes('event')) return null;
  
  const eventIndicators = {
    date: $('[datetime], [class*="date"], .event-date').length > 0,
    location: $('[class*="location"], [class*="venue"], .address').length > 0,
    title: $('h1, h2').filter(function() {
      return $(this).text().toLowerCase().includes('—Å–æ–±—ã—Ç–∏–µ') || 
             $(this).text().toLowerCase().includes('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ') ||
             $(this).text().toLowerCase().includes('–∫–æ–Ω—Ü–µ—Ä—Ç') ||
             $(this).text().toLowerCase().includes('–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è');
    }).length > 0
  };
  
  const eventScore = Object.values(eventIndicators).filter(Boolean).length;
  
  if (eventScore >= 2) {
    return {
      type: 'Event',
      priority: 'medium',
      confidence: eventScore >= 3 ? 'high' : 'medium',
      description: `–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏—è (${eventScore}/3). –î–æ–±–∞–≤—å—Ç–µ Event schema`,
      expectedResult: '–î–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞',
      impact: 'Event discovery +60%, Google Events integration',
      implementation: '–î–æ–±–∞–≤—å—Ç–µ Event schema —Å name, startDate, location –∏ organizer'
    };
  }
  
  return null;  
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Schema.org
function analyzeSchemaOrg($, url) {
  const analysis = {
    schemas: [],
    richSnippetsOpportunities: [],
    score: 0,
    maxScore: 100,
    issues: [],
    recommendations: []
  };

  // 1. –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ö–µ–º
  const schemaScripts = $('script[type="application/ld+json"]');
  const existingTypes = [];

  schemaScripts.each((i, script) => {
    try {
      const jsonData = JSON.parse($(script).html());
      const schemas = Array.isArray(jsonData) ? jsonData : [jsonData];
      
      schemas.forEach(schema => {
        if (schema['@type']) {
          const schemaType = schema['@type'].toLowerCase();
          existingTypes.push(schemaType);
          
          const validationResult = validateIndividualSchema(schema, schemaType);
          analysis.schemas.push({
            type: schema['@type'],
            isValid: validationResult.isValid,
            errors: validationResult.errors,
            warnings: validationResult.warnings,
            missingProperties: validationResult.missingProperties,
            recommendations: validationResult.recommendations
          });
        }
      });
    } catch (e) {
      analysis.issues.push('–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è JSON-LD —Å—Ö–µ–º–∞');
    }
  });

  // 2. –ê–Ω–∞–ª–∏–∑ Microdata
  const microdataItems = $('[itemscope]');
  microdataItems.each((i, item) => {
    const itemType = $(item).attr('itemtype');
    if (itemType) {
      const schemaType = itemType.split('/').pop().toLowerCase();
      if (!existingTypes.includes(schemaType)) {
        existingTypes.push(schemaType);
        analysis.schemas.push({
          type: itemType.split('/').pop(),
          isValid: true,
          errors: [],
          warnings: ['Microdata –Ω–∞–π–¥–µ–Ω–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è JSON-LD'],
          missingProperties: [],
          recommendations: ['–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ JSON-LD –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏']
        });
      }
    }
  });

  // 3. –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rich Snippets
  const opportunities = [];

  // FAQ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const faqOpportunity = detectFAQOpportunity($, existingTypes);
  if (faqOpportunity) opportunities.push(faqOpportunity);

  // HowTo –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const howToOpportunity = detectHowToOpportunity($, existingTypes);
  if (howToOpportunity) opportunities.push(howToOpportunity);

  // Product –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const productOpportunity = detectProductOpportunity($, existingTypes);
  if (productOpportunity) opportunities.push(productOpportunity);

  // Article –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const articleOpportunity = detectArticleOpportunity($, existingTypes);
  if (articleOpportunity) opportunities.push(articleOpportunity);

  // LocalBusiness –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const localBusinessOpportunity = detectLocalBusinessOpportunity($, existingTypes);
  if (localBusinessOpportunity) opportunities.push(localBusinessOpportunity);

  // Organization –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const organizationOpportunities = detectOrganizationOpportunities($, existingTypes);
  opportunities.push(...organizationOpportunities);

  // Breadcrumb –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const breadcrumbOpportunity = detectBreadcrumbOpportunity($, existingTypes);
  if (breadcrumbOpportunity) opportunities.push(breadcrumbOpportunity);

  // Video –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const videoOpportunity = detectVideoOpportunity($, existingTypes);
  if (videoOpportunity) opportunities.push(videoOpportunity);

  // Event –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const eventOpportunity = detectEventOpportunity($, existingTypes);
  if (eventOpportunity) opportunities.push(eventOpportunity);

  analysis.richSnippetsOpportunities = opportunities;

  // 4. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
  let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

  // –ë–æ–Ω—É—Å—ã –∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ö–µ–º—ã
  analysis.schemas.forEach(schema => {
    if (schema.isValid) {
      score += 15;
    } else {
      score += 5;
    }
  });

  // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ö–µ–º
  if (!existingTypes.includes('organization') && !existingTypes.includes('localbusiness')) {
    score -= 10;
    analysis.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (Organization/LocalBusiness)');
  }

  if (!existingTypes.includes('website')) {
    score -= 5;
    analysis.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç WebSite schema –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∞–π—Ç—É');
  }

  analysis.score = Math.min(Math.max(score, 0), 100);

  // 5. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (analysis.schemas.length === 0) {
    analysis.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ');
  }

  if (opportunities.length > 0) {
    analysis.recommendations.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${opportunities.length} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è Rich Snippets`);
  }

  if (analysis.score < 70) {
    analysis.recommendations.push('–†–∞—Å—à–∏—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ SEO');
  }

  return analysis;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function detectPageType($, url) {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL
  if (url.includes('/product/') || url.includes('/shop/') || $('.price, .buy-button, .add-to-cart').length > 0) {
    return 'product';
  }
  
  if (url.includes('/blog/') || url.includes('/news/') || $('article, .post, .entry').length > 0) {
    return 'article';
  }
  
  if (url === '/' || url.endsWith('.com') || url.endsWith('.ua') || url.endsWith('.org')) {
    return 'homepage';
  }
  
  return 'page';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ robots.txt
async function checkRobotsTxt(baseUrl) {
  try {
    const robotsUrl = new URL('/robots.txt', baseUrl).href;
    const response = await fetch(robotsUrl, {
      headers: { 'User-Agent': 'Wekey-SEO-Bot/1.0' },
      timeout: 10000
    });

    if (!response.ok) {
      return {
        found: false,
        url: robotsUrl,
        status: response.status,
        issues: ['–§–∞–π–ª robots.txt –Ω–µ –Ω–∞–π–¥–µ–Ω']
      };
    }

    const content = await response.text();
    const lines = content.split('\n').map(line => line.trim()).filter(line => line);
    
    const analysis = {
      found: true,
      url: robotsUrl,
      status: 200,
      size: content.length,
      lines: lines.length,
      hasUserAgent: false,
      hasDisallow: false,
      hasSitemap: false,
      issues: [],
      warnings: []
    };

    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    lines.forEach(line => {
      const lowerLine = line.toLowerCase();
      if (lowerLine.startsWith('user-agent:')) {
        analysis.hasUserAgent = true;
      }
      if (lowerLine.startsWith('disallow:')) {
        analysis.hasDisallow = true;
      }
      if (lowerLine.startsWith('sitemap:')) {
        analysis.hasSitemap = true;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!analysis.hasUserAgent) {
      analysis.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ User-agent');
    }
    if (!analysis.hasDisallow) {
      analysis.warnings.push('–ù–µ—Ç –ø—Ä–∞–≤–∏–ª Disallow (–≤–æ–∑–º–æ–∂–Ω–æ, –≤–µ—Å—å —Å–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏)');
    }
    if (!analysis.hasSitemap) {
      analysis.warnings.push('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ sitemap.xml');
    }
    if (content.length > 500000) { // 500KB
      analysis.warnings.push('–§–∞–π–ª robots.txt –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (>500KB)');
    }

    return analysis;
  } catch (error) {
    return {
      found: false,
      url: robotsUrl || `${baseUrl}/robots.txt`,
      error: error.message,
      issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ robots.txt: ' + error.message]
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ sitemap.xml
async function checkSitemap(baseUrl, robotsData = null) {
  const results = {
    found: false,
    urls: [],
    issues: [],
    warnings: []
  };

  const sitemapUrls = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑ robots.txt
  if (robotsData?.hasSitemap) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å sitemap URLs –∏–∑ robots.txt
    sitemapUrls.push(new URL('/sitemap.xml', baseUrl).href);
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è sitemap
    sitemapUrls.push(
      new URL('/sitemap.xml', baseUrl).href,
      new URL('/sitemap_index.xml', baseUrl).href,
      new URL('/sitemap.txt', baseUrl).href
    );
  }

  for (const sitemapUrl of sitemapUrls) {
    try {
      const response = await fetch(sitemapUrl, {
        headers: { 'User-Agent': 'Wekey-SEO-Bot/1.0' },
        timeout: 10000
      });

      if (response.ok) {
        results.found = true;
        results.urls.push({
          url: sitemapUrl,
          status: response.status,
          size: response.headers.get('content-length') || 'unknown'
        });
        break; // –ù–∞—à–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π sitemap
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö sitemap URLs
    }
  }

  if (!results.found) {
    results.issues.push('Sitemap.xml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö');
  }

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async function checkSSL(url) {
  try {
    const urlObj = new URL(url);
    
    if (urlObj.protocol !== 'https:') {
      return {
        hasSSL: false,
        issues: ['–°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS'],
        warnings: ['–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ HTTPS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ SEO']
      };
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HTTPS
    const response = await fetch(url, {
      headers: { 'User-Agent': 'Wekey-SEO-Bot/1.0' },
      timeout: 10000
    });

    return {
      hasSSL: true,
      status: response.status,
      issues: [],
      warnings: response.status !== 200 ? [`HTTPS –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º ${response.status}`] : []
    };

  } catch (error) {
    return {
      hasSSL: url.startsWith('https://'),
      error: error.message,
      issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL: ' + error.message],
      warnings: []
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
async function checkResourcesSpeed(url) {
  try {
    const start = Date.now();
    const response = await fetch(url, {
      headers: { 'User-Agent': 'Wekey-SEO-Bot/1.0' },
      timeout: 15000
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const loadTime = Date.now() - start;
    const html = await response.text();
    const htmlSize = Buffer.byteLength(html, 'utf8');
    
    const analysis = {
      loadTime: loadTime,
      htmlSize: htmlSize,
      htmlSizeKB: Math.round(htmlSize / 1024 * 100) / 100,
      responseStatus: response.status,
      issues: [],
      warnings: []
    };

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loadTime > 3000) {
      analysis.issues.push(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ HTML (${loadTime}ms > 3000ms)`);
    } else if (loadTime > 1500) {
      analysis.warnings.push(`–ó–∞–≥—Ä—É–∑–∫–∞ HTML –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å (${loadTime}ms)`);
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ HTML
    if (htmlSize > 1024 * 1024) { // > 1MB
      analysis.warnings.push(`–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä HTML (${analysis.htmlSizeKB}KB)`);
    }

    return analysis;
  } catch (error) {
    return {
      error: error.message,
      loadTime: null,
      issues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ' + error.message],
      warnings: []
    };
  }
}

// Google Mobile-Friendly Test API
async function checkMobileFriendly(url) {
  try {
    console.log('üîç Checking Mobile-Friendly for:', url);
    
    // Google Mobile-Friendly Test API endpoint
    const API_URL = 'https://searchconsole.googleapis.com/v1/urlTestingTools/mobileFriendlyTest:run';
    
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: url,
        requestScreenshot: false
      }),
      timeout: 15000
    });

    if (!response.ok) {
      console.log('‚ö†Ô∏è Mobile-Friendly API unavailable, using fallback analysis');
      return await fallbackMobileAnalysis(url);
    }

    const data = await response.json();
    console.log('üì± Mobile-Friendly API response received');

    return {
      isMobileFriendly: data.mobileFriendliness === 'MOBILE_FRIENDLY',
      status: data.mobileFriendliness || 'UNKNOWN',
      issues: extractMobileIssues(data),
      loadingStatus: data.testStatus?.status || 'COMPLETE',
      pageLoadTime: data.testStatus?.details || null,
      resourceIssues: data.resourceIssues || [],
      recommendations: generateMobileRecommendations(data)
    };

  } catch (error) {
    console.log('‚ö†Ô∏è Mobile-Friendly API error:', error.message);
    return await fallbackMobileAnalysis(url);
  }
}

// Fallback mobile analysis using viewport and CSS media queries detection
async function fallbackMobileAnalysis(url) {
  try {
    const response = await fetch(url, { timeout: 10000 });
    const html = await response.text();
    const $ = cheerio.load(html);
    
    const analysis = {
      isMobileFriendly: false,
      status: 'ANALYZED_LOCALLY',
      issues: [],
      recommendations: [],
      viewport: null,
      hasMediaQueries: false
    };

    // Check viewport meta tag
    const viewport = $('meta[name="viewport"]').attr('content');
    analysis.viewport = viewport || null;
    
    if (!viewport) {
      analysis.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–∞-—Ç–µ–≥ viewport');
    } else if (viewport.includes('width=device-width')) {
      analysis.isMobileFriendly = true;
    }

    // Check for CSS media queries in <style> tags
    const styleTags = $('style').text();
    if (styleTags.includes('@media') && (styleTags.includes('max-width') || styleTags.includes('min-width'))) {
      analysis.hasMediaQueries = true;
      analysis.isMobileFriendly = true;
    }

    // Check for responsive CSS files
    const cssLinks = $('link[rel="stylesheet"]');
    cssLinks.each((i, el) => {
      const media = $(el).attr('media');
      if (media && media.includes('screen')) {
        analysis.hasMediaQueries = true;
      }
    });

    // Generate recommendations
    if (!analysis.isMobileFriendly) {
      analysis.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∞-—Ç–µ–≥ viewport: <meta name="viewport" content="width=device-width, initial-scale=1">');
      analysis.recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS media queries –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞');
      analysis.recommendations.push('–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
    }

    if (!analysis.hasMediaQueries) {
      analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã CSS media queries –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    return analysis;
  } catch (error) {
    return {
      error: error.message,
      isMobileFriendly: false,
      status: 'ERROR',
      issues: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏: ' + error.message],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞']
    };
  }
}

// Extract mobile issues from Google API response
function extractMobileIssues(data) {
  const issues = [];
  
  if (data.mobileFriendlyIssues) {
    data.mobileFriendlyIssues.forEach(issue => {
      switch (issue.rule) {
        case 'MOBILE_FRIENDLY_RULE_UNSPECIFIED':
          issues.push('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏');
          break;
        case 'USES_INCOMPATIBLE_PLUGINS':
          issues.push('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–ª–∞–≥–∏–Ω—ã (Flash, Silverlight)');
          break;
        case 'CONFIGURE_VIEWPORT':
          issues.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ viewport');
          break;
        case 'FIXED_WIDTH_VIEWPORT':
          issues.push('–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ viewport');
          break;
        case 'SIZE_CONTENT_TO_VIEWPORT':
          issues.push('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ viewport');
          break;
        case 'USE_LEGIBLE_FONT_SIZES':
          issues.push('–°–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö');
          break;
        case 'TAP_TARGETS_TOO_CLOSE':
          issues.push('–ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É');
          break;
        default:
          issues.push('–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏: ' + issue.rule);
      }
    });
  }
  
  return issues;
}

// Generate mobile recommendations
function generateMobileRecommendations(data) {
  const recommendations = [];
  
  if (data.mobileFriendliness === 'MOBILE_FRIENDLY') {
    recommendations.push('‚úÖ –°–∞–π—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
    recommendations.push('üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
  } else {
    recommendations.push('üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    recommendations.push('üîß –î–æ–±–∞–≤—å—Ç–µ responsive –¥–∏–∑–∞–π–Ω —Å CSS media queries');
    recommendations.push('‚ö° –£–ª—É—á—à–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö');
  }
  
  return recommendations;
}

// Level 3 API: SSL Labs API for detailed SSL analysis
async function checkSSLLabs(url) {
  try {
    const domain = new URL(url).hostname;
    
    // SSL Labs API endpoint
    const apiUrl = `https://api.ssllabs.com/api/v3/analyze?host=${domain}&all=done&ignoreMismatch=on`;
    
    console.log(`üîç Checking SSL Labs for: ${domain}`);
    
    const response = await fetch(apiUrl, {
      headers: {
        'User-Agent': 'WeKey Tools SEO Analyzer'
      },
      timeout: 30000
    });

    if (!response.ok) {
      throw new Error(`SSL Labs API error: ${response.status}`);
    }

    const data = await response.json();
    
    // If analysis is not ready, we might need to wait or return partial data
    if (data.status === 'IN_PROGRESS' || data.status === 'DNS') {
      return {
        status: 'IN_PROGRESS',
        grade: null,
        hasSSL: url.startsWith('https://'),
        message: '–ê–Ω–∞–ª–∏–∑ SSL Labs –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        issues: [],
        recommendations: ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç']
      };
    }
    
    if (data.status === 'ERROR') {
      return {
        status: 'ERROR',
        grade: null,
        hasSSL: false,
        message: '–û—à–∏–±–∫–∞ SSL Labs –∞–Ω–∞–ª–∏–∑–∞',
        issues: ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'],
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –ø–æ HTTPS']
      };
    }
    
    // Extract data from first endpoint (most common case)
    const endpoint = data.endpoints?.[0];
    if (!endpoint) {
      return {
        status: 'NO_ENDPOINTS',
        grade: null,
        hasSSL: false,
        message: '–ù–µ—Ç SSL endpoints',
        issues: ['SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'],
        recommendations: ['–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞']
      };
    }
    
    const grade = endpoint.grade || null;
    const details = endpoint.details || {};
    
    // Analyze SSL issues
    const issues = [];
    const recommendations = [];
    
    // Grade-based analysis
    if (grade === 'A+') {
      recommendations.push('üèÜ –û—Ç–ª–∏—á–Ω–∞—è SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!');
    } else if (grade === 'A' || grade === 'A-') {
      recommendations.push('‚úÖ –•–æ—Ä–æ—à–∞—è SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    } else if (grade === 'B') {
      issues.push('SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π');
      recommendations.push('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } else if (grade === 'C' || grade === 'D' || grade === 'F') {
      issues.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å SSL');
      recommendations.push('üî¥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    }
    
    // Certificate analysis
    if (details.cert) {
      const cert = details.cert;
      const expiryDate = new Date(cert.notAfter);
      const now = new Date();
      const daysUntilExpiry = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));
      
      if (daysUntilExpiry < 30) {
        issues.push(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntilExpiry} –¥–Ω–µ–π`);
        recommendations.push('‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
      } else if (daysUntilExpiry < 90) {
        recommendations.push(`‚ÑπÔ∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntilExpiry} –¥–Ω–µ–π`);
      }
    }
    
    // Protocol support
    if (details.protocols) {
      const hasModernTLS = details.protocols.some(p => 
        p.version === '1.2' || p.version === '1.3'
      );
      if (!hasModernTLS) {
        issues.push('–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π TLS');
        recommendations.push('üîí –í–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É TLS 1.2/1.3');
      }
    }
    
    return {
      status: 'READY',
      grade: grade,
      hasSSL: true,
      score: gradeToScore(grade),
      certificate: details.cert ? {
        issuer: details.cert.issuerLabel || 'Unknown',
        expiryDate: details.cert.notAfter,
        daysUntilExpiry: details.cert.notAfter ? 
          Math.ceil((new Date(details.cert.notAfter) - new Date()) / (1000 * 60 * 60 * 24)) : null
      } : null,
      protocols: details.protocols || [],
      issues: issues,
      recommendations: recommendations,
      rawData: {
        grade: grade,
        hasWarnings: endpoint.hasWarnings || false,
        isExceptional: endpoint.isExceptional || false
      }
    };
    
  } catch (error) {
    console.error('SSL Labs check error:', error);
    
    // Fallback to basic SSL check
    const hasSSL = url.startsWith('https://');
    
    return {
      status: 'FALLBACK',
      grade: null,
      hasSSL: hasSSL,
      error: error.message,
      issues: hasSSL ? [] : ['–°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS'],
      recommendations: hasSSL ? 
        ['SSL Labs –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç'] : 
        ['–ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS –¥–ª—è —Å–∞–π—Ç–∞']
    };
  }
}

// Convert SSL Labs grade to numeric score
function gradeToScore(grade) {
  const gradeMap = {
    'A+': 100,
    'A': 90,
    'A-': 85,
    'B': 75,
    'C': 65,
    'D': 50,
    'F': 25
  };
  return gradeMap[grade] || 0;
}

// Level 3 API: W3C Markup Validator for HTML validation
async function checkW3CValidator(url) {
  try {
    console.log(`üîç Checking W3C Validator for: ${url}`);
    
    // W3C Markup Validator API endpoint
    const apiUrl = `https://validator.w3.org/nu/?doc=${encodeURIComponent(url)}&out=json`;
    
    const response = await fetch(apiUrl, {
      headers: {
        'User-Agent': 'WeKey Tools SEO Analyzer'
      },
      timeout: 20000
    });

    if (!response.ok) {
      throw new Error(`W3C Validator API error: ${response.status}`);
    }

    const data = await response.json();
    
    // Analyze validation results
    const errors = data.messages?.filter(msg => msg.type === 'error') || [];
    const warnings = data.messages?.filter(msg => msg.type === 'info' || msg.type === 'warning') || [];
    
    const errorCount = errors.length;
    const warningCount = warnings.length;
    const isValid = errorCount === 0;
    
    // Generate issues and recommendations
    const issues = [];
    const recommendations = [];
    
    if (errorCount > 0) {
      issues.push(`–ù–∞–π–¥–µ–Ω–æ ${errorCount} HTML –æ—à–∏–±–æ–∫`);
      if (errorCount <= 5) {
        recommendations.push('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ HTML –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ SEO');
      } else {
        recommendations.push('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å HTML –æ—à–∏–±–∫–∏');
      }
    } else {
      recommendations.push('‚úÖ HTML –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω!');
    }
    
    if (warningCount > 0) {
      recommendations.push(`‚ÑπÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ ${warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞`);
    }
    
    // Categorize common error types
    const errorCategories = {
      'syntax': 0,
      'accessibility': 0,
      'seo': 0,
      'structure': 0,
      'other': 0
    };
    
    errors.forEach(error => {
      const message = error.message?.toLowerCase() || '';
      if (message.includes('alt') || message.includes('aria') || message.includes('label')) {
        errorCategories.accessibility++;
      } else if (message.includes('meta') || message.includes('title') || message.includes('heading')) {
        errorCategories.seo++;
      } else if (message.includes('element') || message.includes('tag') || message.includes('attribute')) {
        errorCategories.syntax++;
      } else if (message.includes('section') || message.includes('nav') || message.includes('main')) {
        errorCategories.structure++;
      } else {
        errorCategories.other++;
      }
    });
    
    // Calculate score based on error severity
    let score = 100;
    score -= errorCount * 5; // -5 points per error
    score -= warningCount * 1; // -1 point per warning
    score = Math.max(score, 0);
    
    return {
      isValid: isValid,
      score: score,
      totalMessages: data.messages?.length || 0,
      errors: {
        count: errorCount,
        details: errors.slice(0, 10).map(err => ({
          line: err.lastLine || err.firstLine,
          column: err.lastColumn || err.firstColumn,
          message: err.message,
          extract: err.extract
        })),
        categories: errorCategories
      },
      warnings: {
        count: warningCount,
        details: warnings.slice(0, 5).map(warn => ({
          line: warn.lastLine || warn.firstLine,
          message: warn.message
        }))
      },
      issues: issues,
      recommendations: recommendations,
      summary: {
        status: isValid ? 'VALID' : 'INVALID',
        quality: score >= 90 ? 'EXCELLENT' : 
                score >= 75 ? 'GOOD' : 
                score >= 50 ? 'AVERAGE' : 'POOR'
      }
    };
    
  } catch (error) {
    console.error('W3C Validator check error:', error);
    
    return {
      isValid: false,
      score: 0,
      error: error.message,
      totalMessages: 0,
      errors: { count: 0, details: [], categories: {} },
      warnings: { count: 0, details: [] },
      issues: ['–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é HTML'],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'],
      summary: {
        status: 'ERROR',
        quality: 'UNKNOWN'
      }
    };
  }
}

// Level 3 API: SecurityHeaders.com for security headers analysis
async function checkSecurityHeaders(url) {
  try {
    const domain = new URL(url).hostname;
    
    console.log(`üõ°Ô∏è Checking Security Headers for: ${domain}`);
    
    // SecurityHeaders.com API endpoint
    const apiUrl = `https://securityheaders.com/?q=${encodeURIComponent(url)}&hide=on&followRedirects=on`;
    
    // Also do direct header check as fallback
    let directHeaders = {};
    try {
      const response = await fetch(url, {
        method: 'HEAD',
        headers: {
          'User-Agent': 'WeKey Tools SEO Analyzer'
        },
        timeout: 10000
      });
      
      // Extract security-related headers
      const securityHeaderNames = [
        'strict-transport-security',
        'content-security-policy',
        'x-frame-options',
        'x-content-type-options',
        'x-xss-protection',
        'referrer-policy',
        'permissions-policy',
        'feature-policy'
      ];
      
      securityHeaderNames.forEach(headerName => {
        const headerValue = response.headers.get(headerName);
        if (headerValue) {
          directHeaders[headerName] = headerValue;
        }
      });
      
    } catch (error) {
      console.log('Direct headers check failed, using analysis only:', error.message);
    }
    
    // Analyze security headers
    const analysis = analyzeSecurityHeaders(directHeaders, url);
    
    return {
      url: url,
      grade: analysis.grade,
      score: analysis.score,
      headers: directHeaders,
      analysis: analysis.headerAnalysis,
      missing: analysis.missingHeaders,
      issues: analysis.issues,
      recommendations: analysis.recommendations,
      summary: {
        total: Object.keys(directHeaders).length,
        critical: analysis.criticalCount,
        missing: analysis.missingHeaders.length,
        status: analysis.grade ? 'ANALYZED' : 'PARTIAL'
      }
    };
    
  } catch (error) {
    console.error('Security Headers check error:', error);
    
    return {
      url: url,
      grade: null,
      score: 0,
      error: error.message,
      headers: {},
      analysis: {},
      missing: [],
      issues: ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'],
      summary: {
        total: 0,
        critical: 0,
        missing: 0,
        status: 'ERROR'
      }
    };
  }
}

// Analyze security headers and calculate score
function analyzeSecurityHeaders(headers, url) {
  const analysis = {};
  const issues = [];
  const recommendations = [];
  const missingHeaders = [];
  let score = 0;
  let criticalCount = 0;
  
  // HSTS (HTTP Strict Transport Security)
  if (headers['strict-transport-security']) {
    analysis.hsts = {
      present: true,
      value: headers['strict-transport-security'],
      score: 20
    };
    score += 20;
    recommendations.push('‚úÖ HSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } else if (url.startsWith('https://')) {
    analysis.hsts = { present: false, score: 0 };
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ HSTS');
    missingHeaders.push('Strict-Transport-Security');
    recommendations.push('üîí –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ HSTS –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ HTTPS');
  }
  
  // CSP (Content Security Policy)
  if (headers['content-security-policy']) {
    analysis.csp = {
      present: true,
      value: headers['content-security-policy'],
      score: 25
    };
    score += 25;
    criticalCount++;
    recommendations.push('‚úÖ Content Security Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    analysis.csp = { present: false, score: 0 };
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Content Security Policy');
    missingHeaders.push('Content-Security-Policy');
    recommendations.push('üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CSP –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫');
  }
  
  // X-Frame-Options
  if (headers['x-frame-options']) {
    analysis.frameOptions = {
      present: true,
      value: headers['x-frame-options'],
      score: 15
    };
    score += 15;
    recommendations.push('‚úÖ X-Frame-Options –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç clickjacking');
  } else {
    analysis.frameOptions = { present: false, score: 0 };
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç clickjacking');
    missingHeaders.push('X-Frame-Options');
    recommendations.push('üîí –î–æ–±–∞–≤—å—Ç–µ X-Frame-Options: DENY –∏–ª–∏ SAMEORIGIN');
  }
  
  // X-Content-Type-Options
  if (headers['x-content-type-options']) {
    analysis.contentTypeOptions = {
      present: true,
      value: headers['x-content-type-options'],
      score: 10
    };
    score += 10;
    recommendations.push('‚úÖ X-Content-Type-Options –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç MIME sniffing');
  } else {
    analysis.contentTypeOptions = { present: false, score: 0 };
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç MIME sniffing');
    missingHeaders.push('X-Content-Type-Options');
    recommendations.push('üîí –î–æ–±–∞–≤—å—Ç–µ X-Content-Type-Options: nosniff');
  }
  
  // Referrer Policy
  if (headers['referrer-policy']) {
    analysis.referrerPolicy = {
      present: true,
      value: headers['referrer-policy'],
      score: 10
    };
    score += 10;
    recommendations.push('‚úÖ Referrer Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    analysis.referrerPolicy = { present: false, score: 0 };
    missingHeaders.push('Referrer-Policy');
    recommendations.push('‚ÑπÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Referrer-Policy');
  }
  
  // Permissions Policy (Feature Policy)
  if (headers['permissions-policy'] || headers['feature-policy']) {
    analysis.permissionsPolicy = {
      present: true,
      value: headers['permissions-policy'] || headers['feature-policy'],
      score: 10
    };
    score += 10;
    recommendations.push('‚úÖ Permissions Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    analysis.permissionsPolicy = { present: false, score: 0 };
    missingHeaders.push('Permissions-Policy');
    recommendations.push('‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Permissions Policy –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è API');
  }
  
  // X-XSS-Protection (deprecated but still relevant)
  if (headers['x-xss-protection']) {
    analysis.xssProtection = {
      present: true,
      value: headers['x-xss-protection'],
      score: 5
    };
    score += 5;
  } else {
    missingHeaders.push('X-XSS-Protection');
  }
  
  // Calculate grade based on score
  let grade = 'F';
  if (score >= 90) grade = 'A+';
  else if (score >= 80) grade = 'A';
  else if (score >= 70) grade = 'B';
  else if (score >= 60) grade = 'C';
  else if (score >= 40) grade = 'D';
  
  // Critical security issues
  if (criticalCount === 0) {
    issues.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    recommendations.push('üö® –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  }
  
  return {
    grade,
    score,
    headerAnalysis: analysis,
    missingHeaders,
    issues,
    recommendations,
    criticalCount
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
function isNavigationLink(parentClass, linkClass, linkText) {
  const navKeywords = [
    'nav', 'menu', 'header', 'navigation', 'main-menu', 'primary-menu',
    'top-menu', 'sidebar', 'footer-menu', 'breadcrumb'
  ];
  
  const textKeywords = [
    '–≥–ª–∞–≤–Ω–∞—è', '–æ –Ω–∞—Å', '—É—Å–ª—É–≥–∏', '–ø—Ä–æ–¥—É–∫—Ç', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–±–ª–æ–≥', '–Ω–æ–≤–æ—Å—Ç–∏',
    '–∫–∞—Ç–∞–ª–æ–≥', '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', '–ø—Ä–æ–µ–∫—Ç—ã', '–∫–æ–º–∞–Ω–¥–∞', '—Ü–µ–Ω—ã', '–æ—Ç–∑—ã–≤—ã',
    'home', 'about', 'services', 'products', 'contact', 'blog', 'news',
    'catalog', 'portfolio', 'projects', 'team', 'pricing', 'reviews'
  ];
  
  const classesToCheck = (parentClass + ' ' + linkClass).toLowerCase();
  const textToCheck = linkText.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Å–∞–º–æ–π —Å—Å—ã–ª–∫–∏
  if (navKeywords.some(keyword => classesToCheck.includes(keyword))) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
  if (textKeywords.some(keyword => textToCheck.includes(keyword))) {
    return true;
  }
  
  return false;
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–ª—è Google Sitelinks
function analyzeSitelinksPotential($, internalLinks, url) {
  const analysis = {
    score: 0,
    maxScore: 100,
    status: 'poor', // poor, good, excellent
    issues: [],
    recommendations: [],
    navigation: {
      hasMainMenu: false,
      menuItemsCount: 0,
      menuStructure: 'none' // none, simple, complex
    },
    urlStructure: {
      hasCleanUrls: true,
      hasLogicalHierarchy: false,
      avgUrlDepth: 0
    },
    linkingProfile: {
      internalLinksCount: internalLinks.length,
      navigationLinksCount: 0,
      topSections: []
    }
  };

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const navElements = $('nav, .nav, .menu, .navigation, header .menu, .main-menu');
    if (navElements.length > 0) {
      analysis.navigation.hasMainMenu = true;
      analysis.score += 25;
      
      // –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
      const menuLinks = navElements.find('a').length;
      analysis.navigation.menuItemsCount = menuLinks;
      
      if (menuLinks >= 3 && menuLinks <= 8) {
        analysis.navigation.menuStructure = 'optimal';
        analysis.score += 20;
      } else if (menuLinks > 0) {
        analysis.navigation.menuStructure = 'simple';
        analysis.score += 10;
        if (menuLinks > 8) {
          analysis.issues.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-8)');
        }
      }
    } else {
      analysis.issues.push('–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      analysis.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏');
    }

    // 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL
    const urlDepths = [];
    const sections = {};
    
    internalLinks.forEach(link => {
      try {
        if (typeof link === 'object' && link.href) {
          const linkUrl = new URL(link.href, url);
          const pathname = linkUrl.pathname;
          const depth = pathname.split('/').filter(part => part.length > 0).length;
          urlDepths.push(depth);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
          const firstSegment = pathname.split('/')[1];
          if (firstSegment && firstSegment !== '') {
            sections[firstSegment] = (sections[firstSegment] || 0) + 1;
          }
          
          // –ü–æ–¥—Å—á–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
          if (link.isNavigation) {
            analysis.linkingProfile.navigationLinksCount++;
          }
        }
      } catch (e) {
        // Invalid URL
      }
    });

    // –°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ URL
    if (urlDepths.length > 0) {
      analysis.urlStructure.avgUrlDepth = Math.round((urlDepths.reduce((a, b) => a + b, 0) / urlDepths.length) * 100) / 100;
      
      if (analysis.urlStructure.avgUrlDepth <= 3) {
        analysis.score += 15;
        analysis.urlStructure.hasLogicalHierarchy = true;
      } else {
        analysis.issues.push(`–°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ URL —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (${analysis.urlStructure.avgUrlDepth})`);
        analysis.recommendations.push('–£–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL, —Å–¥–µ–ª–∞–π—Ç–µ –µ—ë –±–æ–ª–µ–µ –ø–ª–æ—Å–∫–æ–π');
      }
    }

    // 3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ sitelinks)
    const sortedSections = Object.entries(sections)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 6)
      .map(([section, count]) => ({
        name: section,
        linkCount: count,
        urlExample: `/${section}`
      }));
    
    analysis.linkingProfile.topSections = sortedSections;

    if (sortedSections.length >= 3) {
      analysis.score += 20;
    } else {
      analysis.issues.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–∞–π—Ç–∞');
      analysis.recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã —Å–∞–π—Ç–∞ —Å —á–µ—Ç–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π');
    }

    // 4. –ö–∞—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
    const navigationRatio = analysis.linkingProfile.navigationLinksCount / Math.max(analysis.linkingProfile.internalLinksCount, 1);
    
    if (navigationRatio >= 0.1) {
      analysis.score += 10;
    } else {
      analysis.issues.push('–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏');
      analysis.recommendations.push('–£–ª—É—á—à–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏');
    }

    // 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const breadcrumbs = $('.breadcrumb, .breadcrumbs, nav ol').length;
    if (breadcrumbs > 0) {
      analysis.score += 10;
      analysis.recommendations.push('‚úÖ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç Google –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞');
    } else {
      analysis.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if (analysis.score >= 80) {
      analysis.status = 'excellent';
    } else if (analysis.score >= 50) {
      analysis.status = 'good';
    } else {
      analysis.status = 'poor';
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.status === 'excellent') {
      analysis.recommendations.push('üèÜ –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sitelinks –æ—Ç Google!');
    } else if (analysis.status === 'good') {
      analysis.recommendations.push('üëç –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏');
    } else {
      analysis.recommendations.push('üìà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
    }

    return analysis;

  } catch (error) {
    console.error('Sitelinks analysis error:', error);
    return {
      score: 0,
      maxScore: 100,
      status: 'error',
      issues: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ sitelinks'],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é'],
      navigation: { hasMainMenu: false, menuItemsCount: 0, menuStructure: 'none' },
      urlStructure: { hasCleanUrls: false, hasLogicalHierarchy: false, avgUrlDepth: 0 },
      linkingProfile: { internalLinksCount: 0, navigationLinksCount: 0, topSections: [] }
    };
  }
}

// –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
function analyzeLinkProfile($, internalLinks, externalLinks, url) {
  const analysis = {
    score: 0,
    maxScore: 100,
    issues: [],
    recommendations: [],
    internal: {
      total: internalLinks.length,
      unique: [],
      anchorTexts: {},
      distribution: {},
      quality: 'poor' // poor, fair, good, excellent
    },
    external: {
      total: externalLinks.length,
      domains: {},
      nofollow: 0,
      dofollow: 0,
      social: [],
      quality: 'poor'
    },
    ratios: {
      internalToExternal: 0,
      nofollowRatio: 0,
      anchorDiversity: 0
    }
  };

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    const uniqueInternalUrls = new Set();
    const anchorTexts = {};
    
    internalLinks.forEach(link => {
      if (typeof link === 'object' && link.href) {
        // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL
        uniqueInternalUrls.add(link.href);
        
        // –ê–Ω–∞–ª–∏–∑ anchor —Ç–µ–∫—Å—Ç–æ–≤
        const anchor = link.text?.trim() || '';
        if (anchor) {
          anchorTexts[anchor] = (anchorTexts[anchor] || 0) + 1;
        }
      }
    });
    
    analysis.internal.unique = Array.from(uniqueInternalUrls);
    analysis.internal.anchorTexts = anchorTexts;
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    const uniqueCount = uniqueInternalUrls.size;
    const totalInternal = internalLinks.length;
    
    if (uniqueCount >= 10 && totalInternal >= 20) {
      analysis.internal.quality = 'excellent';
      analysis.score += 25;
    } else if (uniqueCount >= 5 && totalInternal >= 10) {
      analysis.internal.quality = 'good';
      analysis.score += 20;
    } else if (uniqueCount >= 3 && totalInternal >= 5) {
      analysis.internal.quality = 'fair';
      analysis.score += 10;
    } else {
      analysis.issues.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏');
      analysis.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏');
    }

    // 2. –ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    const externalDomains = {};
    const socialDomains = ['facebook.com', 'instagram.com', 'twitter.com', 'linkedin.com', 'youtube.com', 'tiktok.com', 'telegram.org'];
    const socialLinksSet = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    let nofollowCount = 0;
    
    // –ê–Ω–∞–ª–∏–∑ nofollow/dofollow —Å—Å—ã–ª–æ–∫
    $('a[href]').each((i, el) => {
      const href = $(el).attr('href');
      const rel = $(el).attr('rel') || '';
      
      if (href && (href.startsWith('http://') || href.startsWith('https://'))) {
        try {
          const linkUrl = new URL(href);
          const currentUrl = new URL(url);
          
          if (linkUrl.hostname !== currentUrl.hostname) {
            // –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
            const domain = linkUrl.hostname.replace('www.', '');
            externalDomains[domain] = (externalDomains[domain] || 0) + 1;
            
            if (rel.includes('nofollow')) {
              nofollowCount++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            if (socialDomains.some(social => domain.includes(social))) {
              socialLinksSet.add(domain);
            }
          }
        } catch (e) {
          // Invalid URL
        }
      }
    });
    
    analysis.external.domains = externalDomains;
    analysis.external.nofollow = nofollowCount;
    analysis.external.dofollow = analysis.external.total - nofollowCount;
    analysis.external.social = Array.from(socialLinksSet); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
    const domainCount = Object.keys(externalDomains).length;
    
    if (domainCount >= 3 && analysis.external.total <= 10) {
      analysis.external.quality = 'excellent';
      analysis.score += 25;
    } else if (domainCount >= 2 && analysis.external.total <= 15) {
      analysis.external.quality = 'good';
      analysis.score += 20;
    } else if (analysis.external.total > 20) {
      analysis.external.quality = 'poor';
      analysis.issues.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –º–æ–∂–µ—Ç —Ä–∞–∑–±–∞–≤–ª—è—Ç—å link juice');
      analysis.recommendations.push('–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ nofollow');
    } else {
      analysis.external.quality = 'fair';
      analysis.score += 10;
    }

    // 3. –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
    analysis.ratios.internalToExternal = analysis.external.total > 0 ? 
      Math.round((analysis.internal.total / analysis.external.total) * 100) / 100 : 
      analysis.internal.total;
      
    analysis.ratios.nofollowRatio = analysis.external.total > 0 ? 
      Math.round((nofollowCount / analysis.external.total) * 100) : 0;
      
    analysis.ratios.anchorDiversity = Object.keys(anchorTexts).length;

    // 4. –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
    if (analysis.ratios.internalToExternal >= 3) {
      analysis.score += 15;
      analysis.recommendations.push('‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º');
    } else if (analysis.ratios.internalToExternal >= 1.5) {
      analysis.score += 10;
    } else {
      analysis.issues.push('–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º');
      analysis.recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫');
    }

    // 5. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è anchor —Ç–µ–∫—Å—Ç–æ–≤
    if (analysis.ratios.anchorDiversity >= 5) {
      analysis.score += 10;
      analysis.recommendations.push('üëç –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ anchor —Ç–µ–∫—Å—Ç–æ–≤');
    } else {
      analysis.issues.push('–ù–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ anchor —Ç–µ–∫—Å—Ç–æ–≤');
      analysis.recommendations.push('–í–∞—Ä—å–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ SEO');
    }

    // 6. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.internal.total < 5) {
      analysis.recommendations.push('üîó –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10-15)');
    }
    
    if (analysis.ratios.nofollowRatio < 30 && analysis.external.total > 5) {
      analysis.recommendations.push('üîí –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ nofollow –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º');
    }
    
    if (analysis.external.social.length === 0) {
      analysis.recommendations.push('üì± –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ engagement');
    }

    return analysis;

  } catch (error) {
    console.error('Link profile analysis error:', error);
    return {
      score: 0,
      maxScore: 100,
      issues: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'],
      recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã'],
      internal: { total: 0, unique: [], anchorTexts: {}, distribution: {}, quality: 'poor' },
      external: { total: 0, domains: {}, nofollow: 0, dofollow: 0, social: [], quality: 'poor' },
      ratios: { internalToExternal: 0, nofollowRatio: 0, anchorDiversity: 0 }
    };
  }
}

module.exports = router;