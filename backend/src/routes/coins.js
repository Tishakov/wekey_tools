const express = require('express');
const { protect } = require('../middleware/auth');
const { AppError } = require('../middleware/errorHandler');
const { CoinTransaction } = require('../config/database');

const router = express.Router();

// –ó–∞—â–∏—Ç–∞ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.use(protect);

// POST /api/coins/spend - –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–æ–∏–Ω—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
router.post('/spend', async (req, res, next) => {
  try {
    console.log('ü™ô Spending coins for user:', req.user.id, req.user.email);
    console.log('ü™ô Current balance:', req.user.coinBalance);
    console.log('ü™ô Request body:', req.body);
    
    const { toolName, amount = 1 } = req.body;
    
    if (!toolName) {
      return next(new AppError('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 400));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.user.coinBalance < amount) {
      return next(new AppError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', 400));
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç—Ä–∞—Ç—ã –∫–æ–∏–Ω–æ–≤
    console.log('ü™ô Creating transaction...');
    const result = await CoinTransaction.spendForTool(req.user.id, toolName, amount);
    console.log('ü™ô Transaction result:', result);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    await req.user.reload();

    res.json({
      success: true,
      message: `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${amount} –∫–æ–∏–Ω${amount > 1 ? '–æ–≤' : ''} –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ${toolName}`,
      data: {
        transaction: {
          id: result.transaction.id,
          type: result.transaction.type,
          amount: result.transaction.amount,
          balanceBefore: result.transaction.balanceBefore,
          balanceAfter: result.transaction.balanceAfter,
          toolName: result.transaction.toolName
        },
        newBalance: req.user.coinBalance
      }
    });

  } catch (error) {
    console.error('‚ùå Error spending coins:', error);
    next(error);
  }
});

// GET /api/coins/history - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–∏–Ω–æ–≤
router.get('/history', async (req, res, next) => {
  try {
    const { page = 1, limit = 20, type } = req.query;
    const offset = (page - 1) * limit;

    const whereClause = { userId: req.user.id };
    if (type) {
      whereClause.type = type;
    }

    const transactions = await CoinTransaction.findAndCountAll({
      where: whereClause,
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    res.json({
      success: true,
      data: {
        transactions: transactions.rows,
        pagination: {
          total: transactions.count,
          page: parseInt(page),
          pages: Math.ceil(transactions.count / limit)
        }
      }
    });

  } catch (error) {
    next(error);
  }
});

// GET /api/coins/balance - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–∏–Ω–æ–≤
router.get('/balance', async (req, res, next) => {
  try {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    await req.user.reload();

    res.json({
      success: true,
      data: {
        balance: req.user.coinBalance,
        userId: req.user.id
      }
    });

  } catch (error) {
    next(error);
  }
});

// POST /api/coins/admin/add - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/admin/add', async (req, res, next) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin') {
      return next(new AppError('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 403));
    }

    const { userId, amount, description } = req.body;
    
    if (!userId || !amount) {
      return next(new AppError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400));
    }

    if (amount <= 0) {
      return next(new AppError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º', 400));
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤
    const transaction = await CoinTransaction.createTransaction(
      userId,
      'admin_add',
      amount,
      null,
      description || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤'
    );

    res.json({
      success: true,
      message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∫–æ–∏–Ω${amount > 1 ? '–æ–≤' : ''} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${userId}`,
      data: {
        transaction: {
          id: transaction.id,
          type: transaction.type,
          amount: transaction.amount,
          balanceBefore: transaction.balanceBefore,
          balanceAfter: transaction.balanceAfter,
          description: transaction.description
        }
      }
    });

  } catch (error) {
    next(error);
  }
});

module.exports = router;