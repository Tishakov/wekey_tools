const { sequelize, CoinTransaction, User } = require('../src/models');

async function initCoinTransactions() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã CoinTransactions...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await CoinTransaction.sync({ force: false });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ CoinTransactions —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const count = await CoinTransaction.count();
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ: ${count}`);
    
    if (count === 0) {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne();
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id})`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const testTransactions = [
        {
          userId: user.id,
          type: 'registration_bonus',
          amount: 100,
          balanceBefore: 0,
          balanceAfter: 100,
          reason: '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
          createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        },
        {
          userId: user.id,
          type: 'TOOL_USAGE',
          amount: -1,
          balanceBefore: 100,
          balanceAfter: 99,
          reason: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"',
          createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        },
        {
          userId: user.id,
          type: 'TOOL_USAGE',
          amount: -2,
          balanceBefore: 99,
          balanceAfter: 97,
          reason: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "SEO –ê—É–¥–∏—Ç"',
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        },
        {
          userId: user.id,
          type: 'ADMIN_ADJUSTMENT',
          amount: 50,
          balanceBefore: 97,
          balanceAfter: 147,
          reason: '–ë–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        }
      ];
      
      for (const transaction of testTransactions) {
        await CoinTransaction.create(transaction);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transaction.type} (${transaction.amount})`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await user.update({ coinBalance: 147 });
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: 147 –º–æ–Ω–µ—Ç');
    }
    
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  } finally {
    await sequelize.close();
  }
}

initCoinTransactions();