const { sequelize, User } = require('./src/config/database');

async function createTestUser() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('‚úÖ Database connected successfully');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    await User.destroy({ where: { email: 'test@example.com' } });
    await User.destroy({ where: { email: 'premium@example.com' } });
    console.log('üóëÔ∏è Removed existing test users');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await User.create({
      email: 'test@example.com',
      password: '12345678', // –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      role: 'user',
      language: 'ru',
      theme: 'dark',
      emailVerified: true, // –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
      status: 'active'
    });

    console.log('‚úÖ Test user created successfully!');
    console.log('üìß Email: test@example.com');
    console.log('üîë Password: 12345678');
    console.log('üë§ Name:', testUser.firstName, testUser.lastName);
    console.log('üé≠ Role:', testUser.role);
    console.log('üåç Language:', testUser.language);
    console.log('üíæ ID:', testUser.id);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const premiumUser = await User.create({
      email: 'premium@example.com',
      password: '12345678',
      firstName: '–ü—Ä–µ–º–∏—É–º',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      role: 'premium',
      language: 'en',
      theme: 'light',
      emailVerified: true,
      status: 'active',
      dailyApiLimit: 1000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º
    });

    console.log('\n‚ú® Premium user created too!');
    console.log('üìß Email: premium@example.com');
    console.log('üîë Password: 12345678');
    console.log('üëë Role: premium');
    console.log('üöÄ API Limit:', premiumUser.dailyApiLimit);
    console.log('üíæ ID:', premiumUser.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\nüß™ Testing passwords:');
    const testCheck = await testUser.checkPassword('12345678');
    const premiumCheck = await premiumUser.checkPassword('12345678');
    console.log(`test@example.com password check: ${testCheck ? '‚úÖ VALID' : '‚ùå INVALID'}`);
    console.log(`premium@example.com password check: ${premiumCheck ? '‚úÖ VALID' : '‚ùå INVALID'}`);

  } catch (error) {
    console.error('‚ùå Error creating test users:', error.message);
    if (error.name === 'SequelizeValidationError') {
      error.errors.forEach(err => {
        console.error(`   - ${err.path}: ${err.message}`);
      });
    }
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createTestUser();