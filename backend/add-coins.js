// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ database.js –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏
const database = require('./src/config/database');
const { User, CoinTransaction } = database;

async function addCoinsToUser() {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await database.sequelize.authenticate();
        console.log('‚úÖ Connected to database');

        const userEmail = 'bohdan.tishakov@gmail.com';
        const coinsToAdd = 100;
        const reason = 'Manual bonus from admin';

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ where: { email: userEmail } });
        
        if (!user) {
            console.error(`‚ùå User with email ${userEmail} not found`);
            process.exit(1);
        }

        console.log(`üë§ Found user: ${user.name || user.displayName || 'No name'} (${user.email})`);
        console.log(`üí∞ Current balance: ${user.coinBalance} coins`);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await database.sequelize.transaction(async (t) => {
            const balanceBefore = user.coinBalance;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user.increment('coinBalance', { 
                by: coinsToAdd, 
                transaction: t 
            });

            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            await user.reload({ transaction: t });
            const balanceAfter = user.coinBalance;

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await CoinTransaction.create({
                userId: user.id,
                toolId: 'admin-bonus',
                amount: coinsToAdd,
                type: 'admin_add',
                balanceBefore: balanceBefore,
                balanceAfter: balanceAfter,
                description: reason,
                metadata: {
                    admin_action: true,
                    timestamp: new Date().toISOString()
                }
            }, { transaction: t });

            console.log(`üéâ Successfully added ${coinsToAdd} coins to ${userEmail}`);
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.reload();
        console.log(`üíé New balance: ${user.coinBalance} coins`);
        console.log(`‚ûï Added: +${coinsToAdd} coins`);

    } catch (error) {
        console.error('‚ùå Error adding coins:', error);
    } finally {
        await database.sequelize.close();
        console.log('üîå Database connection closed');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addCoinsToUser();