import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import ExcelJS from 'exceljs';
import ColumnIcon from '../assets/icons/column.svg?react';
import StringIcon from '../assets/icons/string.svg?react';
import '../styles/tool-pages.css';
import './AnalyticsTool.css';
import { openaiService, type AnalyticsData } from '../services/openaiService';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface Metric {
  id: string;
  name: string;
  tooltip: string;
  isPercentage: boolean;
  isDecimal?: boolean; // –¥–ª—è –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ %
  defaultValue: number;
  hasPeriod: boolean; // —Ñ–ª–∞–≥ –¥–ª—è –¥–≤—É—Ö –ø–æ–ª–µ–π (–¥–µ–Ω—å + 30 –¥–Ω–µ–π)
  sliderRange?: { min: number; max: number }; // –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
}

interface Group {
  title: string;
  color: string;
  metrics: Metric[];
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const metricsConfig: Group[] = [
  {
    title: '–¢—Ä–∞—Ñ–∏–∫',
    color: '#6B7280', // —Å–µ—Ä—ã–π
    metrics: [
      { id: 'clicks', name: '–ö–ª–∏–∫–∏', tooltip: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ', isPercentage: false, defaultValue: 300, hasPeriod: true, sliderRange: { min: 0, max: 500 } },
      { id: 'impressions', name: '–ü–æ–∫–∞–∑—ã', tooltip: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤ —Ä–µ–∫–ª–∞–º—ã', isPercentage: false, defaultValue: 8000, hasPeriod: true, sliderRange: { min: 0, max: 10000 } },
      { id: 'ctr', name: 'CTR %', tooltip: 'Click Through Rate - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –∫ –ø–æ–∫–∞–∑–∞–º', isPercentage: true, defaultValue: 3.75, hasPeriod: false },
    ]
  },
  {
    title: '–†–∞—Å—Ö–æ–¥—ã',
    color: '#EF4444', // –∫—Ä–∞—Å–Ω—ã–π
    metrics: [
      { id: 'cpc', name: 'CPC (–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞)', tooltip: 'Cost Per Click - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞', isPercentage: false, isDecimal: true, defaultValue: 12, hasPeriod: false, sliderRange: { min: 0, max: 50 } },
      { id: 'adCost', name: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É', tooltip: '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é', isPercentage: false, defaultValue: 3600, hasPeriod: true, sliderRange: { min: 0, max: 10000 } },
    ]
  },
  {
    title: '–°–∞–π—Ç',
    color: '#F59E0B', // –∂—ë–ª—Ç—ã–π
    metrics: [
      { id: 'cr1', name: 'CR1 (–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞ %)', tooltip: 'Conversion Rate 1 - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, —Å—Ç–∞–≤—à–∏—Ö –ª–∏–¥–∞–º–∏', isPercentage: true, defaultValue: 4.0, hasPeriod: false, sliderRange: { min: 0, max: 50 } },
      { id: 'leads', name: '–õ–∏–¥–æ–≤, –ø—Ä–æ–¥–∞–∂', tooltip: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤', isPercentage: false, isDecimal: true, defaultValue: 12, hasPeriod: true, sliderRange: { min: 0, max: 200 } },
      { id: 'cpl', name: 'CPL (–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞)', tooltip: 'Cost Per Lead - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ª–∏–¥–∞', isPercentage: false, defaultValue: 300, hasPeriod: false, sliderRange: { min: 0, max: 1000 } },
    ]
  },
  {
    title: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂',
    color: '#3B82F6', // —Å–∏–Ω–∏–π
    metrics: [
      { id: 'cr2', name: 'CR2 (–ò–∑ –ª–∏–¥–∞ –≤ –ø—Ä–æ–¥–∞–∂—É %)', tooltip: 'Conversion Rate 2 - –ø—Ä–æ—Ü–µ–Ω—Ç –ª–∏–¥–æ–≤, —Å—Ç–∞–≤—à–∏—Ö –ø—Ä–æ–¥–∞–∂–∞–º–∏', isPercentage: true, defaultValue: 75.0, hasPeriod: false },
      { id: 'sales', name: '–°–¥–µ–ª–æ–∫, –ø—Ä–æ–¥–∞–∂', tooltip: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', isPercentage: false, isDecimal: true, defaultValue: 9, hasPeriod: true, sliderRange: { min: 0, max: 100 } },
      { id: 'cpo', name: 'CPO (–¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏, –ø—Ä–æ–¥–∞–∂–∏)', tooltip: 'Cost Per Order - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏', isPercentage: false, defaultValue: 400, hasPeriod: false, sliderRange: { min: 0, max: 1000 } },
    ]
  },
  {
    title: '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    color: '#8B5CF6', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    metrics: [
      { id: 'aov', name: 'AOV (–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –æ–¥–Ω–æ–π)', tooltip: 'Average Order Value - —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞', isPercentage: false, defaultValue: 3000, hasPeriod: false, sliderRange: { min: 0, max: 5000 } },
      { id: 'revenue', name: '–í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥', tooltip: '–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –ø—Ä–æ–¥–∞–∂', isPercentage: false, defaultValue: 27000, hasPeriod: true, sliderRange: { min: 0, max: 100000 } },
      { id: 'marginPercent', name: '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %', tooltip: '–ü—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ä–∂–∏ –æ—Ç –¥–æ—Ö–æ–¥–∞', isPercentage: true, defaultValue: 50, hasPeriod: false },
      { id: 'marginPerUnit', name: '–ú–∞—Ä–∂–∞ —Å –æ–¥–Ω–æ–π', tooltip: '–ú–∞—Ä–∂–∞ —Å –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞', isPercentage: false, defaultValue: 1500, hasPeriod: false, sliderRange: { min: 0, max: 5000 } },
      { id: 'totalMargin', name: '–û–±—â–∞—è –º–∞—Ä–∂–∞ (–ü—Ä–∏–±—ã–ª—å)', tooltip: '–û–±—â–∞—è –º–∞—Ä–∂–∞ –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂', isPercentage: false, defaultValue: 13500, hasPeriod: false, sliderRange: { min: 0, max: 50000 } },
    ]
  },
  {
    title: '–î–æ—Ö–æ–¥—ã',
    color: '#10B981', // –∑–µ–ª—ë–Ω—ã–π
    metrics: [
      { id: 'netProfit', name: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', tooltip: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤', isPercentage: false, defaultValue: 9900, hasPeriod: true, sliderRange: { min: 0, max: 50000 } },
      { id: 'netProfitPerUnit', name: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π', tooltip: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã', isPercentage: false, defaultValue: 1100, hasPeriod: true, sliderRange: { min: 0, max: 5000 } },
      { id: 'romi', name: 'ROMI %', tooltip: 'Return on Marketing Investment - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', isPercentage: true, defaultValue: 275, hasPeriod: false, sliderRange: { min: 0, max: 1000 } },
      { id: 'roas', name: 'ROAS', tooltip: 'Return on Advertising Spend - –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', isPercentage: false, defaultValue: 7.5, hasPeriod: false, sliderRange: { min: 0, max: 10 } },
    ]
  },
  {
    title: '–§–æ—Ä–º—É–ª—ã',
    color: '#6B7280', // —Å–µ—Ä—ã–π
    metrics: [
      { id: 'drr', name: '–î–†–† %', tooltip: '–î–æ–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤', isPercentage: true, isDecimal: true, defaultValue: 13.33, hasPeriod: false },
      { id: 'iccr', name: 'ICCR %', tooltip: 'Index of Customer Conversion Rate', isPercentage: true, isDecimal: true, defaultValue: 26.67, hasPeriod: false },
      { id: 'cpm', name: 'CPM', tooltip: 'Cost Per Mille - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—ã—Å—è—á–∏ –ø–æ–∫–∞–∑–æ–≤', isPercentage: false, defaultValue: 450, hasPeriod: false, sliderRange: { min: 0, max: 1000 } },
    ]
  }
];

const AnalyticsTool: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)
  const [period, setPeriod] = useState<number>(30);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–∞–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const [showExportModal, setShowExportModal] = useState<boolean>(false);
  const [exportFormat, setExportFormat] = useState<'vertical' | 'horizontal'>('vertical');
  const [isModalClosing, setIsModalClosing] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–∞–ø–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
  const [showAIModal, setShowAIModal] = useState<boolean>(false);
  const [isAIModalClosing, setIsAIModalClosing] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã –ò–ò –∞–Ω–∞–ª–∏–∑–∞
  const [businessType, setBusinessType] = useState<'ecommerce' | 'landing'>('ecommerce');
  const [niche, setNiche] = useState<string>('');
  const [currency, setCurrency] = useState<'uah' | 'usd' | 'rub'>('uah');
  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
  const [aiResponse, setAiResponse] = useState<string>('');
  const [aiError, setAiError] = useState<string>('');
  
  // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeModal = () => {
    setIsModalClosing(true);
    setTimeout(() => {
      setShowExportModal(false);
      setIsModalClosing(false);
    }, 300); // –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∞—Ü–∏–∏
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ò–ò –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeAIModal = () => {
    setIsAIModalClosing(true);
    setTimeout(() => {
      setShowAIModal(false);
      setIsAIModalClosing(false);
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
      setNiche('');
      setAiResponse('');
      setAiError('');
      setIsAnalyzing(false);
    }, 300);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò
  const handleAIAnalysis = async () => {
    console.log('üéØ Starting AI analysis...');
    
    if (!niche.trim()) {
      setAiError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏—à—É –±–∏–∑–Ω–µ—Å–∞');
      return;
    }
    
    setIsAnalyzing(true);
    setAiError('');
    setAiResponse('');
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const analyticsData: AnalyticsData = {
        businessType,
        niche: niche.trim(),
        metrics,
        period,
        currency
      };
      
      console.log('üìä Analytics data prepared:', analyticsData);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
      const result = await openaiService.getAnalysis(analyticsData);
      
      console.log('üìà Analysis result:', result);
      
      if (result.success && result.analysis) {
        setAiResponse(result.analysis);
        console.log('‚úÖ Analysis set to state');
      } else {
        console.error('‚ùå Analysis failed:', result.error);
        setAiError(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      }
    } catch (error) {
      console.error('üí• Error during AI analysis:', error);
      setAiError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsAnalyzing(false);
      console.log('üèÅ Analysis completed');
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
  const copyAIResponse = async () => {
    if (aiResponse) {
      try {
        await navigator.clipboard.writeText(aiResponse);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
      } catch (error) {
        console.error('Failed to copy text:', error);
      }
    }
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
  const [scaleFactor, setScaleFactor] = useState<number>(1);
  
  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å—é
  const increaseScale = () => {
    setScaleFactor(prev => Math.min(20, prev + 1));
  };
  
  const decreaseScale = () => {
    setScaleFactor(prev => Math.max(1, prev - 1));
  };
  
  // –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
  const getScaledRange = (metric: Metric) => {
    if (metric.sliderRange) {
      return {
        min: metric.sliderRange.min,
        max: metric.sliderRange.max * scaleFactor
      };
    }
    return null;
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
  const [metrics, setMetrics] = useState<Record<string, number | string>>(() => {
    const initialState: Record<string, number | string> = {};
    metricsConfig.forEach(group => {
      group.metrics.forEach(metric => {
        // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (metric.isPercentage || metric.isDecimal) {
          initialState[metric.id] = parseFloat(metric.defaultValue.toFixed(1));
        } else {
          initialState[metric.id] = metric.defaultValue;
        }
      });
    });
    return initialState;
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const updatedMetrics: Record<string, number | string> = {};
    let hasUpdates = false;

    metricsConfig.forEach(group => {
      group.metrics.forEach(metric => {
        if ((metric.isPercentage || metric.isDecimal) && typeof metrics[metric.id] === 'number') {
          const currentValue = metrics[metric.id] as number;
          if (Number.isInteger(currentValue)) {
            updatedMetrics[metric.id] = currentValue.toFixed(1);
            hasUpdates = true;
          }
        }
      });
    });

    if (hasUpdates) {
      setMetrics(prev => ({
        ...prev,
        ...updatedMetrics
      }));
    }
  }, []); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–Ω–æ –ª–∏ –ø–æ–ª–µ –±—ã—Ç—å readonly
  const isReadonlyField = (metricId: string): boolean => {
    const readonlyMetrics = [
      'ctr',        // CTR
      'cpl',        // CPL ‚Äì —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞
      'cpo',        // CPO ‚Äì —Ü–µ–Ω–∞ —Å–¥–µ–ª–∫–∏, –ø—Ä–æ–¥–∞–∂–∏
      'totalMargin', // –û–±—â–∞—è –º–∞—Ä–∂–∞
      // –í—Å–µ –ø–æ–ª—è –≤ –±–ª–æ–∫–µ –î–æ—Ö–æ–¥—ã
      'profit',     // –ü—Ä–∏–±—ã–ª—å
      'netProfit',  // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
      'netProfitPerUnit', // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π
      'romi',       // ROMI %
      'roas',       // ROAS
      // –í—Å–µ –ø–æ–ª—è –≤ –±–ª–æ–∫–µ –§–æ—Ä–º—É–ª—ã
      'drr',        // –î–†–† %
      'iccr',       // ICCR %
      'cpm'         // CPM
    ];
    return readonlyMetrics.includes(metricId);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–µ–Ω –ª–∏ —Å–ª–∞–π–¥–µ—Ä –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
  const isSliderDisabled = (metricId: string): boolean => {
    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const metric = metricsConfig
      .flatMap(group => group.metrics)
      .find(m => m.id === metricId);
    
    if (!metric) return true; // –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
    const calculatedFields = ['netProfit', 'netProfitPerUnit'];
    if (calculatedFields.includes(metricId)) return true;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è:
    // 1. –ü–æ–ª–µ–π —Å –ø–µ—Ä–∏–æ–¥–æ–º (hasPeriod: true): –∫–ª–∏–∫–∏, –ø–æ–∫–∞–∑—ã, –∑–∞—Ç—Ä–∞—Ç—ã, –ª–∏–¥—ã, —Å–¥–µ–ª–∫–∏, –¥–æ—Ö–æ–¥—ã  
    // 2. –û—Å–æ–±—ã—Ö –ø–æ–ª–µ–π: CPC, CR1, CR2, AOV, –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    const allowedFields = ['cpc', 'cr1', 'cr2', 'aov', 'marginPercent'];
    return !metric.hasPeriod && !allowedFields.includes(metricId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
  const handleSliderChange = (metricId: string, sliderValue: number, metric: Metric) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–ª–∞–π–¥–µ—Ä –¥–ª—è —ç—Ç–æ–π –º–µ—Ç—Ä–∏–∫–∏
    if (isSliderDisabled(metricId)) return;
    
    // –ë–æ–ª–µ–µ —É–º–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ—Ç—Ä–∏–∫–∏
    let scaledValue: number | string;
    
    if (metric.sliderRange) {
      // –î–ª—è –ø–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Å–ª–∞–π–¥–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
      const scaledRange = getScaledRange(metric);
      if (scaledRange) {
        const { min, max } = scaledRange;
        const numericValue = (sliderValue / 100) * (max - min) + min;
        scaledValue = metric.isDecimal ? numericValue.toFixed(1) : 
                     metric.isPercentage ? numericValue.toFixed(1) : 
                     Math.round(numericValue);
      } else {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const { min, max } = metric.sliderRange;
        const numericValue = (sliderValue / 100) * (max - min) + min;
        scaledValue = metric.isDecimal ? numericValue.toFixed(1) : 
                     metric.isPercentage ? numericValue.toFixed(1) : 
                     Math.round(numericValue);
      }
    } else if (metric.isPercentage) {
      // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 0-100 —Å–ª–∞–π–¥–µ—Ä -> 0-100% –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      scaledValue = sliderValue.toFixed(1);
    } else if (metric.isDecimal) {
      // –î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π –≤–∏–¥
      const baseValue = metric.defaultValue;
      const numericValue = (sliderValue / 50) * baseValue;
      scaledValue = numericValue.toFixed(1);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      const baseValue = metric.defaultValue;
      scaledValue = (sliderValue / 50) * baseValue; // 50 = —Å—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    }
    
    setMetrics(prev => ({
      ...prev,
      [metricId]: scaledValue
    }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    updateRelatedFields(metricId, scaledValue);
  };

  // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const handleInputFocus = (metricId: string) => {
    const currentValue = metrics[metricId];
    if (currentValue === 0) {
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0
      setMetrics(prev => ({
        ...prev,
        [metricId]: '' as any // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      }));
    }
  };

  const handleInputBlur = (metricId: string, isPercentage: boolean, inputValue: string, isDecimal: boolean = false) => {
    let finalValue: number | string;
    
    if (inputValue === '' || inputValue === undefined) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
      finalValue = (isPercentage || isDecimal) ? '0.0' : 0;
    } else if (isPercentage || isDecimal) {
      // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π: –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º .0
      if (/^\d+$/.test(inputValue)) {
        finalValue = inputValue + '.0';
      } else {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —á–∞—Å—Ç—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        const numericValue = parseFloat(inputValue);
        if (!isNaN(numericValue)) {
          finalValue = numericValue.toFixed(1);
        } else {
          return;
        }
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      const numericValue = parseFloat(inputValue);
      if (!isNaN(numericValue)) {
        finalValue = numericValue;
      } else {
        return;
      }
    }
    
    setMetrics(prev => ({
      ...prev,
      [metricId]: finalValue
    }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    updateRelatedFields(metricId, finalValue);
  };

  const handleInputChange = (metricId: string, value: string, isPercentage: boolean, isDecimal: boolean = false) => {
    if (isReadonlyField(metricId)) return;

    if (isPercentage || isDecimal) {
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
      let processedValue = value.replace(',', '.');
      
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
      if (processedValue === '') {
        setMetrics(prev => ({
          ...prev,
          [metricId]: ''
        }));
        return;
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ —Å –º–∞–∫—Å–∏–º—É–º 1 –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
      if (!/^\d*\.?\d{0,1}$/.test(processedValue)) {
        return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setMetrics(prev => ({
        ...prev,
        [metricId]: processedValue
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ)
      const numericValue = parseFloat(processedValue);
      if (!isNaN(numericValue)) {
        updateRelatedFields(metricId, processedValue);
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
      if (value === '') {
        setMetrics(prev => ({
          ...prev,
          [metricId]: ''
        }));
        return;
      }
      
      const numericValue = parseFloat(value);
      if (!isNaN(numericValue)) {
        setMetrics(prev => ({
          ...prev,
          [metricId]: numericValue
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        updateRelatedFields(metricId, numericValue);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      event.currentTarget.blur(); // –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
  const updateRelatedFields = (changedMetricId: string, newValue: number | string) => {
    const numericValue = typeof newValue === 'string' ? parseFloat(newValue) || 0 : newValue;
    
    setMetrics(prev => {
      const updated = { ...prev };
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const getNumericValue = (id: string) => {
        const val = updated[id];
        return typeof val === 'string' ? parseFloat(val) || 0 : val;
      };
      
      // 1. CPC ‚Üî –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É (—á–µ—Ä–µ–∑ –∫–ª–∏–∫–∏)
      if (changedMetricId === 'cpc') {
        const clicks = getNumericValue('clicks');
        const newAdCost = numericValue * clicks;
        if (clicks > 0) {
          updated['adCost'] = newAdCost;
        }
      } else if (changedMetricId === 'adCost') {
        const clicks = getNumericValue('clicks');
        if (clicks > 0) {
          const newCpc = numericValue / clicks;
          updated['cpc'] = newCpc.toFixed(1);
        }
      }
      
      // 2. CR1 ‚Üî –õ–∏–¥–æ–≤/–ø—Ä–æ–¥–∞–∂ (—á–µ—Ä–µ–∑ –∫–ª–∏–∫–∏)
      if (changedMetricId === 'cr1') {
        const clicks = getNumericValue('clicks');
        const cr2 = getNumericValue('cr2');
        const cr1Percent = numericValue;
        const newLeads = (clicks * cr1Percent) / 100;
        updated['leads'] = newLeads.toFixed(1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ CR1 (—á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –ª–∏–¥—ã)
        const newSales = (newLeads * cr2) / 100;
        updated['sales'] = newSales.toFixed(1);
      } else if (changedMetricId === 'leads') {
        const clicks = getNumericValue('clicks');
        const cr2 = getNumericValue('cr2');
        if (clicks > 0) {
          const newCr1 = (numericValue / clicks) * 100;
          updated['cr1'] = newCr1.toFixed(1);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–¥–æ–≤
        const newSales = (numericValue * cr2) / 100;
        updated['sales'] = newSales.toFixed(1);
      }
      
      // 2.5. CR2 ‚Üî –°–¥–µ–ª–æ–∫ (—á–µ—Ä–µ–∑ –ª–∏–¥–æ–≤)
      if (changedMetricId === 'cr2') {
        const leads = getNumericValue('leads');
        const cr2Percent = numericValue;
        const newSales = (leads * cr2Percent) / 100;
        updated['sales'] = newSales.toFixed(1);
      } else if (changedMetricId === 'sales') {
        const leads = getNumericValue('leads');
        if (leads > 0) {
          const newCr2 = (numericValue / leads) * 100;
          updated['cr2'] = newCr2.toFixed(1);
        }
      }
      
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–∫–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
      if (changedMetricId === 'clicks') {
        const cpc = getNumericValue('cpc');
        const cr1 = getNumericValue('cr1');
        const cr2 = getNumericValue('cr2');
        const impressions = getNumericValue('impressions');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        updated['adCost'] = numericValue * cpc;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
        const newLeads = (numericValue * cr1) / 100;
        updated['leads'] = newLeads.toFixed(1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        const newSales = (newLeads * cr2) / 100;
        updated['sales'] = newSales.toFixed(1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CTR
        if (impressions > 0) {
          const newCtr = (numericValue / impressions) * 100;
          updated['ctr'] = newCtr.toFixed(1);
        }
      }
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º CTR
      if (changedMetricId === 'impressions') {
        const clicks = getNumericValue('clicks');
        if (clicks > 0) {
          const newCtr = (clicks / numericValue) * 100;
          updated['ctr'] = newCtr.toFixed(1);
        }
      }
      
      // 5. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º CPL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç –∏–ª–∏ –ª–∏–¥–æ–≤
      const adCost = getNumericValue('adCost');
      const leads = getNumericValue('leads');
      const sales = getNumericValue('sales');
      
      if ((changedMetricId === 'adCost' || changedMetricId === 'leads' || changedMetricId === 'clicks' || changedMetricId === 'cpc' || changedMetricId === 'cr1') && leads > 0) {
        const newCpl = adCost / leads;
        updated['cpl'] = newCpl.toFixed(0); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      }
      
      // 6. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º CPO –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç –∏–ª–∏ —Å–¥–µ–ª–æ–∫
      if ((changedMetricId === 'adCost' || changedMetricId === 'sales' || changedMetricId === 'clicks' || changedMetricId === 'cpc' || changedMetricId === 'cr1' || changedMetricId === 'cr2' || changedMetricId === 'leads') && sales > 0) {
        const newCpo = adCost / sales;
        updated['cpo'] = newCpo.toFixed(0); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      }
      
      // 7. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ AOV –∏–ª–∏ —Å–¥–µ–ª–æ–∫
      const aov = getNumericValue('aov');
      
      if (changedMetricId === 'aov' || changedMetricId === 'sales' || changedMetricId === 'clicks' || changedMetricId === 'cr1' || changedMetricId === 'cr2' || changedMetricId === 'leads') {
        const newRevenue = aov * sales;
        updated['revenue'] = Math.round(newRevenue);
      }
      
      // 8. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º AOV –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
      if (changedMetricId === 'revenue' && sales > 0) {
        const newAov = numericValue / sales;
        updated['aov'] = Math.round(newAov);
      }
      
      // 9. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É —Å –æ–¥–Ω–æ–π –∏ –æ–±—â—É—é –º–∞—Ä–∂—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
      const revenue = getNumericValue('revenue');
      const marginPercent = getNumericValue('marginPercent');
      
      if (changedMetricId === 'marginPercent' || changedMetricId === 'revenue' || changedMetricId === 'aov' || changedMetricId === 'sales' || changedMetricId === 'clicks' || changedMetricId === 'cr1' || changedMetricId === 'cr2' || changedMetricId === 'leads' || changedMetricId === 'cpc' || changedMetricId === 'impressions') {
        // –ú–∞—Ä–∂–∞ —Å –æ–¥–Ω–æ–π = AOV √ó –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %
        const newMarginPerUnit = (aov * marginPercent) / 100;
        updated['marginPerUnit'] = Math.round(newMarginPerUnit);
        
        // –û–±—â–∞—è –º–∞—Ä–∂–∞ = –í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥ √ó –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %
        const newTotalMargin = (revenue * marginPercent) / 100;
        updated['totalMargin'] = Math.round(newTotalMargin);
      }
      
      // 10. –û–±—Ä–∞—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä–∂–∏
      if (changedMetricId === 'marginPerUnit' && aov > 0) {
        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –º–∞—Ä–∂—É —Å –æ–¥–Ω–æ–π, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        const newMarginPercent = (numericValue / aov) * 100;
        updated['marginPercent'] = Math.round(newMarginPercent);
        
        // –ò –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –º–∞—Ä–∂—É —Å –Ω–æ–≤–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        const newTotalMargin = (revenue * newMarginPercent) / 100;
        updated['totalMargin'] = Math.round(newTotalMargin);
      }
      
      if (changedMetricId === 'totalMargin' && revenue > 0) {
        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–±—â—É—é –º–∞—Ä–∂—É, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        const newMarginPercent = (numericValue / revenue) * 100;
        updated['marginPercent'] = Math.round(newMarginPercent);
        
        // –ò –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É —Å –æ–¥–Ω–æ–π —Å –Ω–æ–≤–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        const newMarginPerUnit = (aov * newMarginPercent) / 100;
        updated['marginPerUnit'] = Math.round(newMarginPerUnit);
      }
      
      // 11. –†–∞—Å—á–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã "–î–æ—Ö–æ–¥—ã"
      const totalMargin = getNumericValue('totalMargin');
      const impressions = getNumericValue('impressions');
      
      if (changedMetricId === 'totalMargin' || changedMetricId === 'adCost' || changedMetricId === 'cpc' || changedMetricId === 'revenue' || changedMetricId === 'marginPercent' || changedMetricId === 'sales' || changedMetricId === 'clicks' || changedMetricId === 'cr1' || changedMetricId === 'cr2' || changedMetricId === 'leads' || changedMetricId === 'aov' || changedMetricId === 'impressions') {
        // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = –û–±—â–∞—è –º–∞—Ä–∂–∞ (–ü—Ä–∏–±—ã–ª—å) - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        const newNetProfit = totalMargin - adCost;
        updated['netProfit'] = Math.round(newNetProfit);
        
        // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π = –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å √∑ –°–¥–µ–ª–æ–∫
        if (sales > 0) {
          const newNetProfitPerUnit = newNetProfit / sales;
          updated['netProfitPerUnit'] = Math.round(newNetProfitPerUnit);
        }
        
        // ROMI % = (–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å √∑ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É) √ó 100%
        if (adCost > 0) {
          const newRomi = (newNetProfit / adCost) * 100;
          updated['romi'] = Math.round(newRomi);
        }
        
        // ROAS = –í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥ √∑ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        if (adCost > 0) {
          const newRoas = revenue / adCost;
          updated['roas'] = newRoas.toFixed(1);
        }
      }
      
      // 12. –†–∞—Å—á–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã "–§–æ—Ä–º—É–ª—ã"
      if (changedMetricId === 'adCost' || changedMetricId === 'cpc' || changedMetricId === 'revenue' || changedMetricId === 'impressions' || changedMetricId === 'clicks' || changedMetricId === 'cr1' || changedMetricId === 'cr2' || changedMetricId === 'leads' || changedMetricId === 'sales' || changedMetricId === 'aov' || changedMetricId === 'marginPercent' || changedMetricId === 'totalMargin') {
        // –î–†–† % = (–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É √∑ –í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥) √ó 100%
        if (revenue > 0) {
          const newDrr = (adCost / revenue) * 100;
          updated['drr'] = Math.round(newDrr);
        }
        
        // CPM = (–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É √∑ –ü–æ–∫–∞–∑—ã) √ó 1000
        if (impressions > 0) {
          const newCpm = (adCost / impressions) * 1000;
          updated['cpm'] = Math.round(newCpm);
        }
        
        // ICCR % = (–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É √∑ –û–±—â–∞—è –º–∞—Ä–∂–∞ (–ü—Ä–∏–±—ã–ª—å)) √ó 100%
        if (totalMargin > 0) {
          const newIccr = (adCost / totalMargin) * 100;
          updated['iccr'] = Math.round(newIccr);
        }
      }
      
      return updated;
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
  const getSliderValue = (metricId: string, metric: Metric): number => {
    const currentValue = typeof metrics[metricId] === 'string' ? parseFloat(metrics[metricId] as string) || 0 : metrics[metricId] as number;
    
    if (metric.sliderRange) {
      // –î–ª—è –ø–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Å–ª–∞–π–¥–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
      const scaledRange = getScaledRange(metric);
      if (scaledRange) {
        const { min, max } = scaledRange;
        const percentage = (currentValue - min) / (max - min);
        return Math.min(100, Math.max(0, percentage * 100));
      }
    } else if (metric.isPercentage) {
      // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      return Math.min(100, Math.max(0, currentValue));
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: –æ–±—Ä–∞—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      const baseValue = metric.defaultValue;
      return Math.min(100, Math.max(0, (currentValue / baseValue) * 50));
    }
    
    return 0;
  };

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
  const exportToExcel = (format: 'vertical' | 'horizontal' = 'vertical') => {
    try {
      let exportData;
      
      if (format === 'vertical') {
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∫ —Å–µ–π—á–∞—Å): 3 –∫–æ–ª–æ–Ω–∫–∏
        exportData = metricsConfig.flatMap((group: Group) => 
          group.metrics.map((metric: Metric) => {
            const dayValue = metrics[metric.id];
            let periodValue;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            if (metric.isPercentage) {
              // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ - —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              periodValue = dayValue;
            } else if (metric.hasPeriod) {
              // –î–ª—è –ø–æ–ª–µ–π —Å –ø–µ—Ä–∏–æ–¥–æ–º - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –ø–µ—Ä–∏–æ–¥
              const numericDay = typeof dayValue === 'string' ? parseFloat(dayValue) || 0 : dayValue;
              periodValue = Math.round(numericDay * period);
            } else {
              // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π - —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              periodValue = dayValue;
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const formatValue = (value: number | string, isPercentage: boolean) => {
              if (typeof value === 'string') {
                return isPercentage ? `${value} %` : value;
              }
              return isPercentage ? `${value} %` : value.toString();
            };

            return {
              '–ü–∞—Ä–∞–º–µ—Ç—Ä': metric.name,
              '–ó–∞ 1 –¥–µ–Ω—å': formatValue(dayValue, metric.isPercentage),
              [`–ó–∞ ${period} ${period === 1 ? '–¥–µ–Ω—å' : period < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}`]: formatValue(periodValue, metric.isPercentage)
            };
          })
        );
      } else {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        const dayRow: Record<string, any> = { '–ü–µ—Ä–∏–æ–¥': '–ó–∞ 1 –¥–µ–Ω—å' };
        const periodRow: Record<string, any> = { '–ü–µ—Ä–∏–æ–¥': `–ó–∞ ${period} ${period === 1 ? '–¥–µ–Ω—å' : period < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}` };
        
        metricsConfig.forEach((group: Group) => {
          group.metrics.forEach((metric: Metric) => {
            const dayValue = metrics[metric.id];
            let periodValue;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            if (metric.isPercentage) {
              periodValue = dayValue;
            } else if (metric.hasPeriod) {
              const numericDay = typeof dayValue === 'string' ? parseFloat(dayValue) || 0 : dayValue;
              periodValue = Math.round(numericDay * period);
            } else {
              periodValue = dayValue;
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const formatValue = (value: number | string, isPercentage: boolean) => {
              if (typeof value === 'string') {
                return isPercentage ? `${value} %` : value;
              }
              return isPercentage ? `${value} %` : value.toString();
            };
            
            dayRow[metric.name] = formatValue(dayValue, metric.isPercentage);
            periodRow[metric.name] = formatValue(periodValue, metric.isPercentage);
          });
        });
        
        exportData = [dayRow, periodRow];
      }

      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel —Å –ø–æ–º–æ—â—å—é ExcelJS –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      if (format === 'vertical') {
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const headers = ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–∞ 1 –¥–µ–Ω—å', `–ó–∞ ${period} ${period === 1 ? '–¥–µ–Ω—å' : period < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}`];
        worksheet.addRow(headers);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        exportData.slice(1).forEach(row => {
          const rowData = [
            row['–ü–∞—Ä–∞–º–µ—Ç—Ä'],
            row['–ó–∞ 1 –¥–µ–Ω—å'],
            row[Object.keys(row).find(key => key.startsWith('–ó–∞ ') && key !== '–ó–∞ 1 –¥–µ–Ω—å') || '']
          ];
          worksheet.addRow(rowData);
        });
      } else {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const headers = Object.keys(exportData[0]);
        worksheet.addRow(headers);
        
        exportData.forEach(row => {
          const rowData = headers.map(header => row[header]);
          worksheet.addRow(rowData);
        });
      }
      
      // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
      const headerRow = worksheet.getRow(1);
      headerRow.eachCell((cell) => {
        cell.font = { bold: true, size: 10 }; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–æ 10
        cell.alignment = { 
          horizontal: 'center', 
          vertical: 'middle',
          wrapText: true // –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        };
        cell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFE6E6E6' } // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });
      
      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      let maxLines = 1;
      headerRow.eachCell((cell, colNumber) => {
        if (cell.value) {
          const text = cell.value.toString();
          const columnWidth = colNumber <= worksheet.columns.length ? 
            (worksheet.getColumn(colNumber).width || 15) : 15;
          
          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
          // –°—Ä–µ–¥–Ω—è—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞ ~1.2, —É—á–∏—Ç—ã–≤–∞–µ–º padding
          const charsPerLine = Math.floor((columnWidth - 2) / 1.2);
          const lines = Math.ceil(text.length / charsPerLine);
          maxLines = Math.max(maxLines, lines);
        }
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å –º–∏–Ω–∏–º—É–º–æ–º 25 –∏ –º–∞–∫—Å–∏–º—É–º–æ–º 60
      let adaptiveHeight = Math.max(25, Math.min(60, maxLines * 15 + 10));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 10 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      if (format === 'horizontal') {
        adaptiveHeight += 10;
      }
      
      headerRow.height = adaptiveHeight;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏)
      for (let rowIndex = 2; rowIndex <= worksheet.rowCount; rowIndex++) {
        const dataRow = worksheet.getRow(rowIndex);
        dataRow.eachCell((cell, colNumber) => {
          if (cell.value) {
            cell.border = {
              top: { style: 'thin' },
              left: { style: 'thin' },
              bottom: { style: 'thin' },
              right: { style: 'thin' }
            };
            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–æ —Ü–µ–Ω—Ç—Ä—É
            if (colNumber === 1) {
              cell.alignment = { 
                horizontal: 'left', 
                vertical: 'middle' 
              };
            } else {
              cell.alignment = { 
                horizontal: 'center', 
                vertical: 'middle' 
              };
            }
          }
        });
      }
      
      // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏)
      worksheet.columns.forEach((column, index) => {
        let maxLength = 8; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π)
        for (let rowIndex = 2; rowIndex <= worksheet.rowCount; rowIndex++) {
          const cell = worksheet.getCell(rowIndex, index + 1);
          if (cell.value) {
            const cellText = cell.value.toString();
            maxLength = Math.max(maxLength, cellText.length);
          }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        if (format === 'vertical') {
          // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
          if (index === 0) {
            column.width = Math.min(Math.max(maxLength + 2, 15), 35); // –ü–∞—Ä–∞–º–µ—Ç—Ä: –º–∏–Ω 15, –º–∞–∫—Å 35
          } else {
            column.width = Math.min(Math.max(maxLength + 2, 10), 20); // –î–∞–Ω–Ω—ã–µ: –º–∏–Ω 10, –º–∞–∫—Å 20
          }
        } else {
          // –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
          if (index === 0) {
            column.width = Math.min(Math.max(maxLength + 2, 12), 25); // –ü–µ—Ä–∏–æ–¥: –º–∏–Ω 12, –º–∞–∫—Å 25
          } else {
            column.width = Math.min(Math.max(maxLength + 2, 8), 18); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–∏–Ω 8, –º–∞–∫—Å 18
          }
        }
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const today = new Date();
      const dateStr = today.toISOString().split('T')[0];
      const timeStr = today.toTimeString().split(' ')[0].replace(/:/g, '-');
      const fileName = `analytics_result_wekey_tools_${dateStr}_${timeStr}.xlsx`;
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      workbook.xlsx.writeBuffer().then((buffer) => {
        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        link.click();
        window.URL.revokeObjectURL(url);
      });
      
      console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', fileName);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  return (
    <div className="tool-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="tool-header-island">
        <Link to="/" className="back-button">
          <img src="/icons/arrow_left.svg" alt="" />
          –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </Link>
        
        <h1 className="tool-title">–°–∫–≤–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
        
        <div className="tool-header-buttons">
          <button className="tool-header-btn counter-btn" title="–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤">
            <img src="/icons/rocket.svg" alt="" />
            <span className="counter">0</span>
          </button>
          <button className="tool-header-btn icon-only" title="–ü–æ–¥—Å–∫–∞–∑–∫–∏">
            <img src="/icons/lamp.svg" alt="" />
          </button>
          <button className="tool-header-btn icon-only" title="–°–∫—Ä–∏–Ω—à–æ—Ç">
            <img src="/icons/camera.svg" alt="" />
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <main className="main-workspace">
        <div className="analytics-container">
          {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
          <div className="table-header">
            <div className="column-header param-header">
              <div className="param-header-content">
                <span>–ü–∞—Ä–∞–º–µ—Ç—Ä</span>
                
                {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å—é */}
                <div className="scale-controls">
                  <button 
                    className="scale-button"
                    onClick={decreaseScale}
                    disabled={scaleFactor <= 1}
                    title="–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–± —Å–ª–∞–π–¥–µ—Ä–æ–≤"
                  >
                    ‚Äì
                  </button>
                  <span className="scale-value">√ó{scaleFactor}</span>
                  <button 
                    className="scale-button"
                    onClick={increaseScale}
                    disabled={scaleFactor >= 20}
                    title="–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–± —Å–ª–∞–π–¥–µ—Ä–æ–≤"
                  >
                    +
                  </button>
                </div>
                
                <button 
                  className="header-export-button"
                  onClick={() => setShowExportModal(true)}
                  title="–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
                >
                  <img src="/icons/download.svg" alt="Download" width="11" height="11" />
                  –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                </button>
                
                <button 
                  className="header-ai-button"
                  onClick={() => setShowAIModal(true)}
                  title="–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò"
                >
                  <img src="/icons/ai.svg" alt="AI" width="16" height="16" />
                  –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
                </button>
              </div>
            </div>
            <div className="column-header values-header">
              <div className="dual-header">
                <span className="day-header">–î–µ–Ω—å</span>
                <div className="period-input-container">
                  <input
                    type="number"
                    value={period}
                    onChange={(e) => setPeriod(Number(e.target.value) || 1)}
                    className="period-input"
                    min="1"
                    max="365"
                  />
                  <span className="period-label">–î–Ω–µ–π</span>
                </div>
              </div>
            </div>
          </div>

          {/* –ì—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
          {metricsConfig.map((group) => (
            <div 
              key={group.title} 
              className="metrics-group"
              style={{ '--group-color': group.color } as React.CSSProperties}
            >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–µ–≤–∞ */}
              <div className="group-title-vertical" style={{ color: group.color }}>
                <span className="group-text">{group.title}</span>
              </div>

              {/* –ú–µ—Ç—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã */}
              <div className="group-metrics">
                {group.metrics.map((metric) => (
                  <div key={metric.id} className="metric-row">
                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ */}
                    <div className="metric-name">
                      <button 
                        className="help-button" 
                        title={metric.tooltip}
                        style={{ backgroundColor: group.color }}
                      >
                        ?
                      </button>
                      <span>{metric.name}</span>
                    </div>

                    {/* –°–ª–∞–π–¥–µ—Ä */}
                    <div className="metric-slider">
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={getSliderValue(metric.id, metric)}
                        onChange={(e) => !isSliderDisabled(metric.id) && handleSliderChange(metric.id, parseInt(e.target.value), metric)}
                        className={`slider ${isSliderDisabled(metric.id) ? 'slider-disabled' : ''}`}
                        style={{
                          '--thumb-color': group.color
                        } as React.CSSProperties}
                      />
                    </div>

                    {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
                    <div className="metric-values">
                      {/* –ü–µ—Ä–≤–æ–µ –ø–æ–ª–µ - —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –±–µ–∑ */}
                      {metric.isPercentage && !metric.hasPeriod ? (
                        // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –ø–æ–ª–µ –±–µ–∑ –ø–µ—Ä–∏–æ–¥–∞ - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                        <div className="percentage-input-container">
                          <input
                            type="number"
                            value={metrics[metric.id]}
                            onFocus={() => handleInputFocus(metric.id)}
                            onBlur={(e) => handleInputBlur(metric.id, true, e.target.value, false)}
                            onChange={(e) => handleInputChange(metric.id, e.target.value, true, false)}
                            onKeyDown={handleKeyDown}
                            className={`value-input percentage-field ${isReadonlyField(metric.id) ? 'readonly' : ''}`}
                            placeholder="0.0"
                            step="0.1"
                            readOnly={isReadonlyField(metric.id)}
                          />
                          <span className="percentage-symbol">%</span>
                        </div>
                      ) : (
                        // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
                        <input
                          type="number"
                          value={metrics[metric.id]}
                          onFocus={() => handleInputFocus(metric.id)}
                          onBlur={(e) => handleInputBlur(metric.id, metric.isPercentage, e.target.value, metric.isDecimal)}
                          onChange={(e) => handleInputChange(metric.id, e.target.value, metric.isPercentage, metric.isDecimal)}
                          onKeyDown={handleKeyDown}
                          className={`value-input ${!metric.isPercentage && !metric.hasPeriod ? 'single-field' : ''} ${isReadonlyField(metric.id) ? 'readonly' : ''}`}
                          placeholder={metric.isPercentage || metric.isDecimal ? "0.0" : "0"}
                          step={metric.isPercentage || metric.isDecimal ? "0.1" : "1"}
                          readOnly={isReadonlyField(metric.id)}
                        />
                      )}
                      
                      {/* –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ hasPeriod = true */}
                      {metric.hasPeriod && (
                        <input
                          type="number"
                          value={metric.isPercentage ? 
                            (typeof metrics[metric.id] === 'string' ? 
                              parseFloat(metrics[metric.id] as string) || 0 : 
                              parseFloat((metrics[metric.id] as number).toFixed(1))
                            ) : 
                            Math.round(typeof metrics[metric.id] === 'string' ? 
                              (parseFloat(metrics[metric.id] as string) || 0) * period : 
                              (metrics[metric.id] as number) * period
                            )
                          }
                          readOnly
                          className="value-input readonly"
                          placeholder="0"
                        />
                      )}
                      
                      {/* –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–ª–µ–π —Å –ø–µ—Ä–∏–æ–¥–æ–º */}
                      {metric.isPercentage && metric.hasPeriod && <span className="percentage-symbol">%</span>}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </main>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ */}
      {showAIModal && (
        <div 
          className={`modal-overlay ${isAIModalClosing ? 'closing' : ''}`}
          onClick={closeAIModal}
        >
          <div 
            className={`ai-modal-content ${isAIModalClosing ? 'closing' : ''}`}
            onClick={(e) => e.stopPropagation()}
          >
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Ñ–æ—Ä–º–∞ */}
            <div className="ai-modal-left">
              <h3>–ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò</h3>
              
              {/* –¢—É–º–±–ª–µ—Ä —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ */}
              <div className="business-type-toggle">
                <label className="toggle-label">–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:</label>
                <div className="toggle-buttons">
                  <button 
                    className={`toggle-btn ${businessType === 'ecommerce' ? 'active' : ''}`}
                    onClick={() => setBusinessType('ecommerce')}
                  >
                    –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω
                  </button>
                  <button 
                    className={`toggle-btn ${businessType === 'landing' ? 'active' : ''}`}
                    onClick={() => setBusinessType('landing')}
                  >
                    –õ–µ–Ω–¥–∏–Ω–≥
                  </button>
                </div>
              </div>
              
              {/* –¢—É–º–±–ª–µ—Ä –≤–∞–ª—é—Ç—ã */}
              <div className="business-type-toggle">
                <label className="toggle-label">–í–∞–ª—é—Ç–∞:</label>
                <div className="toggle-buttons currency-toggle">
                  <button 
                    className={`toggle-btn ${currency === 'uah' ? 'active' : ''}`}
                    onClick={() => setCurrency('uah')}
                  >
                    –ì—Ä–∏–≤–Ω—ã
                  </button>
                  <button 
                    className={`toggle-btn ${currency === 'usd' ? 'active' : ''}`}
                    onClick={() => setCurrency('usd')}
                  >
                    –î–æ–ª–ª–∞—Ä—ã
                  </button>
                  {/* –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–†—É–±–ª–∏"
                  <button 
                    className={`toggle-btn ${currency === 'rub' ? 'active' : ''}`}
                    onClick={() => setCurrency('rub')}
                  >
                    –†—É–±–ª–∏
                  </button>
                  */}
                </div>
              </div>
              
              {/* –ü–æ–ª–µ –¥–ª—è –Ω–∏—à–∏ */}
              <div className="niche-input">
                <label className="input-label">–ù–∏—à–∞ –±–∏–∑–Ω–µ—Å–∞:</label>
                <input
                  type="text"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –∫–æ—Å–º–µ—Ç–∏–∫–∞, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å..."
                  className="niche-field"
                  value={niche}
                  onChange={(e) => setNiche(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !isAnalyzing && niche.trim()) {
                      handleAIAnalysis();
                    }
                  }}
                  disabled={isAnalyzing}
                />
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
              <button 
                className="ai-analyze-button"
                onClick={handleAIAnalysis}
                disabled={isAnalyzing || !niche.trim()}
              >
                <img src="/icons/ai.svg" alt="AI" width="16" height="16" />
                {isAnalyzing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò'}
              </button>
            </div>
            
            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
            <div className="ai-modal-right">
              <div className="ai-result-header">
                <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h4>
                {aiResponse && !isAnalyzing && (
                  <button 
                    className="copy-response-btn"
                    onClick={copyAIResponse}
                    title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
                  >
                    <img src="/icons/button_copy.svg" alt="Copy" width="14" height="14" />
                    –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                )}
              </div>
              <div className="ai-response">
                {isAnalyzing && (
                  <div className="ai-loading">
                    <div className="loading-spinner"></div>
                    <div className="loading-text">
                      <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.</p>
                      <p>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã.</p>
                      <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–æ.</p>
                    </div>
                  </div>
                )}
                
                {aiError && (
                  <div className="ai-error">
                    <p>‚ùå {aiError}</p>
                  </div>
                )}
                
                {aiResponse && !isAnalyzing && (
                  <div className="ai-result">
                    <div className="ai-text">
                      {aiResponse.split('\n').map((line, index) => (
                        <p key={index}>{line}</p>
                      ))}
                    </div>
                  </div>
                )}
                
                {!isAnalyzing && !aiResponse && !aiError && (
                  <div className="ai-placeholder">
                    <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∞—à–∏–º –º–µ—Ç—Ä–∏–∫–∞–º.</p>
                  </div>
                )}
              </div>
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            <button 
              className="close-modal-btn"
              onClick={closeAIModal}
              title="–ó–∞–∫—Ä—ã—Ç—å"
            >
              √ó
            </button>
          </div>
        </div>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      {showExportModal && (
        <div 
          className={`modal-overlay ${isModalClosing ? 'closing' : ''}`}
          onClick={closeModal}
        >
          <div 
            className={`modal-content ${isModalClosing ? 'closing' : ''}`}
            onClick={(e) => e.stopPropagation()}
          >
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
            <div className="export-options">
              <div 
                className={`radio-option ${exportFormat === 'vertical' ? 'active' : ''}`}
                onClick={() => setExportFormat('vertical')}
              >
                <ColumnIcon className="option-icon" />
                <div className="option-details">
                  <strong>–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>
                </div>
              </div>
              
              <div 
                className={`radio-option ${exportFormat === 'horizontal' ? 'active' : ''}`}
                onClick={() => setExportFormat('horizontal')}
              >
                <StringIcon className="option-icon" />
                <div className="option-details">
                  <strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</strong>
                </div>
              </div>
            </div>
            
            <div className="modal-buttons">
              <button
                onClick={() => {
                  exportToExcel(exportFormat);
                  closeModal();
                }}
                className="analytics-button export-button"
              >
                –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
              </button>
              <button
                onClick={closeModal}
                className="analytics-button clear-button"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AnalyticsTool;