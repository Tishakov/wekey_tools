import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { statsService } from '../utils/statsService';

const SynonymGeneratorTool: React.FC = () => {
  const navigate = useNavigate();
  const [inputText, setInputText] = useState('');
  const [result, setResult] = useState('');
  const [copied, setCopied] = useState(false);
  const [launchCount, setLaunchCount] = useState(0);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    setLaunchCount(statsService.getLaunchCount('synonym-generator'));
  }, []);

  // –°–ª–æ–≤–∞—Ä–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
  const synonymDictionaries = {
    russian: {
      '–º–∞—à–∏–Ω–∞': ['–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ç–∞—á–∫–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ', '—Å—Ä–µ–¥—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è'],
      '–¥–æ–º': ['–∂–∏–ª–∏—â–µ', '–∑–¥–∞–Ω–∏–µ', '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–æ–±–∏—Ç–µ–ª—å', '–∫—Ä–æ–≤'],
      '—Ä–∞–±–æ—Ç–∞': ['—Ç—Ä—É–¥', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–∑–∞–Ω—è—Ç–∏–µ', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '—Å–ª—É–∂–±–∞'],
      '—á–µ–ª–æ–≤–µ–∫': ['–ª–∏—á–Ω–æ—Å—Ç—å', '–∏–Ω–¥–∏–≤–∏–¥', '–æ—Å–æ–±–∞', '—Å—É–±—ä–µ–∫—Ç', '–ø–µ—Ä—Å–æ–Ω–∞'],
      '–∫—Ä–∞—Å–∏–≤—ã–π': ['–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π', '–∏–∑—è—â–Ω—ã–π', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–π'],
      '–±–æ–ª—å—à–æ–π': ['–æ–≥—Ä–æ–º–Ω—ã–π', '–∫—Ä—É–ø–Ω—ã–π', '–º–∞—Å—à—Ç–∞–±–Ω—ã–π', '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π', '–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π'],
      '–º–∞–ª–µ–Ω—å–∫–∏–π': ['–Ω–µ–±–æ–ª—å—à–æ–π', '–∫—Ä–æ—à–µ—á–Ω—ã–π', '–º–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–π', '–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π', '–º–∞–ª—ã–π'],
      '—Ö–æ—Ä–æ—à–∏–π': ['–æ—Ç–ª–∏—á–Ω—ã–π', '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π'],
      '–ø–ª–æ—Ö–æ–π': ['—É–∂–∞—Å–Ω—ã–π', '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π', '—Å–∫–≤–µ—Ä–Ω—ã–π', '–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π'],
      '–±—ã—Å—Ç—Ä—ã–π': ['—Å–∫–æ—Ä—ã–π', '—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π', '–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π', '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π', '—Ä–µ–∑–≤—ã–π'],
      '—É–º–Ω—ã–π': ['–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π', '—Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π', '—Å–º—ã—à–ª–µ–Ω—ã–π', '–º—É–¥—Ä—ã–π', '—Ä–∞–∑—É–º–Ω—ã–π'],
      '–≥–ª—É–ø—ã–π': ['–Ω–µ—Ä–∞–∑—É–º–Ω—ã–π', '–±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π', '–Ω–µ–¥–∞–ª–µ–∫–∏–π', '—Ç—É–ø–æ–π', '–Ω–µ—Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π'],
      '—Å—Ç–∞—Ä—ã–π': ['–¥—Ä–µ–≤–Ω–∏–π', '–ø–æ–∂–∏–ª–æ–π', '–¥–∞–≤–Ω–∏–π', '–ø—Ä–µ–∂–Ω–∏–π', '–≤–µ—Ç—Ö–∏–π'],
      '–Ω–æ–≤—ã–π': ['—Å–≤–µ–∂–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–Ω–µ–¥–∞–≤–Ω–∏–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π'],
      '–±–æ–≥–∞—Ç—ã–π': ['—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π', '–∑–∞–∂–∏—Ç–æ—á–Ω—ã–π', '–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω—ã–π', '—Ä–æ—Å–∫–æ—à–Ω—ã–π', '–¥–µ–Ω–µ–∂–Ω—ã–π'],
      '–±–µ–¥–Ω—ã–π': ['–Ω–µ–∏–º—É—â–∏–π', '–Ω–∏—â–∏–π', '–º–∞–ª–æ–∏–º—É—â–∏–π', '–Ω—É–∂–¥–∞—é—â–∏–π—Å—è', '–æ–±–µ–∑–¥–æ–ª–µ–Ω–Ω—ã–π']
    },
    ukrainian: {
      '–º–∞—à–∏–Ω–∞': ['–∞–≤—Ç–æ–º–æ–±—ñ–ª—å', '–∞–≤—Ç–æ', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∑–∞—Å—ñ–± –ø–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è'],
      '–¥—ñ–º': ['–∂–∏—Ç–ª–æ', '–±—É–¥–∏–Ω–æ–∫', '–æ—Å–µ–ª—è', '–±—É–¥—ñ–≤–ª—è'],
      '—Ä–æ–±–æ—Ç–∞': ['–ø—Ä–∞—Ü—è', '–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å', '–∑–∞–Ω—è—Ç—Ç—è', '–ø—Ä–æ—Ñ–µ—Å—ñ—è'],
      '–ª—é–¥–∏–Ω–∞': ['–æ—Å–æ–±–∞', '—ñ–Ω–¥–∏–≤—ñ–¥', '–ø–µ—Ä—Å–æ–Ω–∞', '—Å—É–±\'—î–∫—Ç'],
      '–∫—Ä–∞—Å–∏–≤–∏–π': ['–ø—Ä–µ–∫—Ä–∞—Å–Ω–∏–π', '–≥–∞—Ä–Ω–∏–π', '–ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π', '—á—É–¥–æ–≤–∏–π'],
      '–≤–µ–ª–∏–∫–∏–π': ['–≤–µ–ª–∏—á–µ–∑–Ω–∏–π', '–º–∞—Å—à—Ç–∞–±–Ω–∏–π', '–∑–Ω–∞—á–Ω–∏–π', '–≥—ñ–≥–∞–Ω—Ç—Å—å–∫–∏–π'],
      '–º–∞–ª–µ–Ω—å–∫–∏–π': ['–Ω–µ–≤–µ–ª–∏–∫–∏–π', '–∫—Ä–∏—Ö—ñ—Ç–Ω–∏–π', '–º—ñ–Ω—ñ–∞—Ç—é—Ä–Ω–∏–π', '–º–∞–ª–∏–π'],
      '—Ö–æ—Ä–æ—à–∏–π': ['–≤—ñ–¥–º—ñ–Ω–Ω–∏–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–∏–π', '—á—É–¥–æ–≤–∏–π', '—è–∫—ñ—Å–Ω–∏–π'],
      '–ø–æ–≥–∞–Ω–∏–π': ['–∂–∞—Ö–ª–∏–≤–∏–π', '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π', '–Ω–µ–ø—Ä–∏—î–º–Ω–∏–π', '–æ–≥–∏–¥–Ω–∏–π'],
      '—à–≤–∏–¥–∫–∏–π': ['—Å–∫–æ—Ä–∏–π', '—Å—Ç—Ä—ñ–º–∫–∏–π', '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–π', '–ø—Ä—É–¥–∫–∏–π'],
      '—Ä–æ–∑—É–º–Ω–∏–π': ['—ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π', '–∫–º—ñ—Ç–ª–∏–≤–∏–π', '–º—É–¥—Ä–∏–π', '—Ç—è–º—É—â–∏–π'],
      '–¥—É—Ä–Ω–∏–π': ['–Ω–µ—Ä–æ–∑—É–º–Ω–∏–π', '–±–µ–∑—Ç—è–º–Ω–∏–π', '–Ω–µ–¥–∞–ª–µ–∫–∏–π', '—Ç—É–ø–∏–π'],
      '—Å—Ç–∞—Ä–∏–π': ['–¥–∞–≤–Ω—ñ–π', '–ª—ñ—Ç–Ω—ñ–π', '–¥—Ä–µ–≤–Ω—ñ–π', '–∫–æ–ª–∏—à–Ω—ñ–π'],
      '–Ω–æ–≤–∏–π': ['—Å–≤—ñ–∂–∏–π', '—Å—É—á–∞—Å–Ω–∏–π', '–Ω–µ–¥–∞–≤–Ω—ñ–π', '–æ—Å—Ç–∞–Ω–Ω—ñ–π'],
      '–±–∞–≥–∞—Ç–∏–π': ['–∑–∞–º–æ–∂–Ω–∏–π', '–∑–∞–±–µ–∑–ø–µ—á–µ–Ω–∏–π', '–≥—Ä–æ—à–æ–≤–∏—Ç–∏–π', '—Ä–æ–∑–∫—ñ—à–Ω–∏–π'],
      '–±—ñ–¥–Ω–∏–π': ['–Ω–µ–∑–∞–º–æ–∂–Ω–∏–π', '–º–∞–ª–æ–∑–∞–±–µ–∑–ø–µ—á–µ–Ω–∏–π', '–Ω—É–∂–¥–µ–Ω–Ω–∏–π', '—É–±–æ–≥–∏–π']
    },
    english: {
      'dog': ['hound', 'canine', 'pooch', 'pup', 'mutt'],
      'cat': ['feline', 'kitty', 'kitten', 'tabby', 'tomcat'],
      'house': ['home', 'dwelling', 'residence', 'abode', 'domicile'],
      'car': ['automobile', 'vehicle', 'auto', 'motor', 'ride'],
      'beautiful': ['gorgeous', 'stunning', 'attractive', 'lovely', 'magnificent'],
      'big': ['large', 'huge', 'enormous', 'massive', 'gigantic'],
      'small': ['tiny', 'little', 'miniature', 'compact', 'petite'],
      'good': ['excellent', 'great', 'wonderful', 'fantastic', 'superb'],
      'bad': ['terrible', 'awful', 'horrible', 'dreadful', 'atrocious'],
      'fast': ['quick', 'rapid', 'swift', 'speedy', 'hasty'],
      'smart': ['intelligent', 'clever', 'brilliant', 'wise', 'sharp'],
      'stupid': ['dumb', 'foolish', 'idiotic', 'senseless', 'mindless'],
      'old': ['ancient', 'elderly', 'aged', 'vintage', 'antique'],
      'new': ['fresh', 'modern', 'recent', 'latest', 'contemporary'],
      'rich': ['wealthy', 'affluent', 'prosperous', 'well-off', 'loaded'],
      'poor': ['impoverished', 'needy', 'broke', 'destitute', 'penniless'],
      'happy': ['joyful', 'cheerful', 'delighted', 'pleased', 'content'],
      'sad': ['unhappy', 'sorrowful', 'melancholy', 'depressed', 'gloomy']
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–ª–æ–≤–∞
  const detectLanguage = (word: string): 'russian' | 'ukrainian' | 'english' => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const cyrillic = /[–∞-—è—ë]/i.test(word);
    const latin = /[a-z]/i.test(word);
    
    if (cyrillic) {
      // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
      const ukrainianChars = /[—ñ—ó—î“ë]/i.test(word);
      return ukrainianChars ? 'ukrainian' : 'russian';
    } else if (latin) {
      return 'english';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return 'russian';
  };

  // –ü–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞
  const findSynonyms = (word: string): string[] => {
    const cleanWord = word.toLowerCase().trim();
    const language = detectLanguage(cleanWord);
    const dictionary = synonymDictionaries[language] as Record<string, string[]>;
    
    return dictionary[cleanWord] || [];
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  const generateSynonyms = () => {
    if (!inputText.trim()) {
      setResult('');
      return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ (–ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫)
    const words = inputText
      .split(/[\s\n]+/)
      .filter(word => word.trim().length > 0)
      .map(word => word.replace(/[.,!?;:]/g, '')); // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è

    const results: string[] = [];

    words.forEach(word => {
      const synonyms = findSynonyms(word);
      if (synonyms.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–Ω–æ–Ω–∏–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        results.push(...synonyms);
      } else {
        // –ï—Å–ª–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
        results.push(word);
      }
    });

    setResult(results.join('\n'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statsService.incrementLaunchCount('synonym-generator');
    setLaunchCount(prev => prev + 1);
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const handleCopy = async () => {
    if (result) {
      try {
        await navigator.clipboard.writeText(result);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', err);
      }
    }
  };

  // –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const handlePaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setInputText(text);
    } catch (err) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç:', err);
    }
  };

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
  const getLineCount = (text: string): number => {
    return text ? text.split('\n').length : 0;
  };

  return (
    <div className="synonym-generator-tool">
      <div className="tool-header-island">
        <button 
          className="back-button"
          onClick={() => navigate('/')}
        >
          <img src="/icons/arrow_left.svg" alt="‚Üê" />
          –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        </button>
        <h1 className="tool-title">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤</h1>
        <div className="tool-header-buttons">
          <button className="tool-header-btn counter-btn">
            <img src="/icons/rocket.svg" alt="üöÄ" />
            <span className="counter">{launchCount}</span>
          </button>
          <button className="tool-header-btn icon-only">
            <img src="/icons/lamp.svg" alt="üí°" />
          </button>
          <button className="tool-header-btn icon-only">
            <img src="/icons/camera.svg" alt="üì∑" />
          </button>
        </div>
      </div>

      <div className="main-workspace">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ */}
        <div className="input-section">
          <textarea
            className="input-textarea"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç..."
          />
          <div className="input-controls">
            <button 
              className="paste-button"
              onClick={handlePaste}
            >
              <img src="/icons/button_paste.svg" alt="üìã" />
              –í—Å—Ç–∞–≤–∏—Ç—å
            </button>
            <div className="char-counter">
              {getLineCount(inputText)} —Å—Ç—Ä.
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
        <div className="result-section">
          <textarea
            className="result-textarea"
            value={result}
            placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            readOnly
          />
          <div className="result-controls">
            <div className="result-counter">
              {getLineCount(result)} —Å—Ç—Ä.
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="control-buttons">
        <button 
          className="action-btn primary" 
          style={{ width: '445px' }} 
          onClick={generateSynonyms}
          disabled={!inputText.trim()}
        >
          –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        </button>
        
        <button 
          className="action-btn secondary icon-left" 
          style={{ width: '445px' }} 
          onClick={handleCopy}
          disabled={!result}
        >
          <img src="/icons/button_copy.svg" alt="" />
          {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
        </button>
      </div>
    </div>
  );
};

export default SynonymGeneratorTool;