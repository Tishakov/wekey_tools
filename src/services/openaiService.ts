import OpenAI from 'openai';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface AnalyticsData {
  businessType: 'ecommerce' | 'landing' | 'instagram';
  landingType: 'ecommerce' | 'landing' | 'instagram';
  businessModel: 'product' | 'service';
  trafficSource: 'google-search' | 'google-shopping' | 'meta' | 'tiktok' | 'email';
  niche: string;
  metrics: Record<string, number | string>;
  period: number;
  currency: 'uah' | 'usd' | 'rub';
}

interface AIAnalysisResponse {
  success: boolean;
  analysis?: string;
  error?: string;
}

interface SynonymResponse {
  success: boolean;
  synonyms?: string[];
  error?: string;
}

class OpenAIService {
  private client: OpenAI | null = null;
  private isInitialized = false;

  constructor() {
    console.log('üîß Initializing OpenAI service...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
      const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
      
      console.log('üîë API Key found:', apiKey ? 'Yes' : 'No');
      console.log('üîë API Key length:', apiKey ? apiKey.length : 0);
      
      if (!apiKey) {
        console.warn('‚ö†Ô∏è OpenAI API key not found in environment variables');
        return;
      }

      this.client = new OpenAI({
        apiKey: apiKey,
        dangerouslyAllowBrowser: true // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      });
      
      this.isInitialized = true;
      console.log('‚úÖ OpenAI service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize OpenAI client:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
   */
  public isReady(): boolean {
    return this.isInitialized && this.client !== null;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private createAnalysisPrompt(data: AnalyticsData): string {
    const { landingType, businessModel, trafficSource, niche, metrics, period, currency } = data;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω—ã
    const currencyInfo = {
      uah: { symbol: '‚Ç¥', name: '–≥—Ä–∏–≤–µ–Ω', country: '–£–∫—Ä–∞–∏–Ω—ã', market: '—É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞' },
      usd: { symbol: '$', name: '–¥–æ–ª–ª–∞—Ä–æ–≤', country: '–°–®–ê', market: '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞' },
      rub: { symbol: '‚ÇΩ', name: '—Ä—É–±–ª–µ–π', country: '–†–æ—Å—Å–∏–∏', market: '—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞' }
    };
    
    const currentCurrency = currencyInfo[currency];
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const landingTypeNames = {
      'ecommerce': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
      'landing': '–õ–µ–Ω–¥–∏–Ω–≥',
      'instagram': 'Instagram Direct'
    };
    
    const businessModelNames = {
      'product': '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞',
      'service': '–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥'
    };
    
    const trafficSourceNames = {
      'google-search': '–ü–æ–∏—Å–∫ Google ADS',
      'google-shopping': 'Shopping Google ADS',
      'meta': 'Meta ADS',
      'tiktok': 'Tik-Tok ADS',
      'email': 'Email —Ä–∞—Å—Å—ã–ª–∫–∞'
    };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const metricsText = Object.entries(metrics)
      .map(([key, value]) => {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–∏ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        const metricNames: Record<string, string> = {
          clicks: '–ö–ª–∏–∫–∏',
          impressions: '–ü–æ–∫–∞–∑—ã', 
          ctr: 'CTR (%)',
          cpc: `CPC (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞, ${currentCurrency.name})`,
          adCost: `–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É (${currentCurrency.name})`,
          cr1: 'CR1 - –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞ (%)',
          leads: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤',
          cpl: `CPL (—Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞, ${currentCurrency.name})`,
          cr2: 'CR2 - –∏–∑ –ª–∏–¥–∞ –≤ –ø—Ä–æ–¥–∞–∂—É (%)',
          sales: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂',
          cpo: `CPO (—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏, ${currentCurrency.name})`,
          aov: `AOV (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, ${currentCurrency.name})`,
          revenue: `–í–∞–ª–æ–≤–æ–π –¥–æ—Ö–æ–¥ (${currentCurrency.name})`,
          marginPercent: '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)',
          marginPerUnit: `–ú–∞—Ä–∂–∞ —Å –æ–¥–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ (${currentCurrency.name})`,
          totalMargin: `–û–±—â–∞—è –º–∞—Ä–∂–∞ (${currentCurrency.name})`,
          netProfit: `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (${currentCurrency.name})`,
          netProfitPerUnit: `–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π (${currentCurrency.name})`,
          romi: 'ROMI (%)',
          roas: 'ROAS (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)',
          drr: '–î–†–† (%)',
          iccr: 'ICCR (%)',
          cpm: `CPM (${currentCurrency.name})`
        };

        const metricName = metricNames[key] || key;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –º–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è
        const scalableMetrics = ['clicks', 'impressions', 'adCost', 'leads', 'sales', 'revenue', 'totalMargin', 'netProfit'];
        
        if (scalableMetrics.includes(key)) {
          const dailyValue = typeof value === 'string' ? parseFloat(value) || 0 : value;
          const periodValue = Math.round(dailyValue * period);
          return `${metricName}: ${dailyValue} (–∑–∞ –¥–µ–Ω—å) / ${periodValue} (–∑–∞ ${period} –¥–Ω–µ–π)`;
        } else {
          return `${metricName}: ${value}`;
        }
      })
      .join('\n');

    return `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–î–ê–ù–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò:
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ${landingTypeNames[landingType]}
–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: ${businessModelNames[businessModel]}
–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞: ${trafficSourceNames[trafficSource]}
–ù–∏—à–∞: ${niche}
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${period} ${period === 1 ? '–¥–µ–Ω—å' : period < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
–í–∞–ª—é—Ç–∞: ${currentCurrency.name} (${currentCurrency.symbol})
–†—ã–Ω–æ–∫ –∞–Ω–∞–ª–∏–∑–∞: ${currentCurrency.country}

–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:
${metricsText}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ ${currentCurrency.market}, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ "${landingTypeNames[landingType]}", —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ "${businessModelNames[businessModel]}" –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ "${trafficSourceNames[trafficSource]}"

1. –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
- –û—Ü–µ–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: CPC, CPL, CPO, ROMI, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
- –°—Ä–∞–≤–Ω–∏ —Å –Ω–æ—Ä–º–∞–º–∏ –¥–ª—è ${businessModelNames[businessModel]} —á–µ—Ä–µ–∑ ${landingTypeNames[landingType]} –≤ –Ω–∏—à–µ "${niche}" –Ω–∞ ${currentCurrency.market}
- –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ "${trafficSourceNames[trafficSource]}" –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ, –∞ –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –ø–ª–æ—Ö–∏–µ
- –û—Ü–µ–Ω–∏ –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10

2. –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—Ç—Ä–∞—Ç –∏ –¥–æ—Ö–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π ${trafficSourceNames[trafficSource]}
- –ù–∞–π–¥–∏ –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂ (—Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö, –∞ –Ω–µ –Ω–∞ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö")
- –û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–∞–ø —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–æ—Å—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
- –†–∞—Å—Å—á–∏—Ç–∞–π —Ä–µ–∞–ª—å–Ω—É—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞

3. –ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô
- –î–∞–π 3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –¥–ª—è ${trafficSourceNames[trafficSource]} –∏ ${landingTypeNames[landingType]}
- –£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–∞
- –†–∞—Å—Å—á–∏—Ç–∞–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥—ã ${currentCurrency.market}
4. –§–ò–ù–ê–ù–°–û–í–´–ô –ü–†–û–ì–ù–û–ó
- –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –†–∞—Å—Å—á–∏—Ç–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –≤ ${currentCurrency.name}: –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á —É–≤–µ–ª–∏—á–∏—Ç—Å—è –¥–æ—Ö–æ–¥, –ø—Ä–∏–±—ã–ª—å
- –£–∫–∞–∂–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: "–í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –Ω–∞ X —Ç—ã—Å—è—á ${currentCurrency.name}"
- –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1 –∏ 3 –º–µ—Å—è—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏

5. –ß–ï–ö–õ–ò–°–¢ –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –ú–ê–†–ö–ï–¢–û–õ–û–ì–ê
–í –∫–æ–Ω—Ü–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª "–ß–ï–ö–õ–ò–°–¢ –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –ú–ê–†–ö–ï–¢–û–õ–û–ì–ê":
- –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5-7 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –º–µ—Ç–æ–¥—ã: "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å X —Å Y –¥–æ Z –∑–∞ —Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π A, B, C"
- –§–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç—ã–µ –ø—É–Ω–∫—Ç—ã –ë–ï–ó –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏, —Ü–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã" - —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã
- –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "–ü–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é —Å 2% –¥–æ 4% —á–µ—Ä–µ–∑ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫"

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê: 
- –î–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º: "–í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ", "–î–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞", "–í–∞–º —Å—Ç–æ–∏—Ç"
- –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –≤ ${currentCurrency.name}, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∏–±—ã–ª–∏, –∑–∞—Ç—Ä–∞—Ç–∞—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ù–ï –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–µ–∫–ª–∏—Å—Ç–µ
- –û–±—ä–µ–º: 900-1300 —Å–ª–æ–≤
`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  public async getAnalysis(data: AnalyticsData): Promise<AIAnalysisResponse> {
    console.log('üöÄ Starting AI analysis with data:', data);
    
    if (!this.isReady()) {
      console.error('‚ùå OpenAI service not ready');
      return {
        success: false,
        error: 'OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.'
      };
    }

    try {
      const prompt = this.createAnalysisPrompt(data);
      console.log('üìù Generated prompt:', prompt);
      
      console.log('üîÑ Sending request to OpenAI...');
      const response = await this.client!.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
        stream: false
      });

      console.log('‚úÖ Received response from OpenAI:', response);
      const analysis = response.choices[0]?.message?.content;
      
      if (!analysis) {
        console.error('‚ùå No analysis content in response');
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò'
        };
      }

      console.log('üéâ Analysis successful, length:', analysis.length);
      return {
        success: true,
        analysis: analysis.trim()
      };

    } catch (error: any) {
      console.error('üí• OpenAI API error:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.code === 'insufficient_quota') {
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞ –≤ OpenAI.'
        };
      }
      
      if (error.code === 'invalid_api_key') {
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI.'
        };
      }

      if (error.code === 'rate_limit_exceeded') {
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
        };
      }

      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
   */
  public async generateSynonyms(inputText: string, language: string = 'russian'): Promise<SynonymResponse> {
    console.log('üî§ Starting synonym generation...');
    
    if (!this.isReady()) {
      console.error('‚ùå OpenAI service not initialized');
      return {
        success: false,
        error: '–°–µ—Ä–≤–∏—Å OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.'
      };
    }

    if (!inputText.trim()) {
      return {
        success: false,
        error: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤'
      };
    }

    try {
      console.log('üìù Input text for synonyms:', inputText.slice(0, 100) + '...');
      
      const prompt = this.createSynonymPrompt(inputText.trim(), language);
      console.log('ü§ñ ChatGPT Prompt:', prompt);
      
      const response = await this.client!.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      const content = response.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò');
      }

      console.log('‚úÖ Raw AI response:', content.slice(0, 200) + '...');
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      const synonyms = content
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0)
        .map(line => line.replace(/^[-‚Ä¢\d\.]\s*/, '')) // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
        .filter(synonym => synonym.length > 0);

      console.log('üìù Parsed synonyms:', synonyms.slice(0, 10), `(${synonyms.length} total)`);

      return {
        success: true,
        synonyms: synonyms
      };

    } catch (error: any) {
      console.error('üí• Error generating synonyms:', error);
      
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
   */
  private createSynonymPrompt(inputText: string, language: string = 'russian'): string {
    const languageNames = {
      'russian': '—Ä—É—Å—Å–∫–æ–º',
      'ukrainian': '—É–∫—Ä–∞–∏–Ω—Å–∫–æ–º', 
      'english': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
    };
    
    const targetLanguage = languageNames[language as keyof typeof languageNames] || '—Ä—É—Å—Å–∫–æ–º';
    
    return `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ –∏ —Å–µ–º–∞–Ω—Ç–∏–∫–µ —Å–ª–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ ${targetLanguage} —è–∑—ã–∫–µ.

–í–•–û–î–ù–û–ô –¢–ï–ö–°–¢: "${inputText}"

–ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ - –¥–∞–π 5-10 —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
2. –ï—Å–ª–∏ —ç—Ç–æ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –¥–∞–π 3-7 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –í–°–ï —Å–∏–Ω–æ–Ω–∏–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –°–¢–†–û–ì–û –Ω–∞ ${targetLanguage} —è–∑—ã–∫–µ
4. –°–∏–Ω–æ–Ω–∏–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏ –ø–æ —Å–º—ã—Å–ª—É –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏
5. –ò–∑–±–µ–≥–∞–π —Ä–µ–¥–∫–∏—Ö –∞—Ä—Ö–∞–∏–∑–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
6. –î–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏ –¥–µ–ª–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ö–∞–∂–¥—ã–π —Å–∏–Ω–æ–Ω–∏–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
- –ë–ï–ó –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
- –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç—ã
- –ù–ï –æ–±—ä—è—Å–Ω—è–π –∏ –ù–ï –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π

–¢–µ–ø–µ—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è: "${inputText}"
`.trim();
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  public async testConnection(): Promise<boolean> {
    if (!this.isReady()) {
      return false;
    }

    try {
      const response = await this.client!.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–†–∞–±–æ—Ç–∞–µ—Ç"'
          }
        ],
        max_tokens: 10
      });

      return response.choices[0]?.message?.content?.includes('–†–∞–±–æ—Ç–∞–µ—Ç') || false;
    } catch (error) {
      console.error('Connection test failed:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const openaiService = new OpenAIService();
export type { AnalyticsData, AIAnalysisResponse, SynonymResponse };