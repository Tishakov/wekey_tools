#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

const fs = require('fs');
const path = require('path');

// –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const toolNamesAudit = {
  translations: {}, // –ò–∑ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  pages: {},        // –ò–∑ h1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤  
  config: {},       // –ò–∑ toolsConfig.ts
  registry: {}      // –ò–∑ toolsRegistry.ts
};

// 1. –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
function readTranslations() {
  console.log('üìù –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã...');
  
  const translationFiles = [
    './frontend/src/i18n/locales/ru.json',
    './frontend/src/i18n/locales/en.json',
    './frontend/src/i18n/locales/uk.json'
  ];
  
  translationFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      const lang = path.basename(filePath, '.json');
      
      if (content.tools && content.tools.names) {
        toolNamesAudit.translations[lang] = content.tools.names;
      }
    }
  });
}

// 2. –ß–∏—Ç–∞–µ–º h1 –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function readPageTitles() {
  console.log('üìÑ –ß–∏—Ç–∞–µ–º h1 –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü...');
  
  const pagesDir = './frontend/src/pages/';
  if (!fs.existsSync(pagesDir)) return;
  
  const files = fs.readdirSync(pagesDir).filter(f => f.endsWith('Tool.tsx'));
  
  files.forEach(file => {
    const filePath = path.join(pagesDir, file);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º h1 —Å –∫–ª–∞—Å—Å–æ–º tool-title
    const h1Match = content.match(/<h1[^>]*tool-title[^>]*>([^<]+)</);
    if (h1Match) {
      const toolName = file.replace('Tool.tsx', '').toLowerCase();
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CamelCase –≤ kebab-case
      const toolId = toolName.replace(/([A-Z])/g, '-$1').toLowerCase().replace(/^-/, '');
      
      toolNamesAudit.pages[toolId] = h1Match[1].trim();
    }
  });
}

// 3. –ß–∏—Ç–∞–µ–º toolsConfig.ts
function readToolsConfig() {
  console.log('‚öôÔ∏è –ß–∏—Ç–∞–µ–º toolsConfig.ts...');
  
  const configPath = './frontend/src/utils/toolsConfig.ts';
  if (!fs.existsSync(configPath)) return;
  
  const content = fs.readFileSync(configPath, 'utf8');
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id –∏ title
  const toolMatches = content.match(/{\s*id:\s*'([^']+)',\s*title:\s*'([^']+)'/g);
  if (toolMatches) {
    toolMatches.forEach(match => {
      const [, id, title] = match.match(/id:\s*'([^']+)',\s*title:\s*'([^']+)'/);
      toolNamesAudit.config[id] = title;
    });
  }
}

// 4. –ß–∏—Ç–∞–µ–º toolsRegistry.ts
function readToolsRegistry() {
  console.log('üìã –ß–∏—Ç–∞–µ–º toolsRegistry.ts...');
  
  const registryPath = './frontend/src/utils/toolsRegistry.ts';
  if (!fs.existsSync(registryPath)) return;
  
  const content = fs.readFileSync(registryPath, 'utf8');
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id –∏ name
  const toolMatches = content.match(/'([^']+)':\s*{\s*id:\s*'[^']+',\s*name:\s*'([^']+)'/g);
  if (toolMatches) {
    toolMatches.forEach(match => {
      const [, id, name] = match.match(/'([^']+)':\s*{\s*id:\s*'[^']+',\s*name:\s*'([^']+)'/);
      toolNamesAudit.registry[id] = name;
    });
  }
}

// 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
function analyzeDiscrepancies() {
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:\n');
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ toolId
  const allToolIds = new Set();
  Object.keys(toolNamesAudit.translations.ru || {}).forEach(id => allToolIds.add(id));
  Object.keys(toolNamesAudit.pages).forEach(id => allToolIds.add(id));
  Object.keys(toolNamesAudit.config).forEach(id => allToolIds.add(id));
  Object.keys(toolNamesAudit.registry).forEach(id => allToolIds.add(id));
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  for (const toolId of Array.from(allToolIds).sort()) {
    const ru = toolNamesAudit.translations.ru?.[toolId] || '‚ùå –ù–ï–¢';
    const page = toolNamesAudit.pages[toolId] || '‚ùå –ù–ï–¢';
    const config = toolNamesAudit.config[toolId] || '‚ùå –ù–ï–¢';
    const registry = toolNamesAudit.registry[toolId] || '‚ùå –ù–ï–¢';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const values = [ru, page, config, registry].filter(v => v !== '‚ùå –ù–ï–¢');
    const isSync = values.length > 1 && values.every(v => v === values[0]);
    
    const status = isSync ? '‚úÖ' : '‚ùå';
    
    console.log(`${status} ${toolId}`);
    console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞:  ${page}`);
    console.log(`   üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:   ${ru}`);
    console.log(`   ‚öôÔ∏è Config:    ${config}`);
    console.log(`   üìã Registry:  ${registry}`);
    console.log('');
  }
}

// 6. –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
function generateRecommendations() {
  console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  
  console.log('1. üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å h1 –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã');
  console.log('2. üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å h1');
  console.log('3. ‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å toolsConfig.ts –∏ toolsRegistry.ts');
  console.log('4. üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getToolName() –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  console.log('5. ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ê–£–î–ò–¢ –ù–ê–ó–í–ê–ù–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í\n');
  
  readTranslations();
  readPageTitles();
  readToolsConfig();
  readToolsRegistry();
  
  analyzeDiscrepancies();
  generateRecommendations();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  fs.writeFileSync('./tool_names_audit.json', JSON.stringify(toolNamesAudit, null, 2));
  console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ tool_names_audit.json');
}

if (require.main === module) {
  main();
}

module.exports = { toolNamesAudit };