const fs = require('fs');
const path = require('path');

const FRONTEND_PATH = path.resolve(__dirname, 'frontend');
const PAGES_PATH = path.join(FRONTEND_PATH, 'src', 'pages');

console.log('üîÑ Final cleanup - updating remaining tools with different function names...');

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –æ—Å–æ–±—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
const specialTools = [
    { file: 'TextGeneratorTool.tsx', function: 'handleGenerateText' },
    { file: 'SynonymGeneratorTool.tsx', function: 'handleGenerateSynonyms' },
    { file: 'TextOptimizerTool.tsx', function: 'handleOptimizeText' },
    { file: 'PrivacyPolicyGeneratorTool.tsx', function: 'handleGeneratePolicy' },
    { file: 'QRGeneratorTool.tsx', function: 'handleGenerateQR' },
    { file: 'SEOAuditProTool.tsx', function: 'handleAnalyze' },
    { file: 'AnalyticsTool.tsx', function: 'handleAnalyze' },
    { file: 'EmojiTool.tsx', function: 'handleProcess' },
    { file: 'EmptyLinesRemovalTool.tsx', function: 'handleRemoveEmptyLines' },
    { file: 'DuplicateRemovalTool.tsx', function: 'handleRemoveDuplicates' },
    { file: 'TextToHtmlTool.tsx', function: 'handleConvert' },
    { file: 'SpacesToParagraphsTool.tsx', function: 'handleConvert' },
    { file: 'TextSortingTool.tsx', function: 'handleSort' },
    { file: 'WordInflectionTool.tsx', function: 'handleInflect' }
];

let updatedCount = 0;

specialTools.forEach(({ file, function: functionName }) => {
    const filePath = path.join(PAGES_PATH, file);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  ${file} - file not found`);
        return;
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (content.includes('await executeWithCoins(async () => {')) {
        console.log(`‚úÖ ${file} - already updated`);
        return;
    }
    
    // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const functionRegex = new RegExp(`(const ${functionName} = async \\(\\) => {[\\s\\S]*?requireAuth\\(\\)[\\s\\S]*?return;[\\s\\S]*?}[\\s\\S]*?)([\\s\\S]*?)(};)`, 'm');
    const match = content.match(functionRegex);
    
    if (match) {
        const beforeLogic = match[1];
        const toolLogic = match[2].trim();
        const endBrace = match[3];
        
        // –£–¥–∞–ª—è–µ–º statsService.incrementAndGetCount –∏–∑ –ª–æ–≥–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanLogic = toolLogic.replace(/\/\/ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤[\s\S]*?setLaunchCount\(prev => prev \+ 1\);\s*}\s*/g, '');
        
        const newFunction = beforeLogic + `
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–∞—Ç–æ–π –∫–æ–∏–Ω–æ–≤
        await executeWithCoins(async () => {
            ${cleanLogic}
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
            const newCount = await statsService.incrementAndGetCount(TOOL_ID);
            setLaunchCount(newCount);
        }, {
            inputLength: inputText ? inputText.length : 0
        });
    ` + endBrace;
        
        const newContent = content.replace(match[0], newFunction);
        
        // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        fs.writeFileSync(filePath + '.backup3', content);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(filePath, newContent);
        
        console.log(`üîß Updated ${file}`);
        updatedCount++;
    } else {
        console.log(`‚ö†Ô∏è  ${file} - could not find ${functionName} function`);
    }
});

console.log(`\nüéâ Final cleanup completed!`);
console.log(`   üìÑ Files updated: ${updatedCount}`);
console.log(`   üìã Backups created with .backup3 extension`);