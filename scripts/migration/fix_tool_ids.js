#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TOOL_ID –≤ —Ñ–∞–π–ª–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
// –ü—Ä–∏–≤–æ–¥–∏—Ç –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö ID –Ω–∞ –Ω–æ–≤—ã–µ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const idMapping = {
  'password_generator_tool': 'password-generator',
  'text_generator_tool': 'text-generator',
  'char_counter_tool': 'char-counter',
  'duplicate_finder_tool': 'duplicate-finder',
  'case_changer_tool': 'case-changer',
  'add_symbol_tool': 'add-symbol',
  'empty_lines_removal_tool': 'remove-empty-lines',
  'match_types_tool': 'match-types',
  'minus_words_tool': 'minus-words',
  'number_generator_tool': 'number-generator',
  'find_replace_tool': 'find-replace',
  'synonym_generator_tool': 'synonym-generator',
  'emoji_tool': 'emoji',
  'spaces_to_paragraphs_tool': 'spaces-to-paragraphs',
  'remove_line_breaks_tool': 'remove-line-breaks',
  'text_by_columns_tool': 'text-by-columns',
  'text_optimizer_tool': 'text-optimizer',
  'text_sorting_tool': 'text-sorting',
  'text_to_html_tool': 'text-to-html',
  'transliteration_tool': 'transliteration',
  'utm_generator_tool': 'utm-generator',
  'word_gluing_tool': 'word-gluing',
  'word_mixer_tool': 'word-mixer',
  'word_declension_tool': 'word-declension',
  'duplicate_removal_tool': 'remove-duplicates' // —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
};

function fixToolIds() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TOOL_ID –í –§–ê–ô–õ–ê–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í\n');
  
  const toolsDir = './frontend/src/pages';
  
  if (!fs.existsSync(toolsDir)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', toolsDir);
    return;
  }
  
  let totalChanges = 0;
  
  // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const files = fs.readdirSync(toolsDir)
    .filter(file => file.endsWith('Tool.tsx'))
    .map(file => path.join(toolsDir, file));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n`);
  
  files.forEach(filePath => {
    const fileName = path.basename(filePath);
    
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileName}`);
      return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    let changesMade = false;
    
    // –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º TOOL_ID
    for (const [oldId, newId] of Object.entries(idMapping)) {
      const regex = new RegExp(`const TOOL_ID = '${oldId}';`, 'g');
      
      if (content.match(regex)) {
        content = content.replace(regex, `const TOOL_ID = '${newId}';`);
        console.log(`  ‚úèÔ∏è ${fileName}: '${oldId}' ‚Üí '${newId}'`);
        changesMade = true;
        totalChanges++;
      }
    }
    
    if (changesMade) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`  ‚úÖ ${fileName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n`);
    } else {
      console.log(`  ‚ÑπÔ∏è ${fileName}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n`);
    }
  });
  
  console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalChanges} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ ${files.length} —Ñ–∞–π–ª–∞—Ö`);
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
}

function checkMissingIds() {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ï–î–û–°–¢–ê–Æ–©–ò–• ID –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
  
  const initFile = './backend/init-tools-table.js';
  if (!fs.existsSync(initFile)) {
    console.log('‚ö†Ô∏è –§–∞–π–ª init-tools-table.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const content = fs.readFileSync(initFile, 'utf8');
  const existingIds = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–∑ –±–∞–∑—ã
  const idMatches = content.match(/id: '[^']+'/g);
  if (idMatches) {
    idMatches.forEach(match => {
      const id = match.replace("id: '", '').replace("'", '');
      existingIds.push(id);
    });
  }
  
  console.log('üìã ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', existingIds.sort().join(', '));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ ID –Ω—É–∂–Ω—ã, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  const neededIds = Object.values(idMapping);
  const missingIds = neededIds.filter(id => !existingIds.includes(id));
  
  if (missingIds.length > 0) {
    console.log('\\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    missingIds.forEach(id => console.log(`  - ${id}`));
  } else {
    console.log('\\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ ID –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
}

function main() {
  fixToolIds();
  checkMissingIds();
}

if (require.main === module) {
  main();
}

module.exports = { idMapping };