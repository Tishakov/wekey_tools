const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'frontend/src/pages/FindReplaceTool.tsx',
  'frontend/src/pages/TransliterationTool.tsx', 
  'frontend/src/pages/EmptyLinesRemovalTool.tsx',
  'frontend/src/pages/AddSymbolTool.tsx',
  'frontend/src/pages/WordMixerTool.tsx',
  'frontend/src/pages/WordGluingTool.tsx',
  'frontend/src/pages/TextToHtmlTool.tsx',
  'frontend/src/pages/TextSortingTool.tsx',
  'frontend/src/pages/TextOptimizerTool.tsx',
  'frontend/src/pages/TextByColumnsTool.tsx',
  'frontend/src/pages/TextGeneratorTool.tsx',
  'frontend/src/pages/SpacesToParagraphsTool.tsx',
  'frontend/src/pages/RemoveLineBreaksTool.tsx',
  'frontend/src/pages/PasswordGeneratorTool.tsx',
  'frontend/src/pages/MinusWordsTool.tsx',
  'frontend/src/pages/MatchTypesTool.tsx',
  'frontend/src/pages/EmojiTool.tsx',
  'frontend/src/pages/DuplicateRemovalTool.tsx',
  'frontend/src/pages/CharCounterTool.tsx',
  'frontend/src/pages/AnalyticsTool.tsx'
];

function fixFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // 1. –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç useLocalizedLink –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const hasLocalizedLinkImport = content.includes('useLocalizedLink');
    if (!hasLocalizedLinkImport) {
      // –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∏–º–ø–æ—Ä—Ç–æ–º useTranslation
      const translationImportMatch = content.match(/import\s+{\s*([^}]*useTranslation[^}]*)\s*}\s+from\s+['"]react-i18next['"];?/);
      if (translationImportMatch) {
        const translationImportLine = translationImportMatch[0];
        const newImportLine = translationImportLine + '\nimport { useLocalizedLink } from \'../hooks/useLanguageFromUrl\';';
        content = content.replace(translationImportLine, newImportLine);
      }
    }
    
    // 2. –î–æ–±–∞–≤–∏—Ç—å createLink –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    const hasCreateLink = content.includes('createLink');
    if (!hasCreateLink) {
      // –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å const { t } = useTranslation();
      const useTranslationMatch = content.match(/const\s+{\s*t\s*}\s*=\s*useTranslation\(\);?/);
      if (useTranslationMatch) {
        const useTranslationLine = useTranslationMatch[0];
        const newUseLine = useTranslationLine + '\n  const { createLink } = useLocalizedLink();';
        content = content.replace(useTranslationLine, newUseLine);
      }
    }
    
    // 3. –ó–∞–º–µ–Ω–∏—Ç—å to="/" –Ω–∞ to={createLink('')}
    content = content.replace(/to=["']\/["']/g, 'to={createLink(\'\')}');
    
    // –ó–∞–ø–∏—Å–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
console.log('üîß –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...\n');

filesToFix.forEach(filePath => {
  const fullPath = path.join(__dirname, filePath);
  if (fs.existsSync(fullPath)) {
    fixFile(fullPath);
  } else {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
  }
});

console.log('\n‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');