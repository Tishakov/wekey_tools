#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * –ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (handle*, process*, generate*) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç requireAuth
 */

const fs = require('fs');
const path = require('path');

const pagesDir = path.join(__dirname, 'frontend', 'src', 'pages');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–µ –∂–µ, —á—Ç–æ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ)
const toolFiles = [
    'CaseChangerTool.tsx',
    'TextSortingTool.tsx', 
    'TextOptimizerTool.tsx',
    'FindReplaceTool.tsx',
    'NumberGeneratorTool.tsx',
    'TextGeneratorTool.tsx',
    'SynonymGeneratorTool.tsx',
    'RemoveLineBreaksTool.tsx',
    'EmptyLinesRemovalTool.tsx',
    'SpacesToParagraphsTool.tsx',
    'EmojiTool.tsx',
    'TransliterationTool.tsx',
    'TextToHtmlTool.tsx',
    'WordGluingTool.tsx',
    'WordMixerTool.tsx',
    'WordInflectionTool.tsx',
    'UtmGeneratorTool.tsx',
    'TextByColumnsTool.tsx',
    'AddSymbolTool.tsx',
    'MatchTypesTool.tsx',
    'MinusWordsTool.tsx'
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞—â–∏—Ç–∏—Ç—å
const functionPatterns = [
    /const (handle\w+) = (\([^)]*\))? ?=> ?\{/g,
    /const (process\w+) = (\([^)]*\))? ?=> ?\{/g,
    /const (generate\w+) = (\([^)]*\))? ?=> ?\{/g,
    /const (show\w+) = (\([^)]*\))? ?=> ?\{/g,
    /const (execute\w+) = (\([^)]*\))? ?=> ?\{/g
];

// –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
const authCheckCode = `        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        if (!requireAuth()) {
            return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
        try {
            const newCount = await statsService.incrementAndGetCount(TOOL_ID);
            setLaunchCount(newCount);
        } catch (error) {
            console.error('Failed to update stats:', error);
            setLaunchCount(prev => prev + 1);
        }

`;

function findMainFunction(content) {
    // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const commonNames = [
        'handleShowResult', 'handleShow', 'handleGenerate', 'handleProcess',
        'handleExecute', 'handleConvert', 'handleTransform', 'handleApply'
    ];
    
    for (const name of commonNames) {
        if (content.includes(`const ${name} =`)) {
            return name;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, –∏—â–µ–º –ª—é–±—ã–µ handle* —Ñ—É–Ω–∫—Ü–∏–∏
    const handleMatch = content.match(/const (handle\w+) = /);
    if (handleMatch) {
        return handleMatch[1];
    }
    
    return null;
}

function addAuthToFunction(content, functionName) {
    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    const funcPattern = new RegExp(`const ${functionName} = (async )?\\([^)]*\\) ?=> ?\\{`);
    const match = content.match(funcPattern);
    
    if (!match) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é ${functionName}`);
        return content;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
    const funcStart = match.index + match[0].length;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const afterFunc = content.substring(funcStart, funcStart + 500);
    if (afterFunc.includes('requireAuth()')) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ ${functionName}`);
        return content;
    }
    
    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ async, –¥–µ–ª–∞–µ–º –µ—ë async
    let updatedContent = content;
    if (!match[1]) { // –µ—Å–ª–∏ –Ω–µ—Ç async
        updatedContent = content.replace(
            `const ${functionName} = (`,
            `const ${functionName} = async (`
        );
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const newMatch = updatedContent.match(funcPattern);
    const newFuncStart = newMatch.index + newMatch[0].length;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    updatedContent = 
        updatedContent.substring(0, newFuncStart) + 
        '\n' + authCheckCode + 
        updatedContent.substring(newFuncStart);
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ ${functionName}`);
    return updatedContent;
}

function processToolFile(filePath) {
    console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${path.basename(filePath)}`);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const mainFunction = findMainFunction(content);
    if (!mainFunction) {
        console.log(`‚ö†Ô∏è –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${path.basename(filePath)}`);
        return false;
    }
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${mainFunction}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const updatedContent = addAuthToFunction(content, mainFunction);
    
    if (updatedContent !== content) {
        fs.writeFileSync(filePath, updatedContent);
        console.log(`‚úÖ –§–∞–π–ª ${path.basename(filePath)} –æ–±–Ω–æ–≤–ª–µ–Ω`);
        return true;
    }
    
    return false;
}

function main() {
    console.log('üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n');
    
    let successCount = 0;
    
    toolFiles.forEach(toolFile => {
        const filePath = path.join(pagesDir, toolFile);
        if (processToolFile(filePath)) {
            successCount++;
        }
    });
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${toolFiles.length} —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    console.log('üéâ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

if (require.main === module) {
    main();
}